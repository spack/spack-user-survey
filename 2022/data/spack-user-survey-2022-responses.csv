Timestamp,What kind of user are you?,Where do you work?,What country are you in?,Are you part of the U.S. Exascale Computing Project (ECP)?,Are you part of any EuroHPC joint undertaking projects? (https://eurohpc-ju.europa.eu/),Are you part of some other project that uses Spack that you'd like us to highlight (leave blank if not)?,What languages do you primarily program in?,What are your primary application areas?,How did you find out about Spack?,How long have you been using Spack?,Have you contributed to Spack?,What version(s) of Spack do you use?,What OS do you use Spack on?,How many software installations have you done with Spack in the past year?,What Python version(s) do you use to run Spack?,How do you get installed Spack packages into your environment?,Which of the following Spack features do you use? (details at https://github.com/spack/spack/releases),Do you have local Spack package repositories?,Do you have any local modifications to Spack itself?,Do you use any third-party tools/front-ends to do development with Spack?,Which processors do you expect to use with Spack in the next year?,Which GPUs do you expect to use with Spack in the next year?,Which compilers do you expect to use with Spack in the next year?,Rank these TBD Spack features by importance [Better error messages],Rank these TBD Spack features by importance [Compilers as proper dependencies],"Rank these TBD Spack features by importance [Separate concretization of build dependencies (build build tools with gcc/clang, not fancy compilers)]","Rank these TBD Spack features by importance [Language virtual dependencies (e.g., depends_on(""cxx@2017:""))]",Rank these TBD Spack features by importance [Testing / integration with Pavilion2/ReFrame/other test tool],Rank these TBD Spack features by importance [More packages in public build caches],Rank these TBD Spack features by importance [Better organized/publicized public build caches],Rank these TBD Spack features by importance [Better compiler flag handling],Rank these TBD Spack features by importance [Performance/speed improvements],Rank these TBD Spack features by importance [Better autodetection of system packages],Rank these TBD Spack features by importance [Better GPU compiler support],Rank these TBD Spack features by importance [Generate GitHub Actions pipelines + build caches],Rank these TBD Spack features by importance [More developer features],Rank these TBD Spack features by importance [Improvements for `spack test`],Rank these TBD Spack features by importance [Better CI Stability / faster PR turnaround],Rank these TBD Spack features by importance [SpackOS/support for custom libc],What features NOT in the prior list would you like to see?,"We're planning an in-person Spack user meeting in August, will you plan to attend?",Have you done a Spack Tutorial?,How do you get help with Spack when you need it?,How often do you consult the Spack documentation?,"If there were commercial support for Spack, would you or your organization buy it?",If there were a software foundation (ala Linux Foundation or CNCF) around Spack would it make you more likely to use/recommend Spack?,How would you rate the overall quality of ... [Spack documentation],How would you rate the overall quality of ... [Spack community],How would you rate the overall quality of ... [Spack packages],How would you rate the overall quality of ... [Spack],Tell us briefly about your use case and your usual Spack workflow.,What about Spack has helped you the most in the past year?,What are the biggest pain points in Spack for your workflow? (feel free to link to issues),What's the biggest thing we could do to improve Spack over the next year?,Are there key packages you'd like to see in Spack that are not included yet?,Do you have any other comments for us?,"If you're interested in being contacted about your response, please leave us your email."
2/26/2023 14:12:52,Solutions Architect,Cloud Provider,United States,No,No,,"Fortran, C",HPC / Simulation,Birds-of-a-feather (BOF) at conference,5,Packages,develop,Amazon Linux,"500-1,000",3.1,spack load,"Environments, spack containerize, Build caches (making binary packages), spack external find, spack develop",No,No,No,"AMD, Intel, ARM",No GPUs,"gcc, Intel Compilers, Intel OneAPI, NVHPC",Not Important,Very Important,Not Important,Not Important,Not Important,Very Important,Very Important,Very Important,Very Important,Not Important,Not Important,Not Important,Not Important,Not Important,Not Important,Not Important,,"Yes, I'd like to attend",Yes,"Documentation, Slack",Weekly,Probably not,Probably not,Good,Excellent,Good,Excellent,,,,,,,
2/26/2023 14:39:00,Scientist/Researcher,University research group,Canada,No,No,,"C++, Python, sh/bash/other shell script","HPC / Simulation, Statistics / Data Analysis, AI/ML, High Energy Physics",Word of mouth,4,"Packages, Documentation, Slack Discussions, Issues","0.19, develop","Ubuntu 20, Ubuntu 22, Debian 11","500-1,000","3.10, 3.11","Spack environments, spack view, Containers","Environments, spack containerize, Chaining (upstreams), Stacks (matrices in environments), Mirrors (spack mirror create / air gap support), Build caches (making binary packages), Public build caches at https://binaries.spack.io, spack ci (GitLab pipeline generation -- yourself, not on our CI), spack external find, Externals in packages.yaml, Concretization preferences in packages.yaml, New `require:` directive in packages.yaml, spack ci (generate GitLab Pipelines), New concretizer (clingo), spack develop, concretization: --reuse (default), concretization: --fresh (build everything fresh), concretizer:unify:true (concretize together), concretizer:unify:when_possible, Multiple build systems in one package, Git versions, spackbot (@spackbot fix style; @spackbot rebuild everything, etc.)",Yes -- several,No,No,"AMD, Intel, ARM",NVIDIA T4,"gcc, Intel OneAPI, LLVM, nvcc (CUDA)",Somewhat important,Very Important,Somewhat important,Very Important,Not Important,Not Important,Not Important,Somewhat important,Slightly Important,Slightly Important,Somewhat important,Slightly Important,Slightly Important,Slightly Important,Slightly Important,Not Important,,Maybe,Yes,"Documentation, Slack, GitHub Issues, Source Code",Weekly,No,Probably,Excellent,Excellent,Good,Excellent,Providing consistent containerized and cvmfs environments for distributed grid-based high energy physics simulations and analysis of these simulations by a user community of ~500 active researchers.,Git version integration in spack packages.,"Inability to 'layer' concretized environments, i.e. add packages to an already concretized environment, taking the already concretized environment specs as entirely fixed and unchangable.",Compilers as dependencies.,,,
2/26/2023 14:44:50,Scientist/Researcher,"DOE/Office of Science Lab (e.g., ORNL/ANL/LBL)",United States,Yes,No,,"C++, Python, sh/bash/other shell script","HPC / Simulation, Computer Science Research",Tutorial,4,No,develop,"Ubuntu 18, Ubuntu 20, Ubuntu 22, Debian 11",10 - 100,"3.9, 3.10",Lmod,"Environments, Module generation",No,Yes,No,"AMD, Intel","NVIDIA Ampere, NVIDIA Hopper, AMD MI300, Intel Xe (Ponte Vecchio)","gcc, Intel OneAPI, LLVM, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA), armclang",Very Important,Critical,Very Important,Very Important,Not Important,Not Important,Not Important,Very Important,Somewhat important,Somewhat important,Very Important,Somewhat important,Slightly Important,Slightly Important,Slightly Important,Very Important,,No,No,"Documentation, Slack",Monthly,No,"Yes, definitely!",Excellent,Excellent,Excellent,Excellent,,,,,,,
2/26/2023 14:58:00,System Administrator,University research group,Brazil,No,No,,"C, C++, Python",Computer Science Research,Search,0,No,0.19,Debian 10,100 - 200,3.9,Lmod,Module generation,Yes -- just one,Yes,No,Intel,"NVIDIA Volta, NVIDIA Ampere","gcc, Intel Compilers, Intel OneAPI, NVHPC, nvcc (CUDA)",Critical,Critical,Slightly Important,Critical,Not Important,Slightly Important,Slightly Important,Critical,Critical,Critical,Critical,Not Important,Not Important,Not Important,Not Important,Not Important,,"Yes, I'd like to attend",Yes,"Documentation, GitHub Issues, GitHub Discussions",Weekly,No,"Yes, definitely!",Excellent,Excellent,Good,Excellent,"I install every HPC package with spack, except slurm. ","I refactored the HPC environment last year, and spack helped to build the essential packages used in my research group.",Wait several minutes to build a package and get dependencies error messages. ,"Improve compilation time, and include more configuration setting as variants. ","No, but better support for slurm.","Excellent work, as an HPC manager, spack improved my productivity. ",
2/26/2023 15:27:06,Student,University research group,France,No,Yes,,"C, C++, Python, Rust, sh/bash/other shell script, Lua","HPC / Simulation, Computer Science Research, High Energy Physics, Compiler Testing",Word of mouth,1,No,develop,Arch,10 - 100,3.1,spack load,"Environments, Module generation, Git versions, spack load",No,No,No,"AMD, Intel, ARM","NVIDIA Volta, NVIDIA Ampere, NVIDIA Hopper, AMD MI200/250X, AMD MI300, Intel Xe (Ponte Vecchio)","gcc, Intel OneAPI, NVHPC, LLVM, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA), armclang",Very Important,Very Important,Critical,Critical,Not Important,Slightly Important,Slightly Important,Very Important,Very Important,Critical,Very Important,Not Important,Not Important,Somewhat important,Not Important,Somewhat important,,No,Yes,"Documentation, Coworkers, GitHub Issues, GitHub Discussions, spack help",Monthly,Probably,Probably not,Good,Good,Excellent,Excellent,I primarily use Spack on remote clusters to install the compilers and libraries that I need. It is also useful when I want to install some software that depends on something that isn't installed by default on cluster machines (e.g. my text editor of choice - Helix - depends on cargo/rustc to be built from source).,Quickly setting up environments on remote clusters for trying out multiple compilers on HPC applications.,"Long build times, sometimes rebuilding dependencies that are already installed/available on the system.",,,Thanks a lot for your great work! Spack is an awesome tool to use for HPC people,
2/26/2023 16:02:33,Research Software Engineer (RSE),"DOE/Office of Science Lab (e.g., ORNL/ANL/LBL)",United States,No,No,,"Python, sh/bash/other shell script",Bioinformatics,Word of mouth,1,"Slack Discussions, Issues",0.19,RHEL 8,10 - 100,3.8,"Spack environments, Lmod","Environments, Module generation, spack containerize, Build caches (making binary packages), Distributed Builds (srun/mpirun spack install), New concretizer (clingo)",No,No,No,AMD,No GPUs,"gcc, LLVM",Critical,Slightly Important,Slightly Important,Not Important,Not Important,Somewhat important,Slightly Important,Slightly Important,Somewhat important,Very Important,Not Important,Not Important,Not Important,Not Important,Not Important,Not Important,,No,No,"Documentation, Slack, Coworkers, GitHub Issues, spack help",Daily,Probably not,Probably not,Good,Excellent,OK,Good,,,non-anonymous environments stored outside of $spack_root (so that they can be kept in a git repo),,,slack community is amazing - response time is outstanding,
2/26/2023 16:08:27,Scientist/Researcher,University research group,Portugal,No,No,,"C++, Python, Julia","HPC / Simulation, High Energy Physics",Search,3,"Packages, Issues",develop,"RHEL 8, CentOS 7, Windows Subsystem for Linux (WSL)",10 - 100,3.11,"Spack environments, spack view","Environments, spack external find, Externals in packages.yaml, New concretizer (clingo)",No,Yes,No,"AMD, Intel",NVIDIA Ampere,"gcc, Intel Compilers, Intel OneAPI, LLVM",Critical,Critical,Somewhat important,Somewhat important,Not Important,Not Important,Not Important,Somewhat important,Somewhat important,Critical,Somewhat important,Not Important,Somewhat important,Not Important,Not Important,Slightly Important,Better autodetection of system packages,No,No,"Documentation, GitHub Issues, GitHub Discussions, Source Code",Weekly,No,Probably,Excellent,Excellent,Excellent,Excellent,,,,,,,
2/26/2023 16:29:27,Scientist/Researcher,Other Public Research Lab,Canada,No,No,,"C++, Julia",HPC / Simulation,Birds-of-a-feather (BOF) at conference,5,"Packages, Core Features, Slack Discussions, GitHub Discussions, Issues","0.19, develop, custom fork","macOS 11 (Ventura), Ubuntu 20",100 - 200,"2.7, 3.9, 3.10",spack view,"Environments, spack containerize, Externals in packages.yaml, New concretizer (clingo), concretization: --fresh (build everything fresh), concretizer:unify:true (concretize together), spackbot (@spackbot fix style; @spackbot rebuild everything, etc.)",No,Yes,,"AMD, Intel, IBM Power, ARM","NVIDIA T4, NVIDIA Volta, NVIDIA Ampere, AMD MI300","gcc, NVHPC, LLVM, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA)",Somewhat important,Very Important,Somewhat important,Slightly Important,Not Important,Not Important,Not Important,Slightly Important,Slightly Important,Somewhat important,Very Important,Not Important,Slightly Important,Not Important,Very Important,Not Important,"- Concretizer (Clingo) should not use old package versions unless there's a good reason.
- Clingo should tell me the reasons for what it's doing, and why it's failing.",No,Yes,"Documentation, Slack, Source Code",Monthly,No,Probably not,Horrible,Good,Good,OK,"For the Einstein Toolkit http://einsteintoolkit.org/, I want to provide the software dependencies on a wide range of systems (laptop, HPC, CUDA or not, various CPUs, etc.), so that the Einstein Toolkit sees the same or very similar environments everywhere.

In my work flow, I log into an HPC system, build a modern GCC via Spack, then have a headache which MPI/ROC libraries I can use and how to make them palatable to Spack, then build everything else (about 20 package plus their dependencies).

I do not care about build time. I do care a bit about disk space since HPC centres are stingy with their home directory quota.","Going from a single `spack.yaml` to a complete software install in a relatively reliable manner is very convenient.

The alternative would be Docker images, but containers on HPC systems haven't advanced far enough yet.","Sometimes one needs to use existing software packages on HPC systems (MPI, ROC). I wish the HPC centres maintained `packages.yaml` files for these.

Spack doesn't remember when I create a view for packages, and won't warn when I uninstall them.","Compilers should be proper dependencies. In a similar manner, build tools (cmake etc.) probably don't need to use the same dependencies, so this could be relaxed.","No, I've been submitting my software packages, and you've accepted them.",Thanks for the hard work!,
2/26/2023 16:38:25,Research Software Engineer (RSE),University research group,United States,No,No,PSAAP-III,"C++, Python, Julia","HPC / Simulation, Computer Science Research, High Energy Physics",Used at my site,1,Packages,develop,"macOS 10.15 (Catalina), Ubuntu 18, Ubuntu 20, Ubuntu 22",10 - 100,"3.10, 3.11","spack load, Spack environments","Environments, spack containerize, build-env (debug a build), spack ci (GitLab pipeline generation -- yourself, not on our CI), spack-python (Python scripting), spack external find, Externals in packages.yaml, Concretization preferences in packages.yaml, New concretizer (clingo), spack develop, concretization: --reuse (default), concretization: --fresh (build everything fresh), concretizer:unify:true (concretize together), concretizer:unify:when_possible, Multiple build systems in one package, Variant/flag propagation (++, ~~, ==), Git versions, spack load",No,No,No,"AMD, Intel","NVIDIA T4, NVIDIA Volta, NVIDIA Ampere, AMD MI100","gcc, LLVM, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA), apple clang",Not Important,Critical,Very Important,Critical,Not Important,Very Important,Very Important,Critical,Slightly Important,Somewhat important,Very Important,Very Important,Very Important,Not Important,Not Important,Not Important,,Maybe,Yes,"Documentation, GitHub Issues",Monthly,Probably not,Probably,OK,Excellent,Excellent,Excellent,I build complex compilers and DSLs. Getting undergrads and other grad students to use them is a pain when they have to build them. So is getting CI up and running. I've solved this by building spack packages for them. Using spack to allow grad students to easily install them via the basic install workflow or distributing dockerfiles to undergrads is basically my workflow.,Mainly its existence and the dockerfiles.,"Python packages: in particular, the interaction of Spack with things like virtualenv. I'd love a bespoke way to use Spack with those, but so far I've only hacked around the issue. Though honestly I've not looked into this very much so maybe there is a way that I just don't know of.

Better spec language documentation: I don't feel like there is a single place where I can find a grammar and semantics for specs described in the docs. I had to look at the code to find the exact spec. Again, maybe I've just not found it yet, but a simple grammar and PL style spec would be nice.","Compilers as dependencies is probably the best thing for my general area. Otherwise, improving the interaction between spack and existent python packaging/isolation systems would be great. ",No,Thanks for all your hard work!,
2/26/2023 17:09:06,Software Developer,"DOE/Office of Science Lab (e.g., ORNL/ANL/LBL)",United States,No,No,scale.ornl.gov,"Fortran, C, C++, Python",HPC / Simulation,Used at my site,1,No,0.17,"macOS 12 (Monterey), RHEL 7, RHEL 8, CentOS 6, CentOS 7, CentOS 8, Ubuntu 18, Ubuntu 20",10 - 100,"3.7, 3.8, 3.9",Spack environments,"Environments, New `require:` directive in packages.yaml, concretization: --reuse (default), concretization: --fresh (build everything fresh)",Yes -- just one,No,No,"AMD, Intel",No GPUs,"gcc, Intel Compilers, LLVM",Very Important,Critical,Somewhat important,Slightly Important,Not Important,Slightly Important,Somewhat important,Critical,Somewhat important,Very Important,Slightly Important,Slightly Important,Not Important,Not Important,Not Important,Not Important,,No,Yes,"Documentation, Coworkers",Monthly,Probably not,Probably not,Good,OK,OK,Bad,"Our SCALE team was introduced to Spack by Seth Johnson as they were using it to build Shift on HPC. We are all used to using package managers like brew or apt. Trilinos is our major dependency. We have a mixed codebase with C C++ and fortran. we are moving away from fortran but we currently need it to build. Spack certainly makes things possible that would otherwise be difficult, but all of the non HPC oriented members of the team have been frustrated using it. Once we started always using environments it made it a little better. Without Seth pushing us, we would not stick with it. People find it easier to build dependencies using cmake.",,Seems overly complex for casual developers who just want to use it to install dependencies for the code their working on.,Enable on windows.,,,
2/26/2023 17:31:51,Software Developer,"DOE/NNSA Lab (e.g., LLNL/LANL/SNL)",United States,No,No,,"C++, Python, Go, sh/bash/other shell script, Javascript",Developer Environments and Containers,Used at my site,2,"Packages, Core Features, Documentation, Slack Discussions, Issues, Tools/integrations",Whichever one works for my need,"Ubuntu 20, Ubuntu 22",1 - 10,"3.7, 3.8, 3.9, 3.10","Spack environments, Containers","Environments, New concretizer (clingo), spack install",No,Yes,No,AMD,No GPUs,gcc,Very Important,Very Important,Not Important,Not Important,Not Important,Very Important,Somewhat important,Not Important,Not Important,Somewhat important,Not Important,Somewhat important,Somewhat important,Somewhat important,Not Important,Not Important,Reliability and testing of all packages that are added,No,No,"Slack, GitHub Issues, Source Code",Yearly,Probably not,Probably not,OK,Excellent,Bad,Bad,Getting something to reliably build.,I don't know.,Something that worked before is different or broken.,"Decide on most important features and make them work really well, and remove features needed by less than 80% of users.",,The community and developers are exceptional.,
2/26/2023 18:01:10,Scientist/Researcher,"DOE/Office of Science Lab (e.g., ORNL/ANL/LBL)",United States,No,No,SCALE,"Fortran, C++, Python",HPC / Simulation,Word of mouth,1,No,"0.18, 0.19","macOS 11 (Big Sur), RHEL 6, RHEL 7, Fedora",10 - 100,"2.7, 3.9, 3.11","spack load, Spack environments","Build caches (making binary packages), Externals in packages.yaml, Concretization preferences in packages.yaml, New concretizer (clingo), concretizer:unify:true (concretize together)",No,Yes,No,"AMD, Intel",No GPUs,"gcc, Intel OneAPI, LLVM",Somewhat important,Somewhat important,Slightly Important,Slightly Important,Not Important,Slightly Important,Slightly Important,Very Important,Very Important,Critical,Somewhat important,Not Important,Somewhat important,Not Important,Not Important,Slightly Important,,Maybe,No,"Documentation, Coworkers",Weekly,Probably not,Probably,Excellent,Good,Good,Good,Install space packages on a variety of Linux/Mac VMs for our code.,Set up toolchains quickly on a variety of Linux VMs.,Sometimes there become a lot of extra packages installed when I'm messing around in environments and I don't know how to remove them all but keep the ones in the environments that I have.,,Not really.,,
2/26/2023 20:35:26,Research Software Engineer (RSE),"DOE/NNSA Lab (e.g., LLNL/LANL/SNL)",United States,Yes,No,,"C++, Python, sh/bash/other shell script",HPC / Simulation,Used at my site,4,"Packages, Core Features, Documentation, Slack Discussions, GitHub Discussions, Issues",develop,"macOS 12 (Monterey), RHEL 7, RHEL 8","500-1,000","3.6, 3.7, 3.9, 3.10","spack load, Spack environments, Environment Modules (TCL modules), Containers","Environments, Module generation, Chaining (upstreams), Stacks (matrices in environments), Mirrors (spack mirror create / air gap support), spack-python (Python scripting), spack external find, Externals in packages.yaml, Concretization preferences in packages.yaml, New `require:` directive in packages.yaml, Distributed Builds (srun/mpirun spack install), New concretizer (clingo), spack develop, concretization: --reuse (default), concretization: --fresh (build everything fresh), concretizer:unify:true (concretize together), concretizer:unify:when_possible, spack load, spackbot (@spackbot fix style; @spackbot rebuild everything, etc.), spack diff (compare two specs)",Yes -- several,My site has a front-end or extension to Spack,spack manager,"AMD, Intel, ARM","NVIDIA Volta, AMD MI200/250X, AMD MI300","gcc, Intel Compilers, LLVM, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA), CCE (Cray Compilers)",Very Important,Very Important,Very Important,Not Important,Not Important,Somewhat important,Somewhat important,Very Important,Critical,Very Important,Very Important,Somewhat important,Somewhat important,Slightly Important,Very Important,Not Important,"Splitting the packages repo from the core spack, ","Yes, I'd like to present something!",No,"Documentation, Slack, Coworkers, GitHub Issues, GitHub Discussions, spack help, Source Code",Weekly,Probably,Probably,Good,Excellent,Good,Excellent,I use spack coupled with spack-manager to develop software and deploy simulation software for analysts to use,"The community has helped me learn a lot that extend, spack drives 90% of my development work",Weird interactions between externals like on the OLCF systems. Linker issues,,,Thanks for all you do.  Spack is a great tool. I'm all in.,
2/26/2023 22:10:27,Software Developer,Company,Italy,No,No,,"C++, Python",HPC / Simulation,Search,5,"Packages, Core Features, Documentation, Slack Discussions, GitHub Discussions, Issues, Mailing List, Tools/integrations","0.19, develop","macOS 12 (Monterey), Ubuntu 20","> 1,000","3.6, 3.7, 3.8, 3.9, 3.10, 3.11",Spack environments,"Environments, spack containerize, Stacks (matrices in environments), Mirrors (spack mirror create / air gap support), Build caches (making binary packages), build-env (debug a build), spack-python (Python scripting), spack external find, Concretization preferences in packages.yaml, New `require:` directive in packages.yaml, New concretizer (clingo), concretization: --reuse (default), concretization: --fresh (build everything fresh), concretizer:unify:true (concretize together), concretizer:unify:when_possible, Multiple build systems in one package, spackbot (@spackbot fix style; @spackbot rebuild everything, etc.), spack diff (compare two specs)",No,No,No,"AMD, Intel, IBM Power, ARM",No GPUs,"gcc, Intel OneAPI, NVHPC, LLVM",Very Important,Very Important,Very Important,Somewhat important,Slightly Important,Somewhat important,Slightly Important,Somewhat important,Very Important,Somewhat important,Somewhat important,Somewhat important,Slightly Important,Somewhat important,Critical,Slightly Important,,Maybe,Yes,"Documentation, Slack, GitHub Issues, GitHub Discussions, spack help, Source Code",Daily,No,Probably,Good,Excellent,Excellent,Good,,,,,,,
2/26/2023 23:08:03,Scientist/Researcher,University HPC/Computing Center,Poland,No,No,,C++,HPC / Simulation,Presentation,3,No,0.19,"CentOS 7, Ubuntu 20, Ubuntu 22, Arch",100 - 200,"2.7, 3.10, 3.11",Spack environments,"Environments, spack external find, Externals in packages.yaml, concretization: --reuse (default), concretization: --fresh (build everything fresh), Git versions",No,No,No,Intel,No GPUs,gcc,Very Important,Slightly Important,Slightly Important,Very Important,Not Important,Somewhat important,Somewhat important,Critical,Slightly Important,Slightly Important,Not Important,Not Important,Not Important,Not Important,Not Important,Not Important,,No,No,Documentation,Yearly,Probably not,Probably not,Good,OK,Good,Good,"CI workflow of my HPC library, building dependencies on my cluster (where I don’t have admin rights)","General ease of use, environments, variants","Packages randomly failing to build when I refresh my dependencies (e.g. rebuild the same dependencies with an updated compiler), that’s not really spack’s fault though",,,,
2/26/2023 23:19:09,Research Software Engineer (RSE),University HPC/Computing Center,Switzerland,No,No,,"Fortran, C++, Python","HPC / Simulation, AI/ML",Used at my site,0,"Packages, Issues","0.19, develop","macOS 12 (Monterey), macOS 11 (Ventura), CentOS 8, Ubuntu 22",200 - 500,"3.8, 3.9, 3.10","spack build-env, Custom script or env vars","Environments, Chaining (upstreams), Mirrors (spack mirror create / air gap support), Build caches (making binary packages), build-env (debug a build), concretization: --fresh (build everything fresh), concretizer:unify:true (concretize together), Variant/flag propagation (++, ~~, ==), Git versions",Yes -- several,No,No,"AMD, ARM","NVIDIA Volta, NVIDIA Ampere, NVIDIA Hopper, AMD MI100, AMD MI200/250X, AMD MI300","gcc, NVHPC, LLVM, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA)",Critical,Very Important,Somewhat important,Somewhat important,Somewhat important,Slightly Important,Slightly Important,Very Important,Very Important,Somewhat important,Very Important,Slightly Important,Slightly Important,Slightly Important,Somewhat important,Not Important,,No,Yes,"Documentation, Slack, Coworkers, GitHub Issues, GitHub Discussions, Source Code",Weekly,Probably not,Probably,Excellent,Excellent,OK,Good,,,,,,,
2/27/2023 1:00:56,System Administrator,University HPC/Computing Center,Austria,No,,,"Fortran, C, C++, Python, Perl, sh/bash/other shell script, MATLAB",HPC / Simulation,Search,5,GitHub Discussions,"0.19, develop","CentOS 7, Rocky 8, Ubuntu 18, Ubuntu 20, Ubuntu 22, Windows Subsystem for Linux (WSL)","500-1,000","3.6, 3.8, 3.10",Environment Modules (TCL modules),"Module generation, Externals in packages.yaml, Concretization preferences in packages.yaml, New `require:` directive in packages.yaml, New concretizer (clingo), concretization: --reuse (default), concretization: --fresh (build everything fresh)",No,No,No,"AMD, Intel","NVIDIA Volta, NVIDIA Ampere","gcc, Intel Compilers, Intel OneAPI, LLVM, nvcc (CUDA)",Very Important,Somewhat important,Not Important,Not Important,Not Important,Not Important,Not Important,Very Important,Slightly Important,Very Important,Very Important,Not Important,Somewhat important,Not Important,Not Important,Not Important,"When I replied ""not important"" above this means that I have no opinion about these features, NOT that I deem them unimportant (which is a VERY DIFFERENT thing).",Maybe,Yes,"Documentation, Slack, GitHub Issues, GitHub Discussions",Daily,Probably not,Probably,Good,OK,OK,Good,"Maintaining software installations for a diverse community (approx. 200 users, 50 disciplines) of HPC cluster users",Reducing workload for installations (months/years of installation effort reduced to days/weeks),"Reproducibility of installations and configurations; defaults in packages.yaml randomly being ignored forcing me to put them on the command line; lack of verbose output of concretization process (attribution) to pinpoint causes for unexpected results; when an installation fails, diagnosing and fixing the error can become a nightmare (documented workflows would be welcome); documentation is mostly quite good but sometimes explanations are tautological thus incomprehensible to the uninitiated (e.g. https://spack.readthedocs.io/en/latest/command_index.html#spack-concretize) - recommendation: systematically review documentation for purpose, meaning and semantics including scope and persistence of effects of commands; documentation should include recommended practices for various use cases including preparatory setup of instances; unnecessary redundant installation of non-performance-critical or install-time prerequisites (e.g. perl) for multiple microarchitectures / toolchains in heterogeneous cluster; need to have multiple spack instances to install more recent versions of packages; lack of reliable separation of multiple Spack instances on same cluster (data/configuration/cache leaks - is setting SPACK_DISABLE_LOCAL_CONFIG, build_stage, sufficient?); Better separation of spack software - instance configuration - managed software (goal: upgrade spack and continue managing existing software tree); more user friendly TCL module names (recognizability of variants);",Resolving one or more of the above issues would be great,,"Bottom line: despite several grief points, Spack has allowed us to set up a new HPC cluster with new middleware (SGE -> Slurm - requiring us to rebuild all existing MPI software), and to respond to many users' installation requests in reasonabe time - despite reduced workforce in our HPC group. Going on without Spack would have been impossible. So a HUGE THANK YOU from our side!",
2/27/2023 2:21:44,Computational Scientist,Other Public Research Lab,Italy,No,Yes,,"Fortran, C, C++, Python","HPC / Simulation, Statistics / Data Analysis, Bioinformatics",Used at my site,5,"Packages, Slack Discussions, Issues","0.19, develop, custom fork","macOS 10.15 (Catalina), RHEL 8, CentOS 8, Rocky 8, Ubuntu 20, Ubuntu 22",10 - 100,"2.7, 3.11","spack load, Spack environments, Environment Modules (TCL modules)","Environments, Module generation, spack external find, Externals in packages.yaml, Concretization preferences in packages.yaml, New concretizer (clingo), concretizer:unify:true (concretize together), Multiple build systems in one package, spack load",Yes -- just one,No,No,"Intel, IBM Power, ARM, RISC-V","NVIDIA Volta, NVIDIA Ampere, AMD MI300, Intel Xe (Ponte Vecchio)","gcc, Intel OneAPI, NVHPC, LLVM, nvcc (CUDA)",Very Important,Somewhat important,Slightly Important,Slightly Important,Not Important,Very Important,Somewhat important,Critical,Critical,Critical,Somewhat important,Not Important,Critical,Not Important,Very Important,Somewhat important,,Maybe,Yes,"Documentation, Source Code",Monthly,"Yes, definitely!",Probably,OK,Excellent,Good,Good,Deploy system-wide HPC software stacks. Deploy local HPC software stacks to overcome terrible provided environments. Provide dep files for code bases (a.k.a. pip requirement files for C++),,"Not being able to specify a compiler in an environment like: this is the compiler that has to be installed, registered and used to build the rest of the environment.","Compilers as deps, especially in environments.",,,
2/27/2023 2:28:33,Research Software Engineer (RSE),University HPC/Computing Center,United Kingdom,No,No,,"Fortran, C++, Python",HPC / Simulation,Used at my site,0,"Packages, Slack Discussions, Issues",develop,"Rocky 8, Ubuntu 22",10 - 100,"3.6, 3.9","spack load, Spack environments, Environment Modules (TCL modules)","Environments, Module generation, spack external find, Externals in packages.yaml, New concretizer (clingo), spack develop, concretization: --reuse (default), spack load",No,No,No,"AMD, Intel, ARM","NVIDIA Ampere, NVIDIA Hopper","gcc, Intel Compilers, Intel OneAPI, NVHPC, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA), CCE (Cray Compilers)",Critical,Somewhat important,Somewhat important,Somewhat important,Very Important,Very Important,Very Important,Somewhat important,Critical,Critical,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,,Maybe,Yes,"Documentation, Slack, GitHub Issues, GitHub Discussions, spack help",Daily,Probably not,Probably not,Excellent,Excellent,Excellent,Excellent,I work at University HPC site and it has been so helpful to install dependencies for other projects. I am currently using spack as a build-system to automate our benchmarks in reframe. I love spack so much I have started using it on my personal laptop. It makes software installs a breeze!! Great work team :),On HPC it can take time to install software and make module files. Spack takes care of the dependencies and even generates the module files. It saves me a lot of time!,I am still novice I would say. I have learnt a lot over the last 6 months and the more I learn the better it gets. I do think the documentation is great and I love how helpful 'spack help' is in the terminal. I really like that most of the time I can figure things out without leaving my terminal.,Sometimes error messages can feel a bit cryptic. Sorry I don't have specific examples. ,"I am hopefully going to push my packages to spack in the coming month. It's super easy to make your own and I have been able to rely on the builtin packages for more general codes. So, no complaints on this front. I guess the more packages we can get as a community, the better.",Keep up the great work. I really love this tool and I recommend it to all my colleagues and friends in HPC. This along with miniconda and docker have had a significant impact on my software development career. ,
2/27/2023 4:01:31,Research Software Engineer (RSE),University research group,Switzerland,No,No,,"C++, Python, Rust","HPC / Simulation, Statistics / Data Analysis, Bioinformatics",Word of mouth,5,"Packages, Slack Discussions","0.17, 0.19, develop","RHEL 7, Ubuntu 20, Ubuntu 22","> 1,000","3.8, 3.9, 3.10","spack load, Spack environments, Environment Modules (TCL modules), Containers","Environments, Module generation, Chaining (upstreams), Build caches (making binary packages), build-env (debug a build), spack ci (GitLab pipeline generation -- yourself, not on our CI), spack-python (Python scripting), spack external find, Externals in packages.yaml, Concretization preferences in packages.yaml, New `require:` directive in packages.yaml, spack ci (generate GitLab Pipelines), Distributed Builds (srun/mpirun spack install), New concretizer (clingo), spack develop, concretization: --fresh (build everything fresh), concretizer:unify:true (concretize together), Variant/flag propagation (++, ~~, ==), Git versions, spack load, spack diff (compare two specs)",Yes -- several,Yes,No,"AMD, Intel, ARM",NVIDIA Hopper,"gcc, Intel OneAPI, NVHPC, LLVM",Very Important,Somewhat important,Very Important,Somewhat important,Slightly Important,Very Important,Very Important,Somewhat important,Critical,Slightly Important,Slightly Important,Somewhat important,Very Important,Somewhat important,Critical,Somewhat important,,"Yes, I'd like to attend",No,"Documentation, Slack, GitHub Issues, GitHub Discussions, spack help, Source Code",Weekly,Probably not,Probably,Good,Excellent,Good,Excellent,"I have two use cases (user and responsible for deploying our software stack):

As a user, I create plenty of Spack environments and use develop to actively work on our software stack. Spack makes working on multiple packages in the same dependency tree a breeze! Having our central deployment as an upstream has saved me a great deal of rebuilding packages, too.

As the person working on our continuous deployment of our neuroscientific software stack, we run a GitLab pipeline that bootstraps specific compilers, then builds a set of libraries that we generate a packages.yaml for, and finally builds an up to date collection of environments to provide a software stack with ~150 modules for end users. This pipeline is run whenever any update to our Spack packages happens, usually a few times per working day. For most of our HPC software, we wrote CI that re-uses these packages via upstreams as appropriate. We have also set up an experimental internal build cache to provide quick Spack container builds for every pipeline of our HPC software.","spack env depfile has greatly accelerated building our software stack! The new concretizer require feature also helped building only certain packages with Intel compilers and reduce the amount of time we build other packages ""accidentally"" with Intel.","Currently, we rebuild central utilities like flex, bison, cmake and other build depencies, then re-use them through generated entries in packages.yaml. When rebuilding the central utilities, the downstream installation may have older builds registered in packages.yaml, leading to some concretization ambiguity. Resolving/hunting down these ambiguities is often cumbersome, I think it would be great to have, e.g., for every dependency a list of the 2 runner-up choices in terms of penalty. Then again, as this is an optimization problem, that may not be feasible.","Faster pipeline generation, full de-coupling of build dependencies.",,Awesome work on Spack!,
2/27/2023 6:30:30,Research Software Engineer (RSE),University research group,Germany,Yes,Yes,,C++,HPC / Simulation,Tutorial,0,"Packages, Issues",develop,"CentOS 7, CentOS 8, Ubuntu 22, Windows Subsystem for Linux (WSL)",100 - 200,3.11,"Spack environments, Lmod, Environment Modules (TCL modules)","Environments, Module generation, Chaining (upstreams), spack external find, Externals in packages.yaml, Concretization preferences in packages.yaml, New concretizer (clingo), concretization: --reuse (default), concretizer:unify:true (concretize together)",No,Yes,No,"AMD, Intel, ARM","NVIDIA Volta, NVIDIA Ampere, AMD MI100, AMD MI200/250X, Intel Xe (Ponte Vecchio)","gcc, Intel OneAPI, NVHPC, LLVM, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA), Fujitsu Compilers",Very Important,Somewhat important,Very Important,Somewhat important,Not Important,Critical,Critical,Somewhat important,Somewhat important,Critical,Somewhat important,Slightly Important,Somewhat important,Slightly Important,Slightly Important,Slightly Important,,Maybe,Yes,"Documentation, Slack, GitHub Issues",Weekly,No,Probably,Good,OK,Good,Excellent,"Building a reproducible development environment for library development. I set up a set of packages, create an environment and install its packages.","As long as I don't use external packages (spack external find), I rarely have to work around build issues","The buildcaches I could find were only aimed at AWS, so I couldn't use them, and build involving external packages tend to fail. Compiling everything from scratch (especially rocFFT) takes ages","spack external find should be able to search for header files as well, and use config headers to determine versions and variants",,"Spack is awesome, thanks for creating and maintaining it!",
2/27/2023 6:43:01,Research Software Engineer (RSE),University research group,United States,Yes,No,,"Fortran, C, C++, Python, sh/bash/other shell script","HPC / Simulation, Computer Science Research",Used at my site,4,"Packages, Documentation, Slack Discussions, GitHub Discussions, Issues",develop,"macOS 11 (Ventura), RHEL 7, RHEL 8, Ubuntu 20, Ubuntu 22, Cray XC, Cray EX","500-1,000","3.7, 3.8, 3.9, 3.10, 3.11","spack load, Spack environments, Lmod, Containers","Environments, Module generation, Chaining (upstreams), Stacks (matrices in environments), Build caches (making binary packages), spack ci (GitLab pipeline generation -- yourself, not on our CI), spack-python (Python scripting), spack external find, Externals in packages.yaml, Concretization preferences in packages.yaml, New `require:` directive in packages.yaml, New concretizer (clingo), concretization: --reuse (default), concretizer:unify:when_possible, Multiple build systems in one package, spack test, spackbot (@spackbot fix style; @spackbot rebuild everything, etc.)",No,No,No,"AMD, Intel, IBM Power, ARM","NVIDIA Volta, NVIDIA Ampere, NVIDIA Hopper, AMD MI100, AMD MI200/250X, AMD MI300, Intel Xe (Ponte Vecchio)","gcc, Intel Compilers, Intel OneAPI, NVHPC, LLVM, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA), IBM XL, CCE (Cray Compilers)",Very Important,Very Important,Very Important,Somewhat important,Somewhat important,Very Important,Very Important,Critical,Critical,Critical,Critical,Very Important,Very Important,Critical,Critical,Very Important,,"Yes, I'd like to attend",No,"Documentation, Slack, Coworkers, GitHub Issues, spack help, Source Code",Weekly,Probably,"Yes, definitely!",Good,Excellent,Good,Excellent,Installation of HPCToolkit and various dependencies,How responsive the devs are when we find Spack-related issues,Spack develop being a moving target,Virtual CUDA (:,gcc +rocm variant,"Y'all are doing a great job, keep up the good work!",
2/27/2023 6:44:59,Computational Scientist,University research group,United States,No,No,,"C, C++, Python","HPC / Simulation, Computer Science Research, Compiler Testing",Used at my site,4,Packages,develop,macOS 11 (Ventura),10 - 100,"3.8, 3.9, 3.11","spack load, Spack environments","Environments, spack containerize, spack external find, Externals in packages.yaml, New concretizer (clingo), spack load",Yes -- just one,No,No,"AMD, Intel, IBM Power, ARM","NVIDIA T4, NVIDIA Other","gcc, Intel Compilers, NVHPC, LLVM, IBM XL",Very Important,Very Important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Very Important,Somewhat important,Very Important,Very Important,Slightly Important,Somewhat important,Somewhat important,Slightly Important,Somewhat important,,Maybe,Yes,"Documentation, Slack, GitHub Issues, GitHub Discussions, Source Code",Monthly,Probably not,Probably not,Good,Excellent,Good,Good,,,,,,,
2/27/2023 6:52:25,User Support Staff,"DOE/Office of Science Lab (e.g., ORNL/ANL/LBL)",United States,Yes,No,,"C++, Python, sh/bash/other shell script",HPC / Simulation,Word of mouth,2,Packages,0.19,"Ubuntu 22, SLES15",10 - 100,"3.9, 3.11",spack load,"Environments, E4S build caches (https://e4s.io), spack external find, Externals in packages.yaml, spack develop, spack test",No,No,No,"AMD, Intel, ARM","NVIDIA Ampere, NVIDIA Other","gcc, nvcc (CUDA)",Very Important,Slightly Important,Somewhat important,Slightly Important,Somewhat important,Not Important,Not Important,Somewhat important,Slightly Important,Somewhat important,Not Important,Not Important,Not Important,Critical,Somewhat important,Not Important,,Maybe,Yes,"Documentation, Slack, Coworkers, GitHub Issues, GitHub Discussions",Monthly,Probably not,Probably,OK,OK,Good,Excellent,I typically use Spack to develop automated tests with spack test. ,Looking at implementations in other packages as examples to follow.,Lack of control over selections in the dependency tree.,"Better documentation for Spack test, including ideal examples. Increased standardization of the way packages build and test. ",No,"Spack is a great project and more than just the software/functionality it provides! It is a nexus for scientific software development and a unifying force. Many of Spack's issues likely come from trying to standardize across a nonstandard spectrum. However, please keep up this difficult work. ",
2/27/2023 7:39:17,DevOps/SRE,Company,United Kingdom,No,No,,"C, C++, Python, Rust, R","HPC / Simulation, AI/ML",Word of mouth,0,"Packages, Core Features","0.19, custom fork","macOS 12 (Monterey), Amazon Linux",1 - 10,3.7,spack load,spack load,,My site has a front-end or extension to Spack,No,"AMD, Intel, ARM","NVIDIA Ampere, NVIDIA Hopper","gcc, Intel OneAPI, NVHPC, LLVM, nvcc (CUDA)",Somewhat important,Slightly Important,Somewhat important,Slightly Important,Slightly Important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Very Important,Critical,Somewhat important,Somewhat important,Somewhat important,Very Important,Somewhat important,,Maybe,No,"Documentation, Slack, Coworkers",Weekly,Probably not,Probably,Good,Excellent,Good,Good,"Install packages and dependencies for execution, and development on multiple architectures","About the project itself, the ease of use, it's very convenient to get compilers and libraries installed to get started with a project. 

In terms of using it/learning: Documentation, GitHub issues and it's community","Supporting users, currently they require to be well versed in spack and HPC to make effective use of the tools. So it ends up in people asking questions directly to the admin rather than having ways of fixing their own problems.",Increase it's usability for non-experts and begginers to HPC. Extend containerisation functionality,,"Thank you for such an amazing project, for the great community around it and all the functionalities that keep being added. ",
2/27/2023 7:50:05,Scientist/Researcher,University research group,Norway,No,No,,"Fortran, C++, Python, Julia",HPC / Simulation,Word of mouth,3,No,0.19,Debian 11,10 - 100,3.9,"Spack environments, Environment Modules (TCL modules)","Environments, Module generation, spack containerize, Stacks (matrices in environments), spack external find, New concretizer (clingo)",Yes -- just one,Yes,No,Intel,NVIDIA Other,"gcc, Intel OneAPI, NVHPC",Slightly Important,Very Important,Somewhat important,Very Important,Not Important,Slightly Important,Slightly Important,Very Important,Critical,Very Important,Very Important,Not Important,Not Important,Not Important,Not Important,Not Important,,Maybe,Yes,"Documentation, Slack, Mailing List, spack help",Weekly,Probably not,Probably,Good,Excellent,Good,Good,,,,,,,
2/27/2023 8:55:54,Computational Scientist,"DOE/Office of Science Lab (e.g., ORNL/ANL/LBL)",United States,Yes,No,,"Fortran, C, C++, Python","HPC / Simulation, AI/ML, Visualization",Word of mouth,5,"Packages, Core Features",develop,"macOS 12 (Monterey), CentOS 7, CentOS 8, Rocky 8, Ubuntu 22, SLES15, Cray XC, Cray EX, Cray XT","> 1,000","3.7, 3.8, 3.9, 3.10","spack load, Spack environments, Lmod, Environment Modules (TCL modules), spack build-env, spack view, Containers","Environments, Module generation, spack containerize, Chaining (upstreams), Stacks (matrices in environments), build-env (debug a build), spack-python (Python scripting), Externals in packages.yaml, Concretization preferences in packages.yaml, New `require:` directive in packages.yaml, Distributed Builds (srun/mpirun spack install), New concretizer (clingo), spack develop, concretization: --reuse (default), concretization: --fresh (build everything fresh), concretizer:unify:true (concretize together), Multiple build systems in one package, spack load",Yes -- just one,No,spack manager,"AMD, Intel, IBM Power, ARM","NVIDIA Volta, NVIDIA Ampere, NVIDIA Hopper, AMD MI200/250X, AMD MI300, Intel Xe (Ponte Vecchio), No GPUs","gcc, Intel Compilers, Intel OneAPI, NVHPC, LLVM, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA), CCE (Cray Compilers)",Somewhat important,Somewhat important,Slightly Important,Slightly Important,Slightly Important,Not Important,Not Important,Not Important,Slightly Important,Slightly Important,Somewhat important,Slightly Important,Very Important,Slightly Important,Slightly Important,Not Important,,"Yes, I'd like to present something!",No,"Documentation, Slack, Coworkers, Source Code",Weekly,Probably not,Probably not,Good,Excellent,Good,Good,I use Spack for both administering several package modules on multiple machines as well as use Spack to develop software stacks.,Develop features have made developing large software stacks and debugging issues in applications at any level way more efficient that possible in the past.,"The clingo concretizer is becoming something where ""with great power comes great responsibility"". ","I guess I will have to start dealing with updating packages for Intel GPUs so hopefully some of that framework already exits. I haven't looked into it yet, but hoping it's similar to the CUDA and HIP model.",,,
2/27/2023 8:59:58,Computational Scientist,"DOE/Office of Science Lab (e.g., ORNL/ANL/LBL)",United States,Yes,No,,"C++, Python",HPC / Simulation,Used at my site,0,"Slack Discussions, Issues",develop,"macOS 12 (Monterey), RHEL 8, CentOS 8, Arch",10 - 100,"3.7, 3.8, 3.9, 3.10, 3.11","spack load, Spack environments, Lmod, Environment Modules (TCL modules)","Environments, Module generation, Build caches (making binary packages), spack external find, Externals in packages.yaml, spack load",Yes -- just one,No,spack manager,"AMD, Intel, ARM, IBM Z / s390","NVIDIA Other, AMD Other, Intel Xe (Ponte Vecchio)","gcc, Intel Compilers, LLVM, AMD ROCmCC (amdclang/hipcc), IBM XL",Very Important,Very Important,Slightly Important,Slightly Important,Slightly Important,Somewhat important,Slightly Important,Slightly Important,Very Important,Very Important,Very Important,Very Important,Very Important,Slightly Important,Slightly Important,Slightly Important,,Maybe,Yes,"Documentation, Coworkers, GitHub Issues, spack help",Daily,Probably not,Probably,OK,Excellent,Good,Good,most interactions are through spack manager,"The community, specially folks working on spack manager too are super helpful. On HPC systems, the preset environments are typically effortless to install and run.","Sometimes the documentation is a bit confusing, there are several ways to do the same thing and it gets in the way more than it helps (when it comes to documentation). I have run into ""advanced"" users who still struggle with custom dev environments. ","Easier documentation, helpful error messages, faster clone times (shallow clones, only required deps). Sometimes when a build fails, the errors aren't transparent, and the only solution seems to be to contact folks working on spack manager/spack to get things running again. ",,Thanks for all the work!,
2/27/2023 9:12:27,Computational Scientist,"DOE/NNSA Lab (e.g., LLNL/LANL/SNL)",United States,No,No,,"C, C++, Python, sh/bash/other shell script","HPC / Simulation, AI/ML, High Energy Physics",Used at my site,5,"Packages, Slack Discussions","0.18, 0.19, develop",Chaos Blueos,10 - 100,3.8,"Spack environments, spack view","Environments, Mirrors (spack mirror create / air gap support), Build caches (making binary packages), spack external find, Cray PE support (spack external read-cray-manifest), Externals in packages.yaml, Concretization preferences in packages.yaml, New `require:` directive in packages.yaml, Distributed Builds (srun/mpirun spack install), New concretizer (clingo), spack develop, concretizer:unify:when_possible",Yes -- several,No,No,"AMD, Intel, IBM Power, ARM","NVIDIA Ampere, AMD MI200/250X, AMD MI300","Intel Compilers, Intel OneAPI, LLVM, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA), IBM XL, CCE (Cray Compilers), armclang",Critical,Very Important,Somewhat important,Very Important,Slightly Important,Not Important,Not Important,Critical,Somewhat important,Critical,Very Important,Not Important,Slightly Important,Slightly Important,Slightly Important,Somewhat important,"More command line integration for scripting spack, e.g. view definitions.",Maybe,Yes,"Documentation, Slack, Coworkers, local teams page",Monthly,No,No,Good,Excellent,Good,Good,We use spack environments for a single set of dependent libraries defined by a single package with a single compiler. THe env contains all of the dependencies for the specific OS. This process is used at three NNSA laboratories.,The ability to script spack through the cli.,Spack external find not finding packages or naming them such that they need editing (intel-mkl),"The compiler definitions with flag handling propagation, dependent libraries from a sub package propagating to the top package, cli view support.",No,Keep up the good work.,
2/27/2023 9:20:33,User Support Staff,University HPC/Computing Center,United States,No,No,,"Python, R","HPC / Simulation, Computer Science Research",Used at my site,0,"Packages, Slack Discussions, Issues","0.17, custom fork",RHEL 7,100 - 200,3.8,"spack load, Spack environments","Environments, Build caches (making binary packages), spack-python (Python scripting), Concretization preferences in packages.yaml, concretization: --reuse (default), concretization: --fresh (build everything fresh), concretizer:unify:true (concretize together), Multiple build systems in one package, spack load, spackbot (@spackbot fix style; @spackbot rebuild everything, etc.), spack diff (compare two specs)",Yes -- just one,Yes,No,"AMD, Intel","p4, a100, v100, maybe h100","gcc, Intel Compilers, LLVM, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA)",Critical,Somewhat important,Somewhat important,Slightly Important,Not Important,Somewhat important,Somewhat important,Somewhat important,Very Important,Somewhat important,Somewhat important,Slightly Important,Slightly Important,Slightly Important,Slightly Important,Slightly Important,,Maybe,Yes,"Documentation, Slack, Coworkers, GitHub Issues, GitHub Discussions",Weekly,Probably,No,OK,Good,Good,Excellent,Packaging new software and creating environments for an academic HPC cluster.,"It's my first year using spack, so definitely the packaging guide.","Mostly completely unhelpful or vague error messages. For example, `spack --show-cores=minimized spec -Il <package_name>` is difficult to parse.","I think the separate package repo is going to be huge. Beyond that, I think more examples for packaging with each build system would be helpful.",N/A,N/A,
2/27/2023 9:50:45,Computational Scientist,"DOE/NNSA Lab (e.g., LLNL/LANL/SNL)",United States,Yes,No,,"Fortran, C, C++, Python",HPC / Simulation,Word of mouth,0,No,,whatever the LLNL computing server platforms are,1 - 10,3.5,i'm not sure.  i always have to look up specific instructions from teammates to build anything.,i have no idea.  i just follow instructions from teammates to build spack.  it's not really intuitive to me yet.,No,No,No,"AMD, Intel",whatever sierra and el capitan use,"gcc, Intel Compilers, AMD ROCmCC (amdclang/hipcc), IBM XL",Somewhat important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,,No,Yes,Coworkers,Yearly,Probably,Probably not,OK,OK,OK,OK,Sometimes my teammates will set up a bunch of things via Spack and I will follow their specific instructions command-by-command to build what I need via Spack.  I'm not really sure what's going on in each step.,,"It doesn't seem as intuitive as I'd like, but maybe I just haven't used it enough.  Not really sure how to fix or improve that.  ",,,,
2/27/2023 9:57:23,Software Developer,Other Public Research Lab,United States,No,No,,"Fortran, C, C++, Python, sh/bash/other shell script",HPC / Simulation,Used at my site,0,"Packages, Core Features, Slack Discussions, Issues","0.19, develop, custom fork","RHEL 7, RHEL 8, CentOS 7, CentOS 8, Ubuntu 22",10 - 100,"3.6, 3.7, 3.8, 3.9, 3.10",Lmod,"Environments, Stacks (matrices in environments), Mirrors (spack mirror create / air gap support), Build caches (making binary packages), build-env (debug a build), spack external find, Externals in packages.yaml, concretizer:unify:true (concretize together), concretizer:unify:when_possible, spack load",Yes -- just one,Yes,No,"AMD, Intel",No GPUs,"gcc, Intel Compilers, Intel OneAPI",Very Important,Somewhat important,Not Important,Slightly Important,Not Important,Not Important,Not Important,Not Important,Slightly Important,Very Important,Not Important,Not Important,Not Important,Not Important,Critical,Not Important,More/more detailed documentation,Maybe,Yes,"Documentation, Slack, Coworkers, GitHub Issues, spack help, Source Code",Monthly,Probably not,Probably not,OK,Excellent,Good,Excellent,I use Spack to support National Weather Service operational weather models (it will soon be used to install all of the libraries/support software).,The Slack channel,"A lot of our pain points have been addressed as more features (like improved container configurability) have been added to Spack. One of the remaining pain points has been the occasional package that can, say, only compile with gcc but not intel. What about a requirement that each package has to at least be compilable with, let's say, GCC, Intel, and Intel OneAPI? I'm biased based on which ones we use, of course.","I've been running into issues with Cray PE, compiler wrappers, etc., because different versions are subtly different, and different packages handle those differences, er, differently. If there were some way Spack could magically pick up on those details and pass them on to packages in a way that those packages could then handle in a uniform-ish way, that'd be awesome (i.e., automatically knowing when to use cc/ftn vs. mpicc/mpifort, etc.). I don't think this has been a huge stumbling block, just a bit of a time sink.

Also, if the external package finder could pick up on packages available through environment modules, that would be pretty amazing. I'm always forgetting to run 'module load openmpi' before 'spack external find --all'...",,,
2/27/2023 10:07:19,Research Software Engineer (RSE),Company,United States,No,No,,"C, Python, Go, Perl","Statistics / Data Analysis, Bioinformatics, Web applications, Visualization",Word of mouth,5,"Packages, Documentation, Slack Discussions, GitHub Discussions, Issues, Mailing List","develop, custom fork",CentOS 7,10 - 100,"3.8, 3.9, 3.10","Spack environments, Lmod, Containers, Custom script or env vars","Environments, Module generation, spack containerize, Mirrors (spack mirror create / air gap support), Build caches (making binary packages), Public build caches at https://binaries.spack.io, build-env (debug a build), Concretization preferences in packages.yaml, concretization: --fresh (build everything fresh), concretizer:unify:true (concretize together), Git versions, spack load",Yes -- just one,No,,"AMD, Intel",No GPUs,"gcc, LLVM",Somewhat important,Very Important,Somewhat important,Somewhat important,Slightly Important,Not Important,Not Important,Slightly Important,Somewhat important,Not Important,Not Important,Not Important,Slightly Important,Slightly Important,Slightly Important,Not Important,,Maybe,Yes,"Documentation, Slack, Mailing List, GitHub Issues, Source Code",Weekly,Probably not,Probably not,Good,Excellent,Good,Good,We use spack to provide reproducible builds of software used to support computational biology/bioinformatics,The fact that it exists and can build the things we need.  Favorite recent feature is probably `containerize`.,"Our company won't (currently) allow us to push our work upstream, leaving us to manually manage either a fork or a packages repo.","I'm a bit out of date, there's nothing that comes to mind.",,Thank for you for the great community and the immensely useful software!,
2/27/2023 10:26:52,User Support Staff,University HPC/Computing Center,Italy,No,Yes,,Python,Visualization,Presentation,5,"Packages, Slack Discussions, Mailing List","0.18, 0.19, develop, custom fork","RHEL 7, RHEL 8, CentOS 7, CentOS 8, Ubuntu 20",200 - 500,3.6,Environment Modules (TCL modules),"Environments, Module generation, Chaining (upstreams), Mirrors (spack mirror create / air gap support), build-env (debug a build), spack-python (Python scripting), spack external find, Externals in packages.yaml, Concretization preferences in packages.yaml, New concretizer (clingo), concretizer:unify:true (concretize together), Multiple build systems in one package, spack diff (compare two specs)",Yes -- several,Yes,Custom scripts to drive cluster deployment,"AMD, Intel","NVIDIA Volta, NVIDIA Ampere, No GPUs","gcc, Intel OneAPI, NVHPC, nvcc (CUDA)",Slightly Important,Very Important,Critical,Somewhat important,Slightly Important,Not Important,Somewhat important,Somewhat important,Slightly Important,Very Important,Very Important,Not Important,Somewhat important,Critical,Very Important,Very Important,,No,Yes,"Documentation, Coworkers, GitHub Issues, GitHub Discussions, spack help, Source Code",Monthly,Probably not,Probably,Excellent,Excellent,OK,Excellent,"Installing base sw for user support, initial deploy on new clusters, deploy of specific environments such as visualization ones",deploy visualization X11 / virtualgl / Paraview,Big packages like Qt / Paraview / petsc / openmpi not properly building / running,separation of build dependency and post install testing,,Would be nice to have core spack available as package and reduce the vendored dependencies,
2/27/2023 10:37:20,Research Software Engineer (RSE),Company,United States,No,No,,Python,Bioinformatics,Word of mouth,5,"Packages, Documentation, GitHub Discussions, Issues","0.17, 0.18, 0.19",CentOS 7,100 - 200,2.7,"Lmod, Containers","Module generation, spack containerize, Concretization preferences in packages.yaml",Yes -- several,No,No,"AMD, Intel",No GPUs,gcc,Somewhat important,Very Important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Very Important,Somewhat important,Very Important,Somewhat important,Slightly Important,Somewhat important,Very Important,Somewhat important,Somewhat important,Somewhat important,,No,Yes,"Documentation, Coworkers, GitHub Issues, Source Code",Monthly,Probably not,Probably not,OK,Excellent,Good,Good,"Reproducibly building a self-contained environment, that can then be used on a local instance (for dev work) and containerized (for prod work, in the cloud).",Reproducible builds on old distros of linux.,"I'd like spack to stop making and relying on $HOME/.spack -- I think one spack ""installation"" should be stand-alone and isolated from other installations, and having this dir creates ""user-global"" interference between projects. ","Similar to `spack containerize`, it would be neat if spack supported building an environment within a portable filesystem, like an ISO file, or squashfs.  The idea is that that file could then be moved around and RO-mounted on different systems.",,"Thank you, spack is inspiring!",
2/27/2023 10:44:08,User Support Staff,University HPC/Computing Center,United States,No,No,,"Julia, R, sh/bash/other shell script","HPC / Simulation, Statistics / Data Analysis",Used at my site,3,Packages,"0.18, 0.19, develop","CentOS 7, Rocky 8","500-1,000",3.6,"Spack environments, Lmod","Environments, Module generation, Externals in packages.yaml, Concretization preferences in packages.yaml, New concretizer (clingo), concretization: --reuse (default), concretizer:unify:true (concretize together), Variant/flag propagation (++, ~~, ==)",Yes -- just one,No,No,"AMD, Intel","NVIDIA Volta, NVIDIA Ampere, NVIDIA Other","gcc, Intel OneAPI, LLVM",Slightly Important,Slightly Important,Slightly Important,Slightly Important,Slightly Important,Slightly Important,Slightly Important,Slightly Important,Somewhat important,Slightly Important,Somewhat important,Slightly Important,Slightly Important,Slightly Important,Slightly Important,Slightly Important,,Maybe,Yes,"Documentation, Coworkers, GitHub Issues, GitHub Discussions, Source Code",Monthly,Probably not,Probably not,Good,Good,Good,Good,"We use Spack to build and maintain shared software stacks for our university HPC clusters, primarily using GCC and sometimes Intel compilers. We use Lmod to load compilers and packages. We use a LAPACK + MPI hierarchy with Lmod, though we really only need an MPI hierarchy. We do not use Spack environments for the software stacks, but we recommend them for users who use Spack for their own builds. Typically once a year we do an initial build out of packages with the latest stable release of Spack and keep this version frozen, modifying or adding build recipes over time as needed. This is completed with a newer version of a compiler compared to the previous build out, but not necessarily the latest version available. After this initial build out, we add more packages to the software stacks as needed or as requested by our users. For some applications we create shared Conda environments instead of using Spack, because a Spack build recipe does not exist or it's not worth building from source.",The Clingo concretizer and reuse option.,Getting updated build recipes without updating Spack itself.,,,,
2/27/2023 10:50:53,Software Developer,Private Research Lab,France,No,No,,"C, C++",HPC / Simulation,Used at my site,2,No,0.17,"CentOS 7, Rocky 8",10 - 100,"3.7, 3.8",Lmod,"Environments, Module generation",No,No,No,"Intel, ARM, RISC-V","NVIDIA T4, NVIDIA Volta, NVIDIA Ampere","gcc, Intel OneAPI, LLVM, nvcc (CUDA), armclang",Somewhat important,Very Important,Slightly Important,Very Important,Not Important,Very Important,Very Important,Slightly Important,Critical,Somewhat important,Somewhat important,Slightly Important,Not Important,Not Important,Not Important,Somewhat important,,No,No,"Documentation, Coworkers, GitHub Issues",Monthly,Probably not,Probably,OK,Excellent,Good,Good,,,,,,,
2/27/2023 11:03:19,Computational Scientist,Cloud Provider,United States,No,No,,"Fortran, C, C++, Python, sh/bash/other shell script",HPC / Simulation,Tutorial,3,"Core Features, Slack Discussions, Issues, Tools/integrations","0.19, develop","CentOS 7, Rocky 8, Ubuntu 20","500-1,000","3.7, 3.8, 3.9, 3.10","spack load, Spack environments","Environments, Module generation, Stacks (matrices in environments), Mirrors (spack mirror create / air gap support), Build caches (making binary packages), spack-python (Python scripting), spack external find, Externals in packages.yaml, Concretization preferences in packages.yaml, New concretizer (clingo), concretization: --reuse (default), concretizer:unify:true (concretize together), concretizer:unify:when_possible, Git versions, spack load",Yes -- just one,No,No,"AMD, Intel","NVIDIA T4, NVIDIA Volta, NVIDIA Ampere, NVIDIA Hopper","gcc, Intel Compilers, NVHPC, LLVM, AMD ROCmCC (amdclang/hipcc)",Somewhat important,Critical,Critical,Somewhat important,Slightly Important,Slightly Important,Slightly Important,Very Important,Somewhat important,Very Important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Slightly Important,Somewhat important,"License support (i.e. support tracking package licenses, and filtering based on license types)","Yes, I'd like to attend",Yes,"Documentation, Slack, Source Code",Weekly,Probably not,Probably,Excellent,Excellent,Good,Excellent,"I perform performance focused benchmarks of applications, and use Spack to help improve our reproducibility.","Sharing environments, build caches, and providing reproducible software environments.",Tying in external packages easily (but not all external packages).,Add proper compiler dependencies,"No, I'm fine adding packages I need into an internal repo for the time being.",You are all awesome. Thanks for your contributions!,
2/27/2023 11:15:05,User Support Staff,University HPC/Computing Center,United States,No,No,,"Fortran, C, C++, Python, MATLAB",HPC / Simulation,Too long time ago to remember,5,Packages,0.19,"CentOS 7, Rocky 8","500-1,000",3.6,Lmod,"Environments, Module generation, spack containerize, Chaining (upstreams), Externals in packages.yaml, New concretizer (clingo), Variant/flag propagation (++, ~~, ==)",Yes -- several,Yes,No,"AMD, Intel","NVIDIA T4, NVIDIA Volta, NVIDIA Ampere, NVIDIA Hopper, NVIDIA Other, AMD MI100, AMD MI200/250X, Intel Xe (Ponte Vecchio)","gcc, Intel OneAPI, NVHPC, LLVM, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA)",Very Important,Very Important,Very Important,Somewhat important,Slightly Important,Slightly Important,Slightly Important,Somewhat important,Somewhat important,Very Important,Very Important,Slightly Important,Slightly Important,Slightly Important,Slightly Important,Slightly Important,"Better Lmod hierarchical modules integration, we still have a few customizations to Spack code to achieve that.",No,Yes,"Documentation, Mailing List, GitHub Issues, spack help, Source Code",Monthly,Probably not,"Yes, definitely!",Excellent,Excellent,Good,Excellent,"Installing end user packages. spack list, spack info, spack spec -I, spack install, spack module lmod refresh. If that works, great, if not, spack -d install, dig into the build directory and try to fix the error(s). I should look more into the build caches to reduce the amount of dependency builds, and into the build matrices, as we are just starting to build optimized binaries for multiple microarchitectures.",Saving time from doing manual builds.,"Common build crashes due to outdated package files, which prevent us from automating the Spack builds. I understand there are efforts in CI package testing, though I figure that with the complexities in the variants, build options and dependencies, there won't be a guarantee to correct all the issues.","Probably the stability of the package files, though, as I mentioned above, that is a tough thing.","Not really, there are packages that are not in Spack that we have been installing manually but they are manageable, and likely quite rare to justify spending effort to include them in Spack.","Keep up the great work, hopefully we'll see improved package specs stability in the future.",
2/27/2023 13:27:57,User Support Staff,University HPC/Computing Center,United States,No,No,,"Python, sh/bash/other shell script","HPC / Simulation, Statistics / Data Analysis, AI/ML, Computer Science Research, Bioinformatics",Word of mouth,3,"Core Features, Slack Discussions, Issues",0.19,RHEL 7,10 - 100,3.8,Environment Modules (TCL modules),"Environments, Module generation, Stacks (matrices in environments), spack external find, Externals in packages.yaml, Concretization preferences in packages.yaml, New concretizer (clingo), concretization: --reuse (default)",No,No,,"AMD, Intel","NVIDIA Volta, NVIDIA Ampere","gcc, Intel Compilers, Intel OneAPI, NVHPC, nvcc (CUDA)",Very Important,Very Important,Very Important,Somewhat important,Not Important,Not Important,Not Important,Critical,Very Important,Critical,Very Important,Not Important,Not Important,Slightly Important,Slightly Important,Slightly Important,,"Yes, I'd like to attend",Yes,"Documentation, Slack, GitHub Issues, spack help",Monthly,Probably not,Probably not,Excellent,Good,Excellent,Good,,,,,,,
2/27/2023 16:57:32,Data Scientist,"DOE/Office of Science Lab (e.g., ORNL/ANL/LBL)",United States,No,No,,"C, C++, Python, Julia, Rust, Zig","Statistics / Data Analysis, Bioinformatics",Word of mouth,0,"No, Slack Discussions",,"macOS 12 (Monterey), RHEL 6, Rocky 8, Amazon Linux","> 1,000","3.6, 3.11","spack load, Spack environments, Lmod, spack build-env, Containers","Environments, Module generation, spack containerize, build-env (debug a build), Distributed Builds (srun/mpirun spack install), New concretizer (clingo), spack load",Yes -- several,No,No,AMD,No GPUs,"gcc, Intel Compilers, Intel OneAPI, LLVM",Very Important,Somewhat important,Slightly Important,Slightly Important,Slightly Important,Somewhat important,Somewhat important,Very Important,Critical,Somewhat important,Somewhat important,Slightly Important,Slightly Important,Slightly Important,Slightly Important,Slightly Important,,Maybe,Yes,"Documentation, Slack, Mailing List, GitHub Issues, spack help, Source Code",Daily,Probably not,Probably not,Good,Excellent,Good,Good,Installing software stack for group of analysts on a new cluster every year or so and supporting the same stack in the cloud. ,"Most builds work, the list of packages is very large, and it is usually very easy to create a new package. ","Any time something goes wrong, it can be really painful to fix.  I have reinstalled at least three times in my latest effort to get my most recent installation working the way I want it to.","Documentation improvements.  More troubleshooting examples in the docs (or somewhere) would be welcome, as would streamlining the narrative so that essential features and use cases are covered fully without intermixing of more advanced features.  For example, when  I first started using spack by following the 'getting started', I was baffled that after a successful build and install , the new package was 'not found'. I see others asking the same sort of questions on slack still. ",,,
2/27/2023 18:43:19,DevOps/SRE,"DOE/Office of Science Lab (e.g., ORNL/ANL/LBL)",United States,Yes,No,,"C, C++, Python, Perl, sh/bash/other shell script","HPC / Simulation, AI/ML, Computer Science Research",Used at my site,3,Packages,develop,"macOS 12 (Monterey), RHEL 7, RHEL 8, CentOS 7",100 - 200,"3.6, 3.7, 3.9, 3.10","Environment Modules (TCL modules), Containers","Environments, Module generation, spack containerize, Chaining (upstreams), Stacks (matrices in environments), Mirrors (spack mirror create / air gap support), Build caches (making binary packages), Public build caches at https://binaries.spack.io, E4S build caches (https://e4s.io), spack ci (GitLab pipeline generation -- yourself, not on our CI), spack-python (Python scripting), spack external find, Externals in packages.yaml, Concretization preferences in packages.yaml, New `require:` directive in packages.yaml, New concretizer (clingo), spack develop, concretization: --reuse (default), concretization: --fresh (build everything fresh), concretizer:unify:true (concretize together), concretizer:unify:when_possible, Variant/flag propagation (++, ~~, ==), Git versions, spack test, spack load, spackbot (@spackbot fix style; @spackbot rebuild everything, etc.)",No,No,No,"AMD, Intel, IBM Power, ARM","NVIDIA Volta, NVIDIA Ampere, NVIDIA Hopper, AMD MI200/250X, AMD MI300","gcc, Intel Compilers, Intel OneAPI, NVHPC, LLVM, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA), CCE (Cray Compilers)",Very Important,Critical,Not Important,Somewhat important,Not Important,Slightly Important,Very Important,Very Important,Very Important,Critical,Somewhat important,Critical,Somewhat important,Somewhat important,Somewhat important,Very Important,SpackPT - A ChatGPT trained on Slack threads based on Maintainer responses to help with basic questions :),"Yes, I'd like to attend",Yes,"Documentation, Slack, Coworkers, GitHub Issues, GitHub Discussions, Source Code",Weekly,Probably,"Yes, definitely!",Good,Excellent,Good,Excellent,"Installing shared tcl modules for CMake based development on HPC systems based on spack environments. This aids development of our package, and deployment/re-deployment, as well as reproducibility.","I don't know what I would do without Spack? Managing complex codebases with varieties of dependencies seems impossible without this tool, or would involve far too many custom shell scripts.","Concretization and env initialization can take a while. Since we also use custom spack/spack develop as a submodule, CI pipelines can take a while to clone. I think this is a me issue, not a Spack issue.","Compiler support! I hate how compilers are mismanaged and poorly defined by systems, and it would be awesome to regain control, and have easy ways to work around this and install myself.",Compilers ;),I love spack. I can't talk enough about spack. It's the best!,
2/28/2023 1:39:54,Computational Scientist,University HPC/Computing Center,Switzerland,No,No,,C++,HPC / Simulation,Word of mouth,3,"Slack Discussions, GitHub Discussions, Issues",develop,"RHEL 8, Ubuntu 22, Cray XC, Cray EX, Cray XT",100 - 200,3.1,"Spack environments, spack build-env, Custom script or env vars","Environments, Stacks (matrices in environments), build-env (debug a build), Externals in packages.yaml, Concretization preferences in packages.yaml, New `require:` directive in packages.yaml, concretization: --reuse (default), concretization: --fresh (build everything fresh), concretizer:unify:true (concretize together), Git versions, spack load",Yes -- several,Yes,No,"AMD, Intel, RISC-V","NVIDIA Volta, NVIDIA Ampere, AMD MI100, AMD MI200/250X","gcc, NVHPC, LLVM, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA)",Critical,Very Important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Very Important,Very Important,Somewhat important,Critical,Slightly Important,Slightly Important,Slightly Important,less rebuilding of the same packages over and over again cos hashes are not same,Maybe,Yes,"Slack, Coworkers, GitHub Issues, Source Code",Weekly,Probably not,Probably not,Good,Good,Good,Good,"I develop many packages that depend on each other, it's really hard to benchmark N repos on M branches using spack to coordinate builds. Scripts get complex and spack could be improved to make it better - better build-env and dev setups",dependency management is much easier now than it used to be,developing stuff as mentioned above,fix spack blame packages so that it actually shows you what is wrong instead of just dumping a list of everything without any real context of what the conflict is,"not really, its easy to add them by hand","great job overall. spack makes my life much easier - until it doesn't, then I want to throw myself under a bus trying to work out why it isn't right.",
2/28/2023 12:40:11,Scientist/Researcher,"DOE/Office of Science Lab (e.g., ORNL/ANL/LBL)",United States,Yes,No,,"C, C++, Python, Julia, Rust","HPC / Simulation, AI/ML, Computer Science Research",Presentation,4,"Packages, Core Features, Slack Discussions, Issues",develop,"macOS 12 (Monterey), RHEL 8, CentOS 8, Rocky 8, AlmaLinux 8, Ubuntu 18, Ubuntu 20, Ubuntu 22, Fedora, Windows Subsystem for Linux (WSL), Cray EX","500-1,000","3.8, 3.9, 3.10, 3.11","spack load, Spack environments","Environments, spack containerize, Chaining (upstreams), Public build caches at https://binaries.spack.io, E4S build caches (https://e4s.io), build-env (debug a build), spack external find, Cray PE support (spack external read-cray-manifest), Externals in packages.yaml, Concretization preferences in packages.yaml, Distributed Builds (srun/mpirun spack install), spack develop, concretization: --reuse (default), concretization: --fresh (build everything fresh), Multiple build systems in one package, Variant/flag propagation (++, ~~, ==), New scalable binding link model (config:shared_linking:bind:true), Git versions, spack test, spack load, spackbot (@spackbot fix style; @spackbot rebuild everything, etc.)",Yes -- just one,No,No,"AMD, Intel, IBM Power, ARM","NVIDIA Ampere, AMD MI100, AMD MI200/250X, Intel Xe (Ponte Vecchio)","gcc, Intel OneAPI, NVHPC, LLVM, nvcc (CUDA), CCE (Cray Compilers)",Somewhat important,Very Important,Somewhat important,Very Important,Not Important,Critical,Somewhat important,Critical,Very Important,Very Important,Very Important,Very Important,Critical,Somewhat important,Critical,Critical,"debuginfod for public binaries, splitdebuginfo, package download counts, isolated hermetic builds, better ccache support, network fabric and GPU auto detection, cross compilation+compilers and libc as dependencies ",Maybe,Yes,"Documentation, Slack, Coworkers, GitHub Issues, Source Code",Weekly,Probably not,Probably not,Excellent,Excellent,Good,Excellent,"I use spack to develop, maintain, and share reproducibly a large collection dependent software packages",Cascading variants and git versions,On Polaris spack environment activate takes 100s of seconds. ,"user experience: Improve the story around LLVM (and related packages like the doe, hip, and Julia variants). Building these takes forever which in turn makes using Julia and Rust with spack painful, and the build cache doesn’t help you if your not on Amazon or Ubuntu LTS

Developer experience: tie between build isolation or debug sources

Principle Investigators: package download counts",Binary rust and Julia packages,"Don’t feel like you have to email me, but I’m happy to elaborate. ",
2/28/2023 13:13:51,All of the above,Private Research Lab,United States,No,No,,"Fortran, C, C++, Python, Julia, sh/bash/other shell script, MATLAB, Lua","HPC / Simulation, Statistics / Data Analysis",Word of mouth,1,"GitHub Discussions, Issues, Mailing List",0.18,RHEL 8,200 - 500,3.6,Lmod,"Environments, Module generation",No,No,No,Intel,NVIDIA Ampere,"gcc, Intel Compilers, Intel OneAPI, NVHPC, LLVM, nvcc (CUDA)",Very Important,Very Important,Somewhat important,Slightly Important,Not Important,Somewhat important,Very Important,Critical,Somewhat important,Somewhat important,Somewhat important,Not Important,Somewhat important,Not Important,Not Important,Not Important,Clearer update paths which would not break the whole system,Maybe,Yes,"Documentation, Mailing List, GitHub Issues, Spack telecon",Weekly,Probably,Probably,OK,Excellent,Good,OK,"Install software on an HPC system, with lmod -- pretty vanilla","Install software on an HPC system, with lmod avoiding dependency hell",Understanding what it is doing and letting it understand what I want,"Be more clear about what would it do during an install, and why. And provide intuitive ways to tell it to do something else",,,
2/28/2023 19:04:33,Computational Scientist,University research group,Germany,No,No,,"C, C++, Python",HPC / Simulation,Used at my site,3,"Slack Discussions, Issues",0.19,"CentOS 7, Fedora",10 - 100,"2.7, 3.10",spack load,"Concretization preferences in packages.yaml, New concretizer (clingo), concretization: --reuse (default), Variant/flag propagation (++, ~~, ==), Git versions, spack load",Yes -- just one,No,No,"AMD, Intel","NVIDIA Ampere, NVIDIA Other","gcc, Intel Compilers, Intel OneAPI, NVHPC, LLVM, nvcc (CUDA)",Very Important,Very Important,Somewhat important,Somewhat important,Not Important,Slightly Important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Critical,Not Important,Slightly Important,Not Important,Slightly Important,Critical,,No,No,"Documentation, Slack",Yearly,No,"Yes, definitely!",Good,Excellent,Good,Excellent,Maintaining a small research and student cluster for my research group.,The reuse feature allowing to gradually update a single installation without introducing new installations of existing packages.,Failing package builds and unhelpful error messages.,,,,
3/1/2023 0:18:20,Computational Scientist,University HPC/Computing Center,Switzerland,No,No,,"Python, sh/bash/other shell script",HPC / Simulation,Used at my site,2,Packages,"0.19, develop","Ubuntu 20, Ubuntu 22, Cray XC, Cray EX",100 - 200,"3.6, 3.7, 3.8, 3.9, 3.10","Spack environments, Environment Modules (TCL modules), Containers","Environments, Module generation, Stacks (matrices in environments), Build caches (making binary packages), spack-python (Python scripting), Externals in packages.yaml, concretizer:unify:true (concretize together), spack load",Yes -- just one,No,No,"AMD, Intel, ARM","NVIDIA Volta, NVIDIA Ampere","gcc, NVHPC, LLVM, nvcc (CUDA), CCE (Cray Compilers)",Somewhat important,Somewhat important,Somewhat important,Somewhat important,Very Important,Very Important,Somewhat important,Somewhat important,Very Important,Very Important,Very Important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,,Maybe,Yes,"Documentation, Slack, GitHub Issues, GitHub Discussions, Source Code",Weekly,Probably not,Probably not,Good,Excellent,Good,Excellent,,,,,,,
3/1/2023 3:32:01,User Support Staff,University HPC/Computing Center,Germany,No,No,,"C, C++","HPC / Simulation, Visualization",Search,0,No,0.19,RHEL 8,10 - 100,3.6,"spack load, Lmod","Module generation, spack load",No,No,No,"AMD, Intel","NVIDIA Volta, NVIDIA Ampere","gcc, Intel Compilers, LLVM, nvcc (CUDA)",Slightly Important,Somewhat important,Very Important,Very Important,Not Important,Slightly Important,Somewhat important,Somewhat important,Slightly Important,Slightly Important,Somewhat important,Not Important,Slightly Important,Slightly Important,Somewhat important,Not Important,,No,No,"Documentation, Google",Weekly,Probably not,Probably not,OK,Good,OK,OK,Per user HPC software installation,Can build packages without hardcoded toolchain (in contrast to EasyBuild),"When Python packages with large dependency lists, conflicting versions of other Python packages will be build, which causes runtime errors.","Have a *runtime* test case for common high-level Python packages, e.g. SciPy.",,,
3/1/2023 7:08:42,DevOps/SRE,University HPC/Computing Center,Switzerland,No,Yes,,"Python, sh/bash/other shell script","HPC / Simulation, High Energy Physics",Tutorial,4,Packages,develop,RHEL 7,"> 1,000",2.7,"spack load, Environment Modules (TCL modules)","Environments, Module generation, Chaining (upstreams), spack ci (GitLab pipeline generation -- yourself, not on our CI), spack external find, Externals in packages.yaml, New concretizer (clingo), spack develop, spack load",Yes -- several,No,No,"AMD, Intel, ARM","NVIDIA Ampere, NVIDIA Hopper","gcc, Intel OneAPI, NVHPC, nvcc (CUDA), CCE (Cray Compilers)",Somewhat important,Very Important,Very Important,Slightly Important,Not Important,Not Important,Not Important,Not Important,Not Important,Very Important,Very Important,Somewhat important,Somewhat important,Very Important,Very Important,Somewhat important,,"Yes, I'd like to attend",Yes,"Documentation, Slack, GitHub Issues, Source Code",Daily,"Yes, definitely!","Yes, definitely!",Good,Good,Good,Good,,,,,,,
3/1/2023 7:51:10,Research Software Engineer (RSE),Other Public Research Lab,France,No,Yes,,"C, C++","HPC / Simulation, Computer Science Research",Used at my site,3,No,0.18,Ubuntu 22,10 - 100,3.6,"spack load, Spack environments","Environments, E4S build caches (https://e4s.io), Multiple build systems in one package, spack load",Yes -- just one,,No,"AMD, ARM","NVIDIA Ampere, NVIDIA Hopper, AMD MI300","LLVM, nvcc (CUDA)",Very Important,Very Important,Somewhat important,Very Important,Very Important,Somewhat important,Slightly Important,Very Important,Very Important,Somewhat important,Very Important,Slightly Important,Slightly Important,Slightly Important,Slightly Important,Slightly Important,,No,No,"Documentation, Mailing List, Coworkers, GitHub Discussions",Monthly,No,Probably not,Good,Good,OK,Excellent,,,,,,,
3/1/2023 8:26:12,Research Software Engineer (RSE),Private Research Lab,France,No,No,,"C++, Python, Rust, sh/bash/other shell script",HPC / Simulation,Presentation,4,"Packages, Core Features, Documentation, Slack Discussions, Issues","0.18, 0.19","RHEL 7, RHEL 8, CentOS 7, AlmaLinux 8, Ubuntu 22","> 1,000","3.6, 3.7, 3.8, 3.9, 3.10","spack load, Spack environments, Environment Modules (TCL modules), Custom script or env vars","Environments, Module generation, Chaining (upstreams), Stacks (matrices in environments), Mirrors (spack mirror create / air gap support), build-env (debug a build), spack-python (Python scripting), spack external find, Externals in packages.yaml, Concretization preferences in packages.yaml, New `require:` directive in packages.yaml, Distributed Builds (srun/mpirun spack install), New concretizer (clingo), spack develop, concretization: --reuse (default), concretization: --fresh (build everything fresh), concretizer:unify:true (concretize together), Variant/flag propagation (++, ~~, ==), Git versions, spack test, spack load, spack diff (compare two specs), depfile",Yes -- several,Yes,in-house,"AMD, Intel, ARM","NVIDIA Ampere, NVIDIA Hopper, AMD MI200/250X, AMD MI300","gcc, Intel Compilers, Intel OneAPI, NVHPC, LLVM, nvcc (CUDA)",Critical,Somewhat important,Somewhat important,Slightly Important,Not Important,Not Important,Not Important,Slightly Important,Very Important,Somewhat important,Somewhat important,Slightly Important,Critical,Slightly Important,Slightly Important,Somewhat important,,Maybe,Yes,"Documentation, Coworkers, GitHub Issues, GitHub Discussions, spack help, Source Code",Weekly,Probably not,Probably,Excellent,Excellent,OK,Good,"HPC (user) software stacks deployment, Gitlab CI/CD+Spack. Day-to-day HPC sofware dev.","Software stack coherency and so robustness, and deployment automation, with up-to-date softwares.","Complaints from colleagues about how developing with spack is hard is my biggest pain point. External packages, for infra and security reasons (lustre, mpi, openssl etc), can cause a lot of constraints and build failures. Non-isolation of builds: having stuff in /usr has a lot of side effects for a lot of packages. Slow (concretize, but also repo cache/index building, on slow FS).","Better integration of package development in IDEs (vscode, clion, pycharm...) ? Maybe bring back something like `spack setup`, and for python too.",,,
3/1/2023 11:02:01,Grad student who manages 10 node cluster on the side,University research group,United States,Yes,No,,"C++, Python",HPC / Simulation,Word of mouth,1,No,0.17,CentOS 7,10 - 100,3.9,Environment Modules (TCL modules),"Environments, Module generation",No,No,No,Intel,No GPUs,gcc,Slightly Important,Slightly Important,Slightly Important,Slightly Important,Not Important,Not Important,Not Important,Very Important,Critical,Not Important,Very Important,Not Important,Not Important,Not Important,Not Important,Not Important,,Maybe,No,Documentation,Monthly,Probably not,No,Excellent,Excellent,Excellent,Excellent,"Install software on small cluster with 10 nodes, running 10 year old hardware",Saves an enormous amount of time pulling all the right build dependencies,Troublesome to have it use my system's MPI libraries combined libPMI that slurm uses,"I had a lot of trouble getting spack to use the right MPI. I have tried a few times following the documentation without success, so maybe this is worth re-examining. I'm unsure why it won't work on my system--perhaps due to age.",,,
3/1/2023 11:04:46,Scientist/Researcher,"DOE/Office of Science Lab (e.g., ORNL/ANL/LBL)",United States,Yes,No,,"C++, Python","HPC / Simulation, Computer Science Research",Tutorial,2,Issues,"0.19, develop","macOS 11 (Ventura), Ubuntu 22, SLES15, Fedora, Cray EX, CentOS 9, Raspbian",200 - 500,"3.10, 3.11","spack load, Spack environments, Containers","Environments, Module generation, spack containerize, Chaining (upstreams), Stacks (matrices in environments), build-env (debug a build), Externals in packages.yaml, Concretization preferences in packages.yaml, New `require:` directive in packages.yaml, New concretizer (clingo), spack develop, concretization: --reuse (default), concretizer:unify:true (concretize together), Git versions, spack load",Yes -- just one,No,No,"AMD, Intel, IBM Power, ARM","NVIDIA Volta, NVIDIA Ampere, NVIDIA Hopper, AMD MI200/250X, AMD MI300, Intel Xe (Ponte Vecchio)","gcc, Intel OneAPI, NVHPC, LLVM, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA), IBM XL, CCE (Cray Compilers), armclang",Somewhat important,Very Important,Somewhat important,Somewhat important,Not Important,Not Important,Not Important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Slightly Important,Somewhat important,Slightly Important,Slightly Important,Not Important,"Better control over unified concretization, more capability for textual substitution in YAML files, ability to avoid redundancies/more generality in external package specifications",No,Yes,"Documentation, GitHub Issues, GitHub Discussions, Source Code",Weekly,Probably,Probably not,OK,OK,OK,OK,"Develop a spack environment with some packages to be used together, concretize them, debug why Spack's concretizer ignored what I thought I specified, build and install them.",Detection and building of dependencies,Spent far more time trying to get Spack to do what I want than actual science with the software I build,"Environment inheritance - would love to be able to define a baseline environment, then derived environments without having to duplicate the environment details.  Also - avoiding having to specify N specs for N external packages when the only thing that's different is the version number.",,,
3/1/2023 11:23:44,Computer Scientist / Scientific Visualization expert,"DOE/Office of Science Lab (e.g., ORNL/ANL/LBL)",United States,Yes,No,,"C, C++, Python","HPC / Simulation, Statistics / Data Analysis, Scientific Visualization",Word of mouth,3,No,develop,openSuSE,10 - 100,3.9,spack load,"Externals in packages.yaml, spack load",No,No,No,Intel,Intel Xe (Ponte Vecchio),"gcc, Intel OneAPI, nvcc (CUDA)",Somewhat important,Critical,Somewhat important,Somewhat important,Not Important,Not Important,Not Important,Critical,Somewhat important,Very Important,Critical,Slightly Important,Slightly Important,Slightly Important,Slightly Important,Slightly Important,,No,No,Coworkers,Monthly,No,No,Good,Good,OK,OK,Testing builds of my ECP Software Technology packages. Deploying production vis packages at ALCF,Ease to build my own packages when new systems are in testing phase,OSMesa (graphics library) fails to build with oneAPI,"no suggestions, I am fine as things are now",no,no,
3/1/2023 12:07:41,System Administrator,University research group,United States,Yes,No,,"C, Python, Perl, sh/bash/other shell script","HPC / Simulation, AI/ML, Computer Science Research, High Energy Physics",Used at my site,5,"Packages, Core Features, Documentation, Slack Discussions, GitHub Discussions, Issues",develop,"macOS 12 (Monterey), RHEL 7, CentOS 7, CentOS 8, Rocky 8, Ubuntu 20, Ubuntu 22, Fedora","> 1,000","3.6, 3.7, 3.8","spack load, Environment Modules (TCL modules)","Environments, Module generation, Chaining (upstreams), spack external find, Externals in packages.yaml, Concretization preferences in packages.yaml, concretizer:unify:when_possible, Multiple build systems in one package, spack test, spack load",Yes -- just one,Yes,,"AMD, Intel, IBM Power, ARM","NVIDIA Volta, NVIDIA Ampere, NVIDIA Hopper, AMD MI100, AMD MI200/250X, AMD MI300, Intel Xe (Ponte Vecchio)","gcc, Intel Compilers, Intel OneAPI, PGI, NVHPC, LLVM, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA)",Slightly Important,Somewhat important,Not Important,Slightly Important,Not Important,Not Important,Not Important,Not Important,Slightly Important,Not Important,Not Important,Not Important,Slightly Important,Somewhat important,Slightly Important,Not Important,,"Yes, I'd like to attend",No,"Documentation, Slack, Mailing List, GitHub Issues, GitHub Discussions, Source Code",Monthly,No,Probably not,Good,Good,Good,Good,Building software for a facility and for software testing.,Time saved,None,Better spack test environment,No,No,
3/1/2023 12:08:02,Scientist/Researcher,"DOE/NNSA Lab (e.g., LLNL/LANL/SNL)",United States,No,No,,"C++, Python","HPC / Simulation, AI/ML",Used at my site,4,"No, Slack Discussions",No idea,RHEL 7,1 - 10,3.8,Custom script or env vars,spack develop,Yes -- several,Yes,App specific front end,Intel,No GPUs,"gcc, Intel Compilers",Critical,Not Important,Not Important,Not Important,Not Important,Not Important,Not Important,Not Important,Critical,Not Important,Not Important,Not Important,Critical,Not Important,Not Important,Not Important,A rethink of how spack develop works to feel less like an afterthought.,No,No,"Slack, Coworkers",Never,No,No,Horrible,OK,Horrible,Horrible,"Run spack for our app. Watch it fail.  Email local expert.  Debug with him live.  Watch it work for two weeks until something in the app or wrapper changes.  Lather, rinse, repeat.",Not much,You can never find where spack puts stuff.  And it moves things when you update spack.,Add better support for controlling build locations and actually test that functionality.,We do not use spack-provided packages.,,
3/1/2023 12:39:56,Research Software Engineer (RSE),Company,United States,Yes,No,Kitware,"C, C++, Python, R, sh/bash/other shell script","HPC / Simulation, Statistics / Data Analysis, Compiler Testing, Visualization",Word of mouth,3,"Packages, Slack Discussions, GitHub Discussions, Issues","0.17, 0.18","RHEL 7, RHEL 8, CentOS 7, CentOS 8, AlmaLinux 8, Ubuntu 18, Ubuntu 20, Ubuntu 22, openSuSE","> 1,000","3.7, 3.8","spack load, Spack environments, spack view","Environments, Build caches (making binary packages), Public build caches at https://binaries.spack.io, E4S build caches (https://e4s.io), spack external find, Externals in packages.yaml, concretization: --reuse (default), concretization: --fresh (build everything fresh), concretizer:unify:true (concretize together), spack test",No,No,No,"AMD, Intel, IBM Power","NVIDIA Volta, NVIDIA Ampere, AMD MI100, AMD MI200/250X","gcc, Intel Compilers, Intel OneAPI, PGI, LLVM, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA), CCE (Cray Compilers)",Somewhat important,Slightly Important,Slightly Important,Somewhat important,Not Important,Critical,Critical,Somewhat important,Critical,Somewhat important,Very Important,Very Important,Very Important,Very Important,Critical,Very Important,,Maybe,No,"Documentation, Slack, Coworkers, spack help, Source Code",Monthly,Probably,"Yes, definitely!",Excellent,Excellent,Excellent,Excellent,,,,,,,
3/1/2023 13:56:08,Computational Scientist,"DOE/Office of Science Lab (e.g., ORNL/ANL/LBL)",United States,Yes,No,ExaSGD,"Fortran, C, C++, Python",HPC / Simulation,Word of mouth,3,"GitHub Discussions, Issues","0.16, 0.17, 0.18, 0.19, custom fork","macOS 11 (Big Sur), RHEL 8",10 - 100,3.11,"Spack environments, Lmod","Environments, Module generation",No,No,No,"AMD, Intel, IBM Power","NVIDIA Volta, NVIDIA Ampere, NVIDIA Hopper, AMD MI100, AMD MI200/250X","gcc, LLVM, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA), CCE (Cray Compilers)",Somewhat important,Very Important,Very Important,Somewhat important,Slightly Important,Somewhat important,Very Important,Very Important,Somewhat important,Very Important,Very Important,Critical,Very Important,Very Important,Very Important,Very Important,,"Yes, I'd like to attend",No,"Documentation, Coworkers, GitHub Discussions",Weekly,Probably not,"Yes, definitely!",OK,OK,OK,OK,,,,,,,
3/1/2023 16:49:14,Software Developer,"DOE/NNSA Lab (e.g., LLNL/LANL/SNL)",United States,No,No,,"C++, Python","HPC / Simulation, Computer Science Research, Visualization",Word of mouth,5,No,0.19,"macOS 12 (Monterey), RHEL 8, CentOS 8",100 - 200,"3.9, 3.10","spack load, Spack environments, Environment Modules (TCL modules)",Environments,No,No,No,"AMD, Intel, ARM, M1, M2",No GPUs,"gcc, LLVM",Very Important,Very Important,Very Important,Slightly Important,Not Important,Slightly Important,Slightly Important,Somewhat important,Somewhat important,Somewhat important,Slightly Important,Not Important,Slightly Important,Slightly Important,Somewhat important,Slightly Important,Build the gcc fortran compiler or Macs,Maybe,Yes,"Google. The doc pages only address very basic usage, and reallly don't help when problems arise, despite the claims otherwise",Monthly,No,Probably,Bad,Good,OK,OK,"I use a mac for developing scientific computing software. Larger tests/runs are on HPC machines, but I like to have things working locally first. Macports for GCC w/ FORTRAN, then i use spack to build deps for things like Trilinos, Xyce, etc.",I can have a consistent package manager across platforms.,"I still need to have macports. Environments don't always have what I install/load into them. It's not easy (i.e. a special case) to rebuild an existing package (say, add a library to a boost intallation, NO! you get a whole new boost).","Why does spack time out on builds? Why can't it download a package one minute, but later it can? Are commands in a spack env really separate from main spack? They seems leaky when I remove something from an env, it's oftern really gone from main spack too.",GCC/FORTRAN it's there but it doesn't usually build IME.,"Spack is off to a good start, but it's still natl. lab research code that mostly works, but has mostly natl. lab software. that make sense, but it would be good to have package coverage like macports. Spack >> homebrew, but building everything on my own is better than homebrew. Geometric expansion is a problem with something like Trilinos; versions X packages X compilers ... I can mostly use spack as my main package manager, I hope it continues to improve.",
3/1/2023 17:39:24,Research Software Engineer (RSE),"DOE/Office of Science Lab (e.g., ORNL/ANL/LBL)",United States,Yes,No,,"Fortran, C, C++, Python, Julia, sh/bash/other shell script","HPC / Simulation, High Energy Physics",Word of mouth,4,Packages,0.19,"Ubuntu 20, Ubuntu 22, Debian 11, Arch, openSuSE, Fedora",100 - 200,"3.6, 3.9, 3.10, 3.11","spack load, Spack environments","Environments, spack external find, Externals in packages.yaml, Concretization preferences in packages.yaml, spack develop, Git versions, spack load",Yes -- just one,Yes,No,"AMD, Intel, IBM Power","NVIDIA Volta, NVIDIA Ampere, NVIDIA Hopper, AMD MI100, AMD MI200/250X, Intel Xe (Ponte Vecchio)","gcc, Intel Compilers, Intel OneAPI, LLVM, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA)",Somewhat important,Somewhat important,Very Important,Somewhat important,Not Important,Not Important,Not Important,Somewhat important,Somewhat important,Very Important,Critical,Somewhat important,Slightly Important,Not Important,Not Important,Not Important,,No,Yes,"Documentation, Coworkers, GitHub Issues, Source Code",Monthly,Probably not,No,Excellent,Excellent,Good,Good,"Checkout latest stable version, create environment, spack external find, manually add system software not found automatically, set concretization prefs in env packages.yaml e.g. for versions and variants, install, try to build HPC code with env active.",Get dependencies on HPC systems as normal user,"Finding system dependencies, spack external find helps but still lots of manual work","Improve spack external, up to date GPU compiler stacks",,,
3/1/2023 19:12:20,Scientist/Researcher,"DOE/NNSA Lab (e.g., LLNL/LANL/SNL)",United States,No,No,"Trilinos, Xyce","C++, Python, MATLAB","HPC / Simulation, Statistics / Data Analysis, AI/ML, Computer Science Research",Word of mouth,3,"Packages, GitHub Discussions, Issues","0.19, develop","macOS 12 (Monterey), macOS 11 (Ventura), RHEL 7, CentOS 7, Ubuntu 20",200 - 500,"3.7, 3.8, 3.9, 3.10","spack load, Custom script or env vars","Environments, spack external find, Concretization preferences in packages.yaml, Git versions, spack load",Yes -- just one,No,No,"Intel, ARM","NVIDIA Volta, NVIDIA Ampere","gcc, LLVM, nvcc (CUDA)",Very Important,Very Important,Somewhat important,Slightly Important,Somewhat important,Somewhat important,Somewhat important,Critical,Very Important,Very Important,Very Important,Somewhat important,Somewhat important,Somewhat important,Very Important,Very Important,,Maybe,Yes,"Documentation, Slack, Coworkers, GitHub Issues, GitHub Discussions",Weekly,No,No,OK,Good,Good,Excellent,"Use Spack to build Trilinos and Xyce along with all dependencies from behind a proxy. I source spack, load a compiler or build one, find the compilers, and then install. Sometimes I will do development in packages in Spack by installing -u cmake and then modifying the source and then installing while keeping the stage. I usually run `spack load [package]` to load a package rather than using environments.","It helps me to by pointing people towards installation instructions that would otherwise be over their head or take too long. It still takes a little bit to get them up and running, but it at least provides a solution for complex dependencies. I have a problem with upstream dependencies often breaking and I end up having to help maintain a lot of packages that break builds for my users.","Updates are made to Spack that do not respect the `-k` flag occasionally. When this happens, I create a PR and address it. It would be nice if somehow this was tested.",Provide documentation for a complex package that handles compiler flags so that developers have a reasonably template. The flag_handler was added but documentation doesn't seem sufficient and it would be nice to have some authoritative explanation for proper use (and improper previous approaches).,,"Overall, I really love how Spack is coming along and I think it has enabled software solutions for complex combinations of programs that wouldn't be possible otherwise. Please keep it up, keep it free, and keep involved with the community.",
3/1/2023 20:21:03,Computational Scientist,"DOE/NNSA Lab (e.g., LLNL/LANL/SNL)",United States,Yes,No,Alegra shock multiphysics,"Fortran, C++, Python","HPC / Simulation, High Energy Physics, Visualization",Word of mouth,5,"Core Features, Documentation, Slack Discussions, Issues","0.19, custom fork","macOS 10.15 (Catalina), RHEL 7, RHEL 8, CentOS 7, Rocky 8, Ubuntu 20, Ubuntu 22","> 1,000","3.9, 3.10, 3.11","Lmod, Environment Modules (TCL modules)","Environments, Chaining (upstreams), Mirrors (spack mirror create / air gap support), Cray PE support (spack external read-cray-manifest), Externals in packages.yaml, New concretizer (clingo), spack develop",Yes -- just one,Yes,Custom,"AMD, Intel, ARM","NVIDIA Volta, AMD MI100","gcc, Intel Compilers, LLVM",Somewhat important,Very Important,Slightly Important,Very Important,Not Important,Not Important,Not Important,Very Important,Very Important,Slightly Important,Very Important,Not Important,Critical,Not Important,Critical,Not Important,,"Yes, I'd like to present something!",No,"Documentation, Slack, GitHub Issues, Source Code",Monthly,Probably not,No,Good,Excellent,OK,Excellent,"Spack is a critical piece in the alegra shock physics development pipeline.  It is used by developers (`spack develop`), our CI/CD, and internal/external distribution management.",The slack channel,,"Quicker PR movement.  Compiler-free packages (eg, data and documentation).  Too many packages!  Can they be removed from core spack a la home brew?  Make spack a proper pip installable package.",See previous.,Good work!,
3/1/2023 20:48:09,Scientist/Researcher,"DOE/NNSA Lab (e.g., LLNL/LANL/SNL)",United States,Yes,No,,"C, C++","Computer Science Research, Visualization",Through CASC and ECP,4,Packages,develop,macOS 11 (Big Sur),1 - 10,3.8,spack load,"Build caches (making binary packages), spack load",Yes -- just one,No,No,"AMD, Intel","NVIDIA Volta, NVIDIA Ampere, AMD MI200/250X","gcc, Intel Compilers, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA)",Not Important,Not Important,Not Important,Not Important,Not Important,Not Important,Not Important,Not Important,Not Important,Not Important,Not Important,Not Important,Not Important,Not Important,Not Important,Not Important,"I frankly don't care about any of the above, or I don't know how they would affect me.  I want to make my own package available via spack and to just ""spack load"" those few packages I'm interested in.  I'm not an advanced user in any sense.",No,No,"Documentation, Slack",Yearly,Probably,No,Good,Good,Good,Good,"I very, very rarely use spack.  I maintain a piece of software that has an associate spack package, therefore I care.  I've also on occasion installed another spack package but usually rely on the software already installed at my institution.","spack can be easier than building from source, especially a package I use with a very large number of dependencies.  Still, this package does not work properly on macOS, so it's not helped me a whole lot.","My biggest issue is that I don't know spack well enough to make good use of it.  As a Linux and Mac user, I'm used to installing packages with yum, brew, and port, which usually require no further configuration or difficulties installing software.  spack seems a little more complicated.  It's got to be installed where it's accessible (obviously), by building it from source (is there another way?), I have to run commands from my login script (e.g., source $HOME/spack/share/spack/setup-env.csh), and even then I've had to rely on experts to help installing some packages (something about a spack cache that had to be flushed or similar).  As a novice user, I don't want to have to worry about those kinds of details.

I also remember some issue with having multiple versions of the same package installed, where you could not easily figure out which version was which and how to specify that version as dependency to some other package that I wanted to install.  It's been half a year or so, so I don't remember specifics other than this being more difficult than it should have been.",I don't use spack frequently enough to have an opinion.,None that I can think of.,"I do remember some issue with having multiple spack installations on my computer that caused some issues (with cache conflicts, perhaps?).  Maybe that's an obvious no-no, but as a developer of a piece of software that has a spack package, I also need to fork the spack repo to make updates to my spack package, which necessarily results in multiple spack installations that evidently cause these conflicts (I could be wrong here, but I think that's what I was told).  I'm sure this is all discussed somewhere in the documentation, but as an occasional user I don't have time to search for and read the relevant documentation when all I want to do is add a few lines of code to my spack recipe.",
3/2/2023 5:23:16,Software Developer,"DOE/Office of Science Lab (e.g., ORNL/ANL/LBL)",United States,No,No,,"C, C++",High Energy Physics,Used at my site,5,"Packages, Core Features, Slack Discussions, GitHub Discussions, Tools/integrations","0.19, develop","RHEL 7, RHEL 8, CentOS 7, CentOS 8, AlmaLinux 8",10 - 100,3.6,"Spack environments, UPS","Chaining (upstreams), Build caches (making binary packages), spack-python (Python scripting), Externals in packages.yaml, New concretizer (clingo), concretizer:unify:true (concretize together), spack load",Yes -- several,Yes,SpackDev,"AMD, Intel",Nvidia A100,gcc,Very Important,Very Important,Very Important,Very Important,Slightly Important,Slightly Important,Slightly Important,Very Important,Somewhat important,Very Important,Somewhat important,Slightly Important,Very Important,Somewhat important,Slightly Important,Somewhat important,,No,No,"Slack, Coworkers, Source Code",Yearly,No,No,Good,Good,Good,Good,,,,,,,
3/2/2023 5:52:34,Scientist/Researcher,University HPC/Computing Center,Italy,No,Yes,,"C, C++, Python","HPC / Simulation, Bioinformatics",Word of mouth,4,No,0.19,Ubuntu 22,10 - 100,3.1,Spack environments,"Environments, spack diff (compare two specs)",Yes -- several,No,No,"AMD, Intel, IBM Power","NVIDIA Ampere, NVIDIA Hopper","gcc, Intel OneAPI, NVHPC, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA)",Slightly Important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Very Important,Somewhat important,Critical,Somewhat important,Somewhat important,Very Important,Slightly Important,Slightly Important,Very Important,Somewhat important,,Maybe,Yes,"Documentation, Slack, Coworkers, GitHub Issues, GitHub Discussions, spack help",Weekly,Probably,"Yes, definitely!",Good,Good,Good,Excellent,We mainly use Spack to simplify software deployment on HPC cluster.,"Simplify the installation process in HPC, implement CIs",,"Performance, e.g. spack spec might require minutes to output something.",Blender,"I'm still learning the huge amount of functionalities spack can offer, but so far I love how simple it becomes to install even huge software with complex dependencies on HPC systems with little efforts. So, thank you for your hard work!",
3/2/2023 8:03:11,Scientist/Researcher,University research group,United States,No,No,,Python,AI/ML,Word of mouth,5,"Packages, Core Features, Documentation, Slack Discussions, GitHub Discussions, Issues, Mailing List",develop,"macOS 10.15 (Catalina), RHEL 6","> 1,000","3.6, 3.10","spack load, Spack environments","Environments, spack external find, Externals in packages.yaml, Concretization preferences in packages.yaml, New `require:` directive in packages.yaml, New concretizer (clingo), concretization: --reuse (default), concretizer:unify:true (concretize together), Multiple build systems in one package, spack test, spack load, spackbot (@spackbot fix style; @spackbot rebuild everything, etc.)",No,No,No,"Intel, ARM","NVIDIA Ampere, Apple M2","gcc, LLVM",Somewhat important,Slightly Important,Very Important,Slightly Important,Not Important,Very Important,Critical,Not Important,Slightly Important,Slightly Important,Slightly Important,Somewhat important,Not Important,Slightly Important,Critical,Not Important,,"Yes, I'd like to present something!",Yes,"Documentation, Slack, GitHub Issues, GitHub Discussions, spack help, Source Code",Daily,No,No,Good,Excellent,Good,Good,"Software developer/ML researcher, using Spack to install software environment locally, on HPC, and in the cloud",Better stability of ML packages thanks to GitLab CI pipeline,"macOS binary relocation, slow concretization",Spack should install from the public binary cache by default,Better rust/cargo support,,
3/2/2023 8:46:23,System Administrator,University HPC/Computing Center,United States,No,No,,"C, Python, Perl, sh/bash/other shell script, Scheme, Common Lisp","HPC / Simulation, AI/ML, Computer Science Research, Bioinformatics, High Energy Physics",Search,4,"Packages, Slack Discussions, Issues",develop,"CentOS 7, Rocky 8",100 - 200,3.6,"spack load, Lmod","Module generation, Chaining (upstreams), spack external find, New concretizer (clingo), spack load",Yes -- just one,No,No,"AMD, Intel","NVIDIA T4, NVIDIA Volta, NVIDIA Ampere, NVIDIA Hopper","gcc, Intel Compilers, Intel OneAPI, NVHPC, nvcc (CUDA)",Very Important,Very Important,Slightly Important,Very Important,Slightly Important,Not Important,Somewhat important,Very Important,Very Important,Somewhat important,Very Important,Slightly Important,Somewhat important,Somewhat important,Critical,Very Important,,Maybe,Yes,"Documentation, Slack, Coworkers, GitHub Issues, GitHub Discussions, spack help",Weekly,Probably not,Probably not,OK,Excellent,Good,Good,,,,,,,
3/2/2023 9:21:19,Scientist/Researcher,"DOE/NNSA Lab (e.g., LLNL/LANL/SNL)",United States,Yes,No,,"Fortran, C, C++, MATLAB",HPC / Simulation,Used at my site,0,No,Not currently using it,Not currently using it,1 - 10,3.5,spack build-env,I am not familiar with these features,No,No,No,AMD,AMD Other,"gcc, nvcc (CUDA)",Very Important,Very Important,Somewhat important,Somewhat important,Not Important,Very Important,Not Important,Somewhat important,Slightly Important,Very Important,Very Important,Slightly Important,Not Important,Not Important,Not Important,Not Important,,No,No,Coworkers,Never,No,Probably,OK,OK,OK,OK,To build the Ascent library,Help from colleagues,Resolving workflow issues on new machines,Debug information that points to the actual problem,,,
3/2/2023 17:10:14,Computational Scientist,University research group,United States,Yes,No,,C++,"HPC / Simulation, High Energy Physics",Presentation,5,"Packages, Documentation, Slack Discussions, GitHub Discussions, Issues","0.18, 0.19","RHEL 7, RHEL 8, Arch",100 - 200,3.9,Lmod,"Environments, Module generation, spack containerize, Stacks (matrices in environments), Mirrors (spack mirror create / air gap support), E4S build caches (https://e4s.io), build-env (debug a build), spack external find, Externals in packages.yaml, Concretization preferences in packages.yaml, New concretizer (clingo), spack develop, concretizer:unify:true (concretize together), New scalable binding link model (config:shared_linking:bind:true), spack test",No,No,No,"AMD, Intel","NVIDIA Volta, NVIDIA Ampere, NVIDIA Hopper, AMD MI200/250X, AMD MI300, Intel Xe (Ponte Vecchio)","gcc, Intel Compilers, Intel OneAPI, NVHPC, LLVM, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA)",Critical,Critical,Not Important,Somewhat important,Not Important,Not Important,Not Important,Slightly Important,Somewhat important,Somewhat important,Critical,Not Important,Somewhat important,Slightly Important,Slightly Important,Not Important,,No,Yes,"Documentation, Slack, GitHub Issues, Source Code",Monthly,Probably,"Yes, definitely!",Excellent,Excellent,Excellent,Excellent,install compilers and dependencies for developers in our research center,"automating install of multiple packages, quickly install new packages when requested (most of the time)",(1) error messages that don't point to a problem I understand (2) packages that won't compile,better error messages,no,great job!,
3/2/2023 23:58:38,Software Developer,Other Public Research Lab,Italy,No,Yes,,"Fortran, Python",HPC / Simulation,Word of mouth,2,Packages,"0.17, 0.18","CentOS 7, Ubuntu 18",100 - 200,3.6,spack load,"spack external find, spack load",Yes -- just one,No,No,"AMD, Intel, ARM","NVIDIA Volta, NVIDIA Ampere, NVIDIA Hopper, AMD MI200/250X, AMD MI300, Intel Xe (Ponte Vecchio)","Intel Compilers, Intel OneAPI, NVHPC, AMD ROCmCC (amdclang/hipcc), CCE (Cray Compilers)",Very Important,Very Important,Somewhat important,Slightly Important,Somewhat important,Slightly Important,Not Important,Somewhat important,Slightly Important,Critical,Critical,Very Important,Slightly Important,Somewhat important,Somewhat important,Slightly Important,,Maybe,Yes,Documentation,Monthly,Probably not,Probably not,Good,OK,OK,Good,I created a local repo to develop the package of the yambo code. I often use spack to build new compilers in order to test the installation of yambo with many different compilers in many versions.,in the development of the autotool procedure of the yambo code,manage some dependencies using different compilers,,,,
3/3/2023 7:33:45,DevOps/SRE,Company,United States,Yes,No,,"Fortran, C, C++","HPC / Simulation, AI/ML, Compiler Testing",Search,1,Will be contributing packages in the near future,"0.19, develop","RHEL 8, AlmaLinux 8, Ubuntu 20, Ubuntu 22",1 - 10,3.9,"spack load, Spack environments, Containers, Custom script or env vars","Environments, spack containerize, Mirrors (spack mirror create / air gap support), Build caches (making binary packages), spack external find, Externals in packages.yaml, Concretization preferences in packages.yaml, Distributed Builds (srun/mpirun spack install), concretizer:unify:true (concretize together), Variant/flag propagation (++, ~~, ==), spack load",Yes -- just one,No,No,AMD,"AMD MI100, AMD MI200/250X, AMD MI300, AMD Other","gcc, AMD ROCmCC (amdclang/hipcc), armclang",Somewhat important,Somewhat important,Somewhat important,Somewhat important,Not Important,Very Important,Very Important,Very Important,Very Important,Somewhat important,Critical,Not Important,Somewhat important,Slightly Important,Slightly Important,Slightly Important,,"Yes, I'd like to attend",Yes,Documentation,Daily,"Yes, definitely!","Yes, definitely!",Good,OK,Good,Good,Use case is developing packages for AMD GPU based HPC code.,Printing out the documentation as a PDF (like to read hard copy !),"Understand the detail command flow for user cases 1) user development environment, 2) develop a new package, 3) external openmpi, etc. 4) load a package environment.",Add a User Scenario section to doc that walks through work flows in more detail.,,Great job with Spack ! It is a very important contribution to the HPC world.,
3/3/2023 8:39:50,Research Software Engineer (RSE),"DOE/NNSA Lab (e.g., LLNL/LANL/SNL)",United States,Yes,No,,"C++, Python, sh/bash/other shell script, Ruby",HPC / Simulation,Word of mouth,5,"Packages, Slack Discussions, Issues",develop,"RHEL 7, RHEL 8, Windows Subsystem for Linux (WSL)","500-1,000",3.9,"Spack environments, spack build-env, spack view, Custom script or env vars","Environments, Chaining (upstreams), Stacks (matrices in environments), Mirrors (spack mirror create / air gap support), Build caches (making binary packages), Public build caches at https://binaries.spack.io, build-env (debug a build), spack-python (Python scripting), spack external find, Cray PE support (spack external read-cray-manifest), Externals in packages.yaml, Concretization preferences in packages.yaml, New `require:` directive in packages.yaml, New concretizer (clingo), spack develop, concretization: --reuse (default), concretization: --fresh (build everything fresh), concretizer:unify:true (concretize together), concretizer:unify:when_possible, Git versions, spack test",Yes -- several,My site has a front-end or extension to Spack,spack manager,"AMD, Intel, IBM Power, ARM","NVIDIA Volta, NVIDIA Ampere, AMD MI200/250X, AMD MI300, Intel Xe (Ponte Vecchio)","gcc, Intel Compilers, Intel OneAPI, LLVM, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA), CCE (Cray Compilers), armclang",Somewhat important,Critical,Very Important,Somewhat important,Not Important,Not Important,Not Important,Very Important,Very Important,Very Important,Critical,Not Important,Slightly Important,Not Important,Slightly Important,Not Important,,Maybe,No,"Documentation, Slack, Coworkers, GitHub Issues, Source Code",Weekly,Probably not,Probably not,Excellent,Good,Good,Good,,,,,,,
3/3/2023 14:26:39,Research Software Engineer (RSE),"DOE/Office of Science Lab (e.g., ORNL/ANL/LBL)",United States,No,No,,"C, C++, Python, Go, Perl, sh/bash/other shell script, Ruby","HPC / Simulation, Statistics / Data Analysis, AI/ML, High Energy Physics, Web applications",Used at my site,3,"Packages, Slack Discussions","0.17, 0.19","CentOS 7, AlmaLinux 8",10 - 100,"3.6, 3.9","Spack environments, UPS","Environments, Module generation, Chaining (upstreams), Mirrors (spack mirror create / air gap support), Build caches (making binary packages), build-env (debug a build), spack-python (Python scripting), New concretizer (clingo), Multiple build systems in one package, spack load",Yes -- several,Yes,No,"AMD, Intel, ARM",NVIDIA Other,"gcc, Intel Compilers, LLVM",Slightly Important,Somewhat important,Somewhat important,Slightly Important,Slightly Important,Very Important,Very Important,Somewhat important,Very Important,Very Important,Somewhat important,Slightly Important,Slightly Important,Somewhat important,Somewhat important,Not Important,,Maybe,Yes,"Documentation, Slack, Source Code",Weekly,Probably not,No,OK,Good,Good,Good,"I have several:  1) Building spack environments to support locally developed services; usually implemented in python fronting a postgesql database; spack lets us reconstruct the same package environment on our production machines as we setup in development, etc. 2) Helping our experiments package and distribute ""blessed"" generic-x86_64 versions of their software suites to install in cvmfs and use for grid computing, and also build HPC builds of the same software to take advantage of HPC resources. 3) developing utility software for our experiments to use in 2) above.",I think the --reuse flag was most helpful. ,"I sometimes find I have to argue with the concretizer, particularly if I specify a dependency that I have in a spack instance area already, but it decides it likes some other set of flags, etc. better, and I want it to use *that* one.  
Next is trying to bundle packages like Tensorflow, that want to build all or some of their dependencies internally with sort of recursive cmake or bazel build structures.   It would be good to have either a tool to monkey with cmake's and/or bazel's brains to have it use existing spack packages in those cases, or a way to let it build them, but split out the subpackages it builds into separate spack packages; sort of like you build 3 binary rpms from one source rpm. 
Third is trying to get Spack to use system packages (i.e RPM's) as dependencies.  While Spack has been getting better about having a few packages that can identify system instances; there are lots of things like Xwindows related packages that we keep ending up building Spack instances of because it is too hard to get it to use the system ones.  The worst example is Spack recipes that explicitly add literal ""-lintl""  to their compile flags, which means the system libraries for gettext etc. built into libc cannot be used because they aren't named that way; but it seems that supporting ""lean"" builds where you use as much existing external software as possible isn't a scheme that Spack developers have in mind.   I understand that there are environments where you do want to rebuild everything from pretty much libc on up, but there are environments where the opposite is true. ",Get better errors out of the concretizer about what is conflicting when it doesn't like some combination of dependencies.,"I'm less worried about what comes with Spack than how easy it is to add them myself.   Especially things like pypi python packages, or ruby gems, or perl CPAN modules;  having a zillion of them in Spack is not important if I can just spack create them from the gem/pypi/CPAN  package name.  So making that more automatic is better than adding packages.",Thanks for all the good work on Spack. ,
3/3/2023 16:05:06,User Support Staff,"DOE/Office of Science Lab (e.g., ORNL/ANL/LBL)",United States,Yes,No,,"C++, Python, sh/bash/other shell script",HPC / Simulation,Used at my site,5,"Packages, Documentation, Slack Discussions, Issues","0.18, 0.19, custom fork","RHEL 8, CentOS 8, Cray XT","> 1,000","3.7, 3.8, 3.9",Lmod,"Environments, Module generation, Chaining (upstreams), Stacks (matrices in environments), Build caches (making binary packages), Externals in packages.yaml, Concretization preferences in packages.yaml, New concretizer (clingo), concretization: --reuse (default), concretization: --fresh (build everything fresh), concretizer:unify:true (concretize together), concretizer:unify:when_possible, Variant/flag propagation (++, ~~, ==), spack test",Yes -- several,Yes,No,"AMD, Intel, IBM Power","NVIDIA Volta, NVIDIA Ampere, NVIDIA Hopper, AMD MI200/250X, AMD MI300, AMD Other","gcc, Intel Compilers, LLVM, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA), IBM XL, CCE (Cray Compilers)",Critical,Critical,Critical,Somewhat important,Not Important,Not Important,Not Important,Critical,Slightly Important,Very Important,Very Important,Not Important,Not Important,Critical,Very Important,Not Important,,"Yes, I'd like to attend",Yes,"Documentation, Mailing List, Coworkers, GitHub Issues, GitHub Discussions, Source Code",Weekly,Probably,No,Good,OK,OK,Good,,,,,,,
3/4/2023 5:27:20,Research Software Engineer (RSE),University research group,United States,Yes,No,,"C, C++, Python, sh/bash/other shell script","HPC / Simulation, Statistics / Data Analysis, Computer Science Research, High Energy Physics",Word of mouth,5,"Packages, Slack Discussions, Issues",develop,"macOS 10.15 (Catalina), RHEL 8, Ubuntu 18, Ubuntu 20, Ubuntu 22, Cray XC",10 - 100,"3.8, 3.9","spack load, spack build-env","build-env (debug a build), spack external find, Externals in packages.yaml, Concretization preferences in packages.yaml, New concretizer (clingo), spack load",No,No,No,"AMD, Intel, ARM","NVIDIA Volta, NVIDIA Ampere, NVIDIA Hopper, AMD MI200/250X, AMD MI300, Intel Xe (Ponte Vecchio)","gcc, Intel OneAPI, NVHPC, LLVM, AMD ROCmCC (amdclang/hipcc)",Very Important,Very Important,Critical,Somewhat important,Slightly Important,Slightly Important,Slightly Important,Very Important,Critical,Critical,Critical,Not Important,Not Important,Not Important,Critical,Not Important,,Maybe,Yes,"Documentation, Slack, Mailing List, Coworkers, spack help",Monthly,Probably not,Probably,Good,Good,Good,Good,"tool / software development, building dependencies for them",,.spack directory in $HOME,nothing in home directory on shared systems,,,
3/4/2023 23:19:59,Code user/analyst,Company,France,No,Yes,,"C++, Python",HPC / Simulation,Word of mouth,5,"Packages, Issues",develop,"RHEL 8, Ubuntu 22, Windows Subsystem for Linux (WSL)",10 - 100,3.6,"Environment Modules (TCL modules), spack view","Environments, Module generation, Mirrors (spack mirror create / air gap support), spack external find, Externals in packages.yaml, Concretization preferences in packages.yaml, New concretizer (clingo), concretization: --fresh (build everything fresh), concretizer:unify:true (concretize together), spack test",Yes -- several,Yes,No,"AMD, Intel, ARM, RISC-V","NVIDIA Volta, NVIDIA Ampere, NVIDIA Hopper, AMD MI200/250X, AMD MI300, Intel Xe (Ponte Vecchio)","gcc, Intel Compilers, Intel OneAPI, NVHPC, LLVM, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA), armclang",Somewhat important,Very Important,Somewhat important,Slightly Important,Not Important,Very Important,Very Important,Very Important,Critical,Very Important,Somewhat important,Very Important,Somewhat important,Critical,Somewhat important,Slightly Important,Better doc on for instance how to install a performant openmpi which integrate well in a cluster with existing software (slurm...),No,No,"Documentation, GitHub Issues, Source Code",Weekly,Probably not,Probably not,Good,Excellent,OK,Good,"I regularly have to test different hpc codes and get best performance. I use a different env each time and install some dependencies. Some critical dependencies (openmpi), I get better perf and usability by compiling myself with auto discovery on configure.",The ability to install a complex toolchain in one command,install_missing_compilers not working well,Getting it easier to make your own build cache,"I would rather have more variants for basic packages such as openmpi, openmpi-hpcx and their dependencies",Thanks,
3/4/2023 23:51:33,Software Developer,"DOE/NNSA Lab (e.g., LLNL/LANL/SNL)",United States,No,No,,"C, Python, Go","HPC / Simulation, Computer Science Research, Web applications",Word of mouth,4,"Packages, Core Features, Documentation, Slack Discussions, Issues",develop,macOS 11 (Ventura),200 - 500,3.1,Spack environments,"Environments, Mirrors (spack mirror create / air gap support), spack ci (GitLab pipeline generation -- yourself, not on our CI), spack-python (Python scripting), spack external find, Externals in packages.yaml, spack develop, concretization: --reuse (default), concretization: --fresh (build everything fresh), spack load, spackbot (@spackbot fix style; @spackbot rebuild everything, etc.), spack diff (compare two specs)",No,Yes,No,"AMD, Intel, ARM",No GPUs,"gcc, go, rustc",Somewhat important,Critical,Somewhat important,Slightly Important,Somewhat important,Somewhat important,Very Important,Somewhat important,Critical,Slightly Important,Slightly Important,Slightly Important,Critical,Very Important,Critical,Critical,,"Yes, I'd like to present something!",Yes,"Documentation, Slack, Coworkers, GitHub Issues, Source Code",Weekly,Probably,"Yes, definitely!",Good,Excellent,OK,OK,"I maintain multiple development environments through Spack for different Python, Go, and C projects on my local laptop as well as on a set of remote machines. ",Spack environments have made it easy to reproduce and share development environments to multiple co-workers. ,Broken/out of date packages. ,"Addition of compilers as dependencies. Improving Spack cli defaults/ux.

- I believe there was a discussion a while back about moving from `--best-effort` to `--fail-fast` behavior for install.
- I always find myself typing `find` when I mean `list` and vice versa. To me find should search/list all packages and list should show locally installed packages. This is currently the opposite and is confusing.
- It'd be great if we had a way to automatically reconcretize an environment (i.e. a `spack env upgrade command) and replace the installed concrete specs with newer versions.

Small changes like that would help immensely.",If anything I'd rather see a decrease in the number of packages in the builtin repository if that would improve the rate at which packages are updated. When exploring new packages outside of my core set I often find many of them are months if not years out of date. If possible you all should look to partially automate updating packages or deprecating and removing packages if no one installs them/contributes to them after a few years.,Keep up the good work! ,
3/5/2023 9:01:41,Computational Scientist,University research group,Czech Republic,No,No,,"C, Python, Julia, sh/bash/other shell script, D",HPC / Simulation,Search,5,"Packages, GitHub Discussions, Issues","0.16, 0.19, develop",Ubuntu 18,1 - 10,3.8,"Lmod, Environment Modules (TCL modules)","Environments, Module generation, Externals in packages.yaml, Concretization preferences in packages.yaml",Yes -- just one,No,No,"AMD, Intel",No GPUs,"gcc, Intel Compilers",Somewhat important,Somewhat important,Somewhat important,Very Important,Slightly Important,Slightly Important,Slightly Important,Somewhat important,Very Important,Slightly Important,Slightly Important,Slightly Important,Slightly Important,Slightly Important,Slightly Important,Slightly Important,,Maybe,No,"Documentation, Slack, GitHub Issues, GitHub Discussions",Monthly,Probably not,Probably,Good,Excellent,Good,Good,,,,,,,
3/5/2023 21:22:28,Computational Scientist,"DOE/Office of Science Lab (e.g., ORNL/ANL/LBL)",United States,Yes,No,,"C++, Python",HPC / Simulation,Word of mouth,2,Packages,develop,macOS 12 (Monterey),10 - 100,"3.7, 3.8","spack load, I mostly make sure that the spack packages for our projects work","spack develop, spack test",No,No,No,"AMD, Intel, IBM Power, ARM","NVIDIA Volta, NVIDIA Ampere, NVIDIA Hopper, NVIDIA Other, AMD MI200/250X, AMD MI300, AMD Other, Intel Xe (Ponte Vecchio)","gcc, Intel Compilers, Intel OneAPI, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA), IBM XL, CCE (Cray Compilers)",Slightly Important,Critical,Slightly Important,Very Important,Not Important,Not Important,Not Important,Very Important,Slightly Important,Somewhat important,Very Important,Somewhat important,Slightly Important,Somewhat important,Not Important,Not Important,"More specific from the above, it's not necessarily clear to me that flags/compilers are always propagated/enforced from package to package. Everything we do downstream has to inherit from/match Kokkos, but I'm not sure of a way to directly enforce that",Maybe,Yes,"Documentation, Coworkers, GitHub Issues",Monthly,Probably not,Probably,Good,Good,OK,Good,spack is a great option to help our users quickly get started with our libraries/applications. I largely try to make sure those are working consistently,"Clear place to point users for a ""this just works"" solution if they're not familiar with/interested source builds ",Making sure that our packages work after new releases (or new dependency releases),,,,
3/6/2023 0:47:07,User Support Staff,Other Public Research Lab,France,No,Yes,,"Fortran, C, C++, Python, sh/bash/other shell script","HPC / Simulation, AI/ML, Computer Science Research",Word of mouth,2,Packages,develop,"RHEL 7, RHEL 8, CentOS 7, CentOS 8, Ubuntu 22",10 - 100,"3.7, 3.8, 3.9, 3.10","Environment Modules (TCL modules), Containers","Environments, Module generation, Chaining (upstreams), Mirrors (spack mirror create / air gap support), New concretizer (clingo), concretization: --reuse (default), Variant/flag propagation (++, ~~, ==)",Yes -- several,No,No,"AMD, Intel, ARM","NVIDIA Volta, NVIDIA Ampere, NVIDIA Hopper, AMD MI200/250X, AMD MI300, AMD Other","gcc, Intel Compilers, Intel OneAPI, PGI, NVHPC, LLVM, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA), Fujitsu Compilers, armclang",Very Important,Very Important,Critical,Very Important,Somewhat important,Slightly Important,Slightly Important,Very Important,Very Important,Very Important,Critical,Somewhat important,Somewhat important,Somewhat important,Slightly Important,Slightly Important,,No,Yes,"Documentation, Slack, Coworkers, GitHub Discussions, Source Code",Monthly,Probably,Probably,Good,Excellent,Good,Good,"At the moment I have two distinct uses of Spack: firstly, it is used on our clusters to build specific software environments (with different toolchains, but not the whole environment); secondly, I use it locally for some pet projects or when I need to deploy rapidely something for a POC -- works like a charm.",,Concretization that goes bananas. We had several issues were packages were downgraded more or less silently.,,"Yes, but when we don't find it, we write it (and we know we have to push them, that's a work in progress)",keep up the good work!,
3/6/2023 2:28:53,Research Software Engineer (RSE),University research group,United States,No,No,,"C++, Python",HPC / Simulation,Word of mouth,0,Packages,develop,"macOS 12 (Monterey), CentOS 8, Rocky 8, Ubuntu 22",1 - 10,"3.7, 3.8, 3.9, 3.10","spack load, Lmod, Environment Modules (TCL modules)","Module generation, Chaining (upstreams), build-env (debug a build), spack-python (Python scripting), spack external find, Externals in packages.yaml, Distributed Builds (srun/mpirun spack install), spack develop, Multiple build systems in one package, spack load, spackbot (@spackbot fix style; @spackbot rebuild everything, etc.)",Yes -- just one,No,No,"AMD, Intel","NVIDIA T4, NVIDIA Volta, NVIDIA Ampere, NVIDIA Hopper, NVIDIA Other, AMD MI100, AMD MI200/250X, AMD MI300, AMD Other","gcc, Intel Compilers, Intel OneAPI, LLVM, nvcc (CUDA), CCE (Cray Compilers)",Somewhat important,Critical,Somewhat important,Somewhat important,Slightly Important,Not Important,Not Important,Slightly Important,Slightly Important,Somewhat important,Somewhat important,Slightly Important,Very Important,Very Important,Slightly Important,Slightly Important,,Maybe,Yes,"Documentation, Slack, Coworkers, Source Code",Weekly,No,Probably not,Good,Excellent,Excellent,Good,,,,"better documentation for the non-Pythonic aspects, such as what is injected into a `package.py` module, or what class API is not clearly visible through inheritance from base class.",,,
3/6/2023 4:50:40,System Administrator,University research group,France,No,Yes,,"Fortran, Python, Rust, Go, sh/bash/other shell script, OCAML",Computer Science Research,Word of mouth,2,Issues,"0.19, develop",CentOS 7,10 - 100,3.6,Environment Modules (TCL modules),"Environments, Module generation",No,No,No,"AMD, Intel",No GPUs,"gcc, Intel OneAPI, AMD ROCmCC (amdclang/hipcc)",Critical,Very Important,Somewhat important,Very Important,Slightly Important,Somewhat important,Very Important,Very Important,Very Important,Very Important,Not Important,Not Important,Somewhat important,Very Important,Very Important,Not Important,,Maybe,No,Documentation,Yearly,No,Probably,OK,OK,OK,Good,Lab cluster,,,,,,
3/7/2023 1:14:39,System Administrator,University HPC/Computing Center,Netherlands,No,No,,"Fortran, C, C++, Python","HPC / Simulation, AI/ML",Word of mouth,2,No,"0.17, 0.19",RHEL 8,10 - 100,"3.8, 3.10","Spack environments, Lmod","Environments, Module generation, Chaining (upstreams), Stacks (matrices in environments), Externals in packages.yaml, Concretization preferences in packages.yaml, New `require:` directive in packages.yaml, New concretizer (clingo), concretizer:unify:true (concretize together), concretizer:unify:when_possible",No,No,No,"AMD, Intel, RISC-V","NVIDIA Volta, NVIDIA Ampere, NVIDIA Hopper","gcc, Intel OneAPI, LLVM, nvcc (CUDA)",Somewhat important,Very Important,Very Important,Not Important,Slightly Important,Slightly Important,Slightly Important,Very Important,Somewhat important,Very Important,Slightly Important,Not Important,Not Important,Slightly Important,Slightly Important,Slightly Important,,No,Yes,"Documentation, GitHub Issues, GitHub Discussions, Source Code",Daily,Probably not,Probably,Good,OK,Good,Good,"I use a big spack environment build for the University-wide HPC system, creating two environments, for compute and GPU nodes. There is great variation in application use, so i try to cater for everybody.",Excellent chaining functions.,Fear of adding module to existing spack installations and then see the subsequent concretization shifting dependencies and versions.,Support for compiler dependencies and support for Risc-V,no,"Some more (recent, i.e. v0.19) examples for existing HPC environments would be helpful",
3/7/2023 6:41:19,DevOps/SRE,Company,United States,No,No,,"Python, sh/bash/other shell script","HPC / Simulation, Compiler Testing",Used at my site,5,"Packages, Slack Discussions",develop,"RHEL 7, RHEL 8, Rocky 8, Ubuntu 22, SLES12, SLES15",200 - 500,3.6,"spack load, Spack environments","Environments, spack-python (Python scripting), spack external find, Externals in packages.yaml, Concretization preferences in packages.yaml, concretizer:unify:true (concretize together), Git versions, spack load, spack diff (compare two specs)",Yes -- just one,No,No,"AMD, Intel, ARM","NVIDIA Other, AMD Other","gcc, Intel Compilers, Intel OneAPI, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA)",Somewhat important,Critical,Slightly Important,Not Important,Critical,Not Important,Not Important,Slightly Important,Slightly Important,Somewhat important,Somewhat important,Not Important,Slightly Important,Not Important,Critical,Not Important,,No,Yes,"Documentation, Slack, GitHub Issues, GitHub Discussions, Source Code",Daily,Probably,Probably,Excellent,Excellent,Good,Excellent,I use Spack in tandem with ReFrame to build and test software stacks. I maintain an internal Spack package repo for my company that allows us to build from git versioning off of private repos.,Ease of building (and rebuilding) complex sw stacks.,"I have Spack sitting on NFS, with many hosts of varying architectures and OSes sharing this installation. Compiler management, especially trying to get this to work with automation, has been a huge pain point. (maybe compilers as true deps will help with this...?)","GitHub turnaround time seems like a large roadblock to regular contributions, especially for first-time contributors. Other than this, maybe more flexibility with regards to compiler management / relaxing the configuration of compilers.",,"The Spack community is really incredible. It has been great to watch the growth since ~2017, and I just want to say a sincere thank you for all of the great work and community support.",
3/7/2023 11:52:06,Manager,University HPC/Computing Center,United States,No,No,,"Fortran, R, sh/bash/other shell script","HPC / Simulation, Statistics / Data Analysis, AI/ML",Tutorial,5,Slack Discussions,"0.16, 0.18, 0.19, custom fork","macOS 11 (Big Sur), CentOS 8, openSuSE","> 1,000",3.6,Lmod,"Environments, Module generation, Chaining (upstreams), Stacks (matrices in environments), build-env (debug a build), Externals in packages.yaml, Concretization preferences in packages.yaml",Yes -- several,Yes,No,"AMD, Intel","NVIDIA Volta, NVIDIA Ampere, NVIDIA Hopper","gcc, Intel OneAPI, nvcc (CUDA)",Critical,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Very Important,Very Important,Very Important,Critical,Very Important,Very Important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,,Maybe,Yes,"Documentation, Slack",Monthly,Probably not,"Yes, definitely!",Excellent,Excellent,Excellent,Excellent,"create environments for various target architectures (avx, avx2, avx512) with same spack.yaml",building optimized applications for various architectures in a seamless way,clingo uses too much resources and is very cpu intensive compared to the old concretizer,,"No, I just create recipes for packages I need. I do not contribute back to spack since I know I will not be able to maintain it.",,
3/7/2023 11:59:02,Scientist/Researcher,University research group,Germany,No,No,,"C, Python, sh/bash/other shell script","HPC / Simulation, Computer Science Research",Word of mouth,5,"Packages, Core Features, Documentation, Slack Discussions, Issues, Mailing List","develop, custom fork","CentOS 8, Ubuntu 20, Fedora","> 1,000","3.6, 3.11",Environment Modules (TCL modules),"Module generation, Mirrors (spack mirror create / air gap support), Concretization preferences in packages.yaml, New `require:` directive in packages.yaml, New concretizer (clingo), concretization: --fresh (build everything fresh), spackbot (@spackbot fix style; @spackbot rebuild everything, etc.), spack diff (compare two specs)",No,Yes,No,"AMD, Intel",No GPUs,"gcc, LLVM",Very Important,Very Important,Very Important,Somewhat important,Slightly Important,Slightly Important,Slightly Important,Somewhat important,Very Important,Slightly Important,Slightly Important,Somewhat important,Somewhat important,Slightly Important,Very Important,Somewhat important,,Maybe,Yes,"Documentation, Slack, GitHub Issues, Source Code",Monthly,No,No,Good,Good,Good,OK,,,,,,,
3/7/2023 12:00:22,Computational Scientist,University research group,United States,No,No,,"C, C++, Python","HPC / Simulation, Computer Science Research",Word of mouth,2,"Packages, Slack Discussions",develop,"RHEL 7, Rocky 8, Arch",10 - 100,"3.7, 3.8","spack load, Spack environments","Environments, Mirrors (spack mirror create / air gap support), Build caches (making binary packages), concretization: --reuse (default), concretizer:unify:true (concretize together), spack load",No,No,No,"AMD, Intel","NVIDIA Hopper, AMD MI100, Intel Xe (Ponte Vecchio)","gcc, Intel OneAPI, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA)",Critical,Somewhat important,Slightly Important,Critical,Slightly Important,Critical,Critical,Critical,Critical,Very Important,Somewhat important,Somewhat important,Slightly Important,Slightly Important,Somewhat important,Not Important,,Maybe,No,"Documentation, Slack, Source Code",Monthly,Probably not,Probably not,OK,Good,OK,OK,I help in maintaining a package and hosting a build cache,N/A - I don't really use it as an end user,I don't particularly like that the default repository info is linked to a commit. I'd like to be able to get the latest packages regardless of what spack version I'm using.,"Spack has a lot of features, but they are intimidating to use. There are so many that I have no clue if/when I should be using them. Sometimes the documentation is useful, but sometimes it is too vague. More examples of use cases within the documentation might alleviate this.",,,
3/7/2023 12:05:49,Research Software Engineer (RSE),University HPC/Computing Center,United States,No,No,,"C++, Python, sh/bash/other shell script","HPC / Simulation, Statistics / Data Analysis, Compiler Testing",Word of mouth,1,"Slack Discussions, GitHub Discussions, Issues",0.19,CentOS 7,10 - 100,"3.6, 3.7, 3.8, 3.9, 3.10, 3.11","spack load, Spack environments, Lmod, Containers","Environments, Module generation, spack containerize, Stacks (matrices in environments), Externals in packages.yaml, New concretizer (clingo), concretization: --fresh (build everything fresh), concretizer:unify:when_possible, spack load",No,No,No,"AMD, Intel","NVIDIA Volta, NVIDIA Ampere, AMD MI200/250X","gcc, Intel Compilers, Intel OneAPI, NVHPC, LLVM, AMD ROCmCC (amdclang/hipcc)",Somewhat important,Very Important,Not Important,Somewhat important,Not Important,Slightly Important,Slightly Important,Critical,Slightly Important,Not Important,Somewhat important,Slightly Important,Slightly Important,Not Important,Not Important,Not Important,,No,Yes,"Documentation, Slack, GitHub Issues, GitHub Discussions",Weekly,Probably not,Probably not,Good,Excellent,Good,Excellent,"1) Build big, pseudo-comprehensive compute stacks/environments, 2) build environments (SW stacks) to support difficult to install applications.",Its magic.," Compilers. Compiler still occupy this ""sort of, but not quite a package..."" state, and there are some other ambiguities. For example, it would be nice to specify compiler flags for a compiler class (eg, gcc:all:CFLAGS=-fPIC). This, especially for environments -- and double-especially for ""containerize"", where we want to capitalize on `install_missing_compilers: true`. For example, I believe PETSc will -- at least for some configurations, require `-fPIC` (it will fail a configuration (and possibly produce subsequent runtime errors) without `-fPIC`). To my knowledge, however, there is no way to specify in the environment configuration to 1) install gcc, and 2) set these flags...
",,,,
3/7/2023 12:14:01,DevOps/SRE,University HPC/Computing Center,United States,No,No,,"C, Python, Perl","HPC / Simulation, AI/ML, Computer Science Research, Bioinformatics",Word of mouth,5,"Packages, Core Features, Slack Discussions, Issues","develop, custom fork","RHEL 7, RHEL 8",100 - 200,"3.6, 3.8, 3.9","spack load, Spack environments, Environment Modules (TCL modules)","Environments, Module generation, build-env (debug a build), spack-python (Python scripting), Externals in packages.yaml, Concretization preferences in packages.yaml, New `require:` directive in packages.yaml, New concretizer (clingo), concretization: --reuse (default), concretization: --fresh (build everything fresh), concretizer:unify:true (concretize together), concretizer:unify:when_possible, Multiple build systems in one package, Git versions, spack test, spack load",Yes -- several,Yes,No,"AMD, Intel","NVIDIA Ampere, NVIDIA Hopper","gcc, Intel Compilers, NVHPC, LLVM, nvcc (CUDA)",Somewhat important,Very Important,Very Important,Somewhat important,Slightly Important,Slightly Important,Slightly Important,Slightly Important,Somewhat important,Slightly Important,Slightly Important,Slightly Important,Slightly Important,Slightly Important,Slightly Important,Somewhat important,,Maybe,No,"Documentation, Slack, Coworkers, GitHub Issues, GitHub Discussions, Source Code",Monthly,Probably not,Probably not,Good,Excellent,Good,Good,Supporting a variety of researchers and their software installation needs,complexity wrangling,"separate build deps, compilers as dependencies",,,,
3/7/2023 12:27:49,System Administrator,"DOE/Office of Science Lab (e.g., ORNL/ANL/LBL)",United States,Yes,No,,"Python, sh/bash/other shell script",HPC / Simulation,Used at my site,0,"Packages, Core Features, Slack Discussions, Issues","develop, custom fork",SLES15,10 - 100,3.6,Lmod,"Environments, Module generation, Chaining (upstreams), Stacks (matrices in environments), build-env (debug a build), spack external find, Externals in packages.yaml, Concretization preferences in packages.yaml, New `require:` directive in packages.yaml, New concretizer (clingo), concretization: --reuse (default), concretization: --fresh (build everything fresh), concretizer:unify:when_possible, Git versions, spack test",Yes -- just one,Yes,No,"AMD, Intel","NVIDIA Ampere, Intel Xe (Ponte Vecchio)","gcc, Intel OneAPI, NVHPC, nvcc (CUDA), CCE (Cray Compilers)",Somewhat important,Slightly Important,Very Important,Slightly Important,Not Important,Not Important,Slightly Important,Somewhat important,Somewhat important,Very Important,Critical,Slightly Important,Slightly Important,Critical,Somewhat important,Slightly Important,,Maybe,Yes,"Documentation, Slack, Coworkers, GitHub Issues, Source Code",Daily,Probably not,Probably not,Excellent,Excellent,OK,Good,Software deployment at ALCF. I build software for the user environment and make it available via Lmod.,Automatically resolving and building dependencies is the most significant benefit of Spack - that alone makes it worth using.,"Getting Spack to reuse and rebuild dependencies in the right ways can be difficult, especially if certain dependencies are built with a different toolchain than other dependencies or the root spec.

Some Spack packages are poorly written, and this is especially an issue for packages without maintainers. 

`spack test` can be hit-or-miss since every test is implemented independently, meaning there is lots of variation in, say, how MPI is called; additionally, since `spack load` is used and it does not integrate well with environment modules, the environment may be incorrect while running tests.",Add more tools or configuration options for packages. A few ideas include: automatically adding a default compiler to external specs; automating configuration for upstreamed packages (currently this consists only of spack config prefer-upstream and this PR: https://github.com/spack/spack/pull/35770); and expanding the `reuse` functionality to allow for flexibility in use cases.,,I greatly appreciate all the work you do!,
3/7/2023 12:55:09,Research Software Engineer (RSE),"DOE/Office of Science Lab (e.g., ORNL/ANL/LBL)",United Kingdom,Yes,No,,"C, C++, Python","HPC / Simulation, Computer Science Research",Word of mouth,5,"Packages, Slack Discussions, GitHub Discussions, Issues",develop,"Ubuntu 22, Cray XC","> 1,000",3.1,Spack environments,"Environments, spack external find, Externals in packages.yaml, Concretization preferences in packages.yaml, New concretizer (clingo), concretization: --reuse (default), concretization: --fresh (build everything fresh), concretizer:unify:true (concretize together), Git versions, spack load",Yes -- several,No,No,"AMD, Intel, ARM",No GPUs,"gcc, LLVM",Very Important,Slightly Important,Somewhat important,Very Important,Not Important,Not Important,Not Important,Slightly Important,Critical,Very Important,Somewhat important,Very Important,Somewhat important,Somewhat important,Very Important,Not Important,,No,No,"Documentation, Slack, Coworkers, GitHub Issues, GitHub Discussions",Weekly,Probably,Probably,OK,Excellent,Good,Excellent,"On my laptop I work use the develop branch, which I update from time to time (usually when I have contributed a package and it has been merged). I have one environment per project I work on (with a spack.yaml at the root of the project). On supercomputers I tend to have one spack installation per project along with an environment file, and nothing in my ~/.spack folder, to be 100% sure that concretization is not influenced by anything external. I also try to fix the spack version to a specific release, to make the build more reproducible.",,Not always understanding why clingo made certain decisions and how to force it to make other decisions.,,,,
3/7/2023 13:06:53,Research Software Engineer (RSE),Company,United States,No,No,,"Fortran, C, C++, Python","HPC / Simulation, AI/ML, Bioinformatics, High Energy Physics, Compiler Testing, Visualization",Used at my site,5,Packages,"0.17, 0.19, develop","RHEL 8, Ubuntu 20, Ubuntu 22, Windows Subsystem for Linux (WSL), Cray EX","500-1,000","3.8, 3.9, 3.10, 3.11","spack load, Environment Modules (TCL modules), Containers","Mirrors (spack mirror create / air gap support), spack external find, Cray PE support (spack external read-cray-manifest), Externals in packages.yaml, Concretization preferences in packages.yaml, New concretizer (clingo), spack develop, Multiple build systems in one package, spack load",Yes -- several,No,No,"AMD, Intel, ARM","NVIDIA Volta, NVIDIA Ampere, NVIDIA Hopper, NVIDIA Other","gcc, NVHPC, LLVM, nvcc (CUDA), CCE (Cray Compilers)",Very Important,Very Important,Somewhat important,Very Important,Not Important,Somewhat important,Somewhat important,Very Important,Somewhat important,Critical,Critical,Very Important,Very Important,Somewhat important,Somewhat important,Somewhat important,,No,Yes,"Documentation, Slack, Coworkers, GitHub Issues, GitHub Discussions",Weekly,Probably not,Probably,Good,Good,Good,Good,,,,,,,
3/7/2023 13:37:43,DevOps/SRE,Company,Canada,No,No,,"C++, Python",satellite image processing / Geomatics / HPC,Search,3,"Packages, GitHub Discussions, Issues",0.17,CentOS 7,10 - 100,3.6,"Spack environments, spack view","Environments, Module generation, spack containerize, Mirrors (spack mirror create / air gap support), spack external find, Concretization preferences in packages.yaml, New concretizer (clingo), concretization: --reuse (default), concretizer:unify:true (concretize together), concretizer:unify:when_possible, Multiple build systems in one package, spack load, spackbot (@spackbot fix style; @spackbot rebuild everything, etc.)",No,Yes,No,"AMD, Intel","NVIDIA T4, NVIDIA Ampere",gcc,Somewhat important,Somewhat important,Critical,Not Important,Not Important,Critical,Critical,Slightly Important,Critical,Slightly Important,Slightly Important,Not Important,Slightly Important,Not Important,Not Important,Somewhat important,,Maybe,No,"Documentation, Slack, GitHub Issues, GitHub Discussions",Weekly,Probably not,Probably not,Excellent,Excellent,Excellent,Excellent,"install GIS software and python packages in spack environments, amounting to 300ish packages including dependencies.  ","Currently working on breaking free from Linux distro we're using (Centos7) in running our image processing software stack. This became important last year since Centos was discontinued. Also, we always wanted to separate our computational software from distro packages.","Installing qgis, torch, tensorflow, gcc from binary cache.","not sure if this is implemented yet, but seperating concretization of build dependencies from others might be useful. In my company  we use python and 100s of python packages to do image processing. If there is any room for improving Spack way of installing and usage of 100s of python packages in spack environments, it would be great to look into it.",,Keep up the great work!,
3/7/2023 14:02:02,DevOps/SRE,Other Public Research Lab,United States,No,No,"Joint Effort for Data assimilation Integration (JEDI), Unified Forecast System (UFS)","Fortran, C, C++, Python, sh/bash/other shell script",HPC / Simulation,"Presentations, Tutorials, Word of mouth",2,"Packages, Core Features, Slack Discussions, Issues","0.19, develop, custom fork","macOS 12 (Monterey), macOS 11 (Ventura), RHEL 8, CentOS 8, Rocky 8, Ubuntu 20, Ubuntu 22, SLES12, SLES15, Cray XC",200 - 500,"3.8, 3.9, 3.10","Lmod, Environment Modules (TCL modules), spack view, Containers","Environments, Module generation, spack containerize, Chaining (upstreams), Stacks (matrices in environments), Mirrors (spack mirror create / air gap support), Build caches (making binary packages), build-env (debug a build), spack external find, Cray PE support (spack external read-cray-manifest), Externals in packages.yaml, Concretization preferences in packages.yaml, New `require:` directive in packages.yaml, New concretizer (clingo), concretization: --reuse (default), concretizer:unify:true (concretize together), concretizer:unify:when_possible, Multiple build systems in one package, Git versions",Yes -- several,Yes,No,"AMD, Intel, IBM Power, ARM",No GPUs,"gcc, Intel Compilers, Intel OneAPI, LLVM, CCE (Cray Compilers)",Slightly Important,Very Important,Somewhat important,Somewhat important,Not Important,Somewhat important,Somewhat important,Very Important,Very Important,Critical,Slightly Important,Critical,Somewhat important,Somewhat important,Very Important,Slightly Important,,Maybe,Yes,"Documentation, Slack, GitHub Issues, GitHub Discussions, Source Code",Weekly,Probably not,"Yes, definitely!",Good,Excellent,Good,Good,"We use spack to create large, unified environments for JEDI and the various models it needs to work with (UFS, MPAS, GEOS, Unified Model, ...). We build on many HPCs, on macOS and Linux boxes, and we use the same setup to create Docker containers (spack containerize) that then get converted to Singularity containers. We use the containers for public releases and CI testing.

To streamline our processes, we created our own custom extension into the spack command (spack stack ...) and we maintain our own fork of spack that we use to quickly get pull requests merged. We are making efforts to synchronize our fork with the upstream repo in a regular basis.",It's a lot easier to create consistent environments across a number of platforms and then auto-generated the modules to load everything that is needed.,"The rapid changes to it. Every time we pull in the updates from spack authoritative (usually every 3 months), the builds on half of our HPCs don't work anymore and we spend about a week or two just fixing those.","Fewer changes that break existing setups. It's hard to maintain backward compatibility because it makes progress slower and harder, but it's important. It would be nice if there was a way for external contributors to set up automated tests of spack builds using the authoritative spack repository and integrate this into the spack CI system.",,A big thank you for all you do! It's a huge job and you've achieved a lot.,
3/7/2023 14:37:35,Computational Scientist,"DOE/Office of Science Lab (e.g., ORNL/ANL/LBL)",United States,Yes,No,,"C, C++, Python","HPC / Simulation, AI/ML, Computer Science Research, Compiler Testing",Word of mouth,3,"Packages, Slack Discussions, GitHub Discussions, Issues",0.19,"macOS 12 (Monterey), RHEL 8, Ubuntu 20, Alpine, Cray EX",10 - 100,"3.9, 3.10","spack load, Lmod, Custom script or env vars","Environments, Module generation, Chaining (upstreams), build-env (debug a build), Cray PE support (spack external read-cray-manifest), Distributed Builds (srun/mpirun spack install), New concretizer (clingo), spack develop, concretization: --reuse (default)",Yes -- several,My site has a front-end or extension to Spack,spack manager,"AMD, Intel, IBM Power, ARM","NVIDIA Volta, NVIDIA Ampere, AMD MI200/250X, Intel Xe (Ponte Vecchio)","gcc, Intel OneAPI, LLVM, AMD ROCmCC (amdclang/hipcc), CCE (Cray Compilers), armclang",Very Important,Not Important,Somewhat important,Not Important,Not Important,Not Important,Not Important,Not Important,Critical,Very Important,Not Important,Not Important,Not Important,Not Important,Not Important,Not Important,"Separate spack into 3 projects: package.py files, installed package ""database"", install machinery",No,No,"Documentation, Slack, GitHub Issues, GitHub Discussions, spack help, Source Code, Email",Monthly,Probably not,Probably,Good,Excellent,Good,Good,"I'd like to use spack more, but ending up spending way too much time crafting packages.yaml files.  This effectively covers up problems in the underlying package.py stack. Changes to package.py files often send me running for the hills (hence my retreat to spack manager).","Spack has helped me build an HPC development environment on my laptop that aids porting to my HPC center (openblas, blas++, lapack++, openmpi, hipsycl).","I end up maintaining many clones of spack because it doesn't install like a python package. I'd use spack as a python module if only I had spack.find(), spack.spec(), and spack.install() functions.  Doing this requires separating spack's source code from its database state (and ideally from $HOME as well).  A separate database would allow network interaction - fixing another issue I have, parallel builds don't work on my filesystem (locking is broken). [https://github.com/spack/spack/issues/31154]",Move spack state outside of spack source tree.  Let it be configurable by environment variables (they're not always bad).  Document those environment variables.,,The spack team is great! Keep up the good work!,
3/7/2023 15:49:39,"Several of the above: DevOps, Systems Architect, User Support, Manager",University HPC/Computing Center,United States,No,No,,"Fortran, C, Python, Julia, Perl, R, sh/bash/other shell script, Ruby, Lua",I am indirectly involved in almost all of the above in my role.,Discovered via search many years ago,5,"Packages, Core Features, Documentation, Slack Discussions, GitHub Discussions, Issues, Mailing List","develop, custom fork","CentOS 7, Rocky 8, Windows Subsystem for Linux (WSL), Gentoo","> 1,000","3.6, 3.7, 3.8, 3.9, 3.10","spack load, Spack environments, Lmod, spack view, Containers, Custom script or env vars","Environments, Module generation, spack containerize, Stacks (matrices in environments), Mirrors (spack mirror create / air gap support), Build caches (making binary packages), Public build caches at https://binaries.spack.io, spack external find, Externals in packages.yaml, Concretization preferences in packages.yaml, New `require:` directive in packages.yaml, New concretizer (clingo), spack develop, concretization: --reuse (default), concretization: --fresh (build everything fresh), concretizer:unify:true (concretize together), concretizer:unify:when_possible, Multiple build systems in one package, Git versions, spack load, spackbot (@spackbot fix style; @spackbot rebuild everything, etc.), spack diff (compare two specs)",Yes -- several,Yes,No,"AMD, Intel","NVIDIA T4, NVIDIA Volta, NVIDIA Ampere, NVIDIA Hopper, NVIDIA Other","gcc, Intel OneAPI, NVHPC, LLVM, nvcc (CUDA)",Critical,Somewhat important,Very Important,Somewhat important,Slightly Important,Slightly Important,Slightly Important,Somewhat important,Critical,Very Important,Very Important,Very Important,Very Important,Somewhat important,Critical,Critical,,Maybe,Yes,"Documentation, Slack, GitHub Issues, GitHub Discussions, spack help, Source Code",Weekly,No,Probably not,Good,Good,OK,Good,"Software for a diverse user base is distributed. I use the concept of stacks, hopefully with a self-consistent set of dependencies. New stacks are released roughly twice per year. Our cluster is multi-architecture so I build each stack for each micro-architecture. I have a deployment script that manipulates module files and creates symlinks of the packages to ""hide"" the details, including the hashes, from the user base. This scheme allows the queue system to select the correct micro-architecture for the node type even if the user passed the environment of the submit host to the job. I am currently experimenting with creating spack environments for packages and generating module files for those, with the goal of reducing the amount of modules that have to be loaded, particularly for R and Python packages that require autoloading of modules.",Taking advantage of spack recipes so that I do not have to develop every build recipe for our site.,Lack of consistency in how package recipes are implemented is one. The biggest by far though is the seemingly unpredictable results from clingo.,"Maybe have clingo query whether it is okay to use a version or variant other than what was specified. The 'require' attribute helps but can sometimes cause clingo to fail to concretize. I guess the biggest thing would be to reduce the number of times one is surprised by a clingo decision, producing those WTF moments.",My user base will eventually ask for some.,I am overall happy with Spack.,
3/7/2023 16:12:50,System Administrator,University HPC/Computing Center,Australia,No,No,,"Python, Perl, R, sh/bash/other shell script","HPC / Simulation, AI/ML, Bioinformatics",Search,4,Issues,0.19,"RHEL 7, RHEL 8",10 - 100,3.9,Environment Modules (TCL modules),"Module generation, spack-python (Python scripting), Externals in packages.yaml, concretization: --reuse (default), concretization: --fresh (build everything fresh), Variant/flag propagation (++, ~~, ==), Git versions",No,Yes,No,"AMD, Intel","NVIDIA T4, NVIDIA Volta, NVIDIA Other","gcc, Intel Compilers, PGI, LLVM",Very Important,Very Important,Very Important,Very Important,Somewhat important,Very Important,Very Important,Very Important,Very Important,Very Important,Very Important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,,No,Yes,"Documentation, Slack, Mailing List",Weekly,Probably,Probably,Good,Good,Good,Good,Reduce the time and complexity of software installation,Improve the speed of software installation,,,More astrophysicists packages,,
3/7/2023 17:14:37,Research scientist and software engineer,"DOE/NNSA Lab (e.g., LLNL/LANL/SNL)",United States,No,No,,"C++, Python, Javascript, Java, C#, Swift, Lua, Common Lisp","HPC / Simulation, High Energy Physics, Web applications",Word of mouth,0,No,develop,"macOS 12 (Monterey), Ubuntu 20, Windows 10",1 - 10,3.9,"spack load, Spack environments, Containers, Custom script or env vars","Environments, spack external find, spack load",No,No,No,"AMD, Intel, ARM",No GPUs,"gcc, Intel Compilers, LLVM",Very Important,Slightly Important,Not Important,Not Important,Not Important,Critical,Critical,Not Important,Somewhat important,Somewhat important,Not Important,Not Important,Not Important,Not Important,Not Important,Not Important,More Windows package definitions,Maybe,Yes,"Documentation, Slack, Source Code",Weekly,Probably,Probably not,Good,Good,Good,Good,"As an LLNL physicist and software engineer, I extend and maintain physics-based software tools to analyze global threats. I use Spack to handle the builds of dependencies for our tools.","Spack offered a way to unify the way we build our tools across Ubuntu, macOS, and Windows.",Package download failures and build failures.,Get Windows packages on more equal footing with macOS and Linux.,No.,I love the principle of Spack. Using it has a sharp but reasonable learning curve.,
3/7/2023 22:28:42,Scientist/Researcher,Other Public Research Lab,Croatia,No,Yes,,"C, C++, Python, Julia, Rust, sh/bash/other shell script",HPC / Simulation,Word of mouth,1,No,develop,"CentOS 8, Ubuntu 22, Debian 10",200 - 500,3.1,spack load,"concretization: --reuse (default), concretization: --fresh (build everything fresh), Variant/flag propagation (++, ~~, ==), spack load",Yes -- just one,No,No,"AMD, Intel, ARM","NVIDIA Ampere, AMD MI200/250X, Intel Xe (Ponte Vecchio)","gcc, Intel Compilers, Intel OneAPI, NVHPC, LLVM, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA), armclang",Critical,Critical,Somewhat important,Somewhat important,Slightly Important,Somewhat important,Somewhat important,Critical,Very Important,Critical,Critical,Slightly Important,Somewhat important,Slightly Important,Slightly Important,Not Important,,No,Yes,"Documentation, Slack, GitHub Issues, Source Code",Weekly,Probably not,"Yes, definitely!",OK,Good,Good,Excellent,,,,,,,
3/8/2023 0:22:24,Research Software Engineer (RSE),University HPC/Computing Center,Germany,No,No,,"C, C++",Performance tools,Presentation,5,"Packages, Slack Discussions, GitHub Discussions, Issues",develop,"macOS 12 (Monterey), RHEL 7, CentOS 7, Rocky 8",1 - 10,"3.9, 3.10, 3.11","spack load, Lmod","E4S build caches (https://e4s.io), spack external find, spack develop",No,No,No,"AMD, Intel, IBM Power, ARM","NVIDIA Volta, NVIDIA Ampere, AMD MI100, AMD MI200/250X","gcc, Intel OneAPI, NVHPC, LLVM, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA), CCE (Cray Compilers)",Very Important,Very Important,Very Important,Somewhat important,Somewhat important,Slightly Important,Slightly Important,Somewhat important,Very Important,Critical,Critical,Slightly Important,Slightly Important,Slightly Important,Slightly Important,Not Important,,No,Yes,"Documentation, Slack, GitHub Issues, Email",Weekly,Probably not,Probably not,Good,Good,Good,Good,Package maintainer for Score-P and its dependencies,,,,,,
3/8/2023 6:25:18,System Administrator,Other Public Research Lab,Canada,No,No,,"Python, sh/bash/other shell script","HPC / Simulation, AI/ML",Presentation,1,No,0.18,"Ubuntu 18, Ubuntu 20",10 - 100,"2.7, 3.6, 3.8",Environment Modules (TCL modules),Module generation,No,No,No,Intel,"NVIDIA T4, NVIDIA Ampere, NVIDIA Other","gcc, LLVM, nvcc (CUDA)",Not Important,Not Important,Not Important,Not Important,Not Important,Slightly Important,Not Important,Not Important,Not Important,Critical,Slightly Important,Not Important,Not Important,Not Important,Not Important,Not Important,,No,No,"Documentation, Mailing List",Monthly,No,No,OK,OK,Good,Good,"Install package, have it generate TCL Module, have users use it.",,"Spack upgrades: what is the ""official"" / recommended way to go from using 0.18 to 0.19 to (eventual) 0.20? Do I do a new 'git clone' in a new directory? Do a 'git pull' in the current tree and change the branch? Other? ","Spack upgrades (0.18->0.19->0.20). There should be a section in the docs explaining the ""official"" way to do this: either a new 'git clone' on the new branch, a 'git pull' with  a change in the branch on the current directory structure, other (?). ",,,
3/8/2023 8:12:58,Software Developer,University HPC/Computing Center,Switzerland,No,No,,C++,HPC / Simulation,Word of mouth,2,"Packages, Slack Discussions, Issues",develop,NixOS,100 - 200,3.11,spack build-env,"Chaining (upstreams), build-env (debug a build), spack external find, Externals in packages.yaml, Concretization preferences in packages.yaml, New `require:` directive in packages.yaml, New concretizer (clingo), spack develop, concretization: --reuse (default), concretization: --fresh (build everything fresh), Git versions, spackbot (@spackbot fix style; @spackbot rebuild everything, etc.)",Yes -- just one,Yes,No,"AMD, Intel, ARM","NVIDIA Volta, NVIDIA Ampere, NVIDIA Hopper, AMD MI200/250X, AMD MI300","gcc, NVHPC, LLVM, nvcc (CUDA), CCE (Cray Compilers), armclang",Somewhat important,Very Important,Very Important,Very Important,Not Important,Not Important,Slightly Important,Slightly Important,Somewhat important,Slightly Important,Somewhat important,Not Important,Slightly Important,Not Important,Slightly Important,Slightly Important,,Maybe,No,"Documentation, Slack, Coworkers, GitHub Issues, Source Code",Monthly,Probably not,Probably not,Good,Excellent,Good,Good,,,,,,,
3/8/2023 19:13:16,Research Software Engineer (RSE),Company,United States,Yes,No,,"C, C++, Python, Rust, sh/bash/other shell script","HPC / Simulation, Computer Science Research, Visualization",Presentation,2,"Packages, Core Features, Documentation, Slack Discussions, GitHub Discussions, Issues",develop,"CentOS 7, CentOS 8, Ubuntu 18, Ubuntu 20, Fedora, Cray XC, Cray EX, Windows 10, Windows 11","> 1,000","3.7, 3.8, 3.9","spack load, Spack environments, Lmod, spack build-env, Containers","Environments, Module generation, spack containerize, Chaining (upstreams), Stacks (matrices in environments), Mirrors (spack mirror create / air gap support), Build caches (making binary packages), Public build caches at https://binaries.spack.io, E4S build caches (https://e4s.io), build-env (debug a build), spack ci (GitLab pipeline generation -- yourself, not on our CI), spack-python (Python scripting), spack external find, Cray PE support (spack external read-cray-manifest), Externals in packages.yaml, Concretization preferences in packages.yaml, New `require:` directive in packages.yaml, New concretizer (clingo), concretization: --reuse (default), concretization: --fresh (build everything fresh), concretizer:unify:true (concretize together), concretizer:unify:when_possible, Git versions, spack test, spack load, spackbot (@spackbot fix style; @spackbot rebuild everything, etc.)",Yes -- several,Yes,No,"AMD, Intel, IBM Power, ARM","NVIDIA T4, NVIDIA Ampere, AMD MI200/250X, Intel Xe (Ponte Vecchio)","gcc, Intel OneAPI, NVHPC, LLVM, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA), IBM XL, CCE (Cray Compilers), armclang",Very Important,Critical,Very Important,Somewhat important,Not Important,Not Important,Very Important,Very Important,Very Important,Somewhat important,Critical,Somewhat important,Very Important,Somewhat important,Critical,Slightly Important,,Maybe,No,"Documentation, Slack, Coworkers, GitHub Issues, GitHub Discussions, spack help, Source Code",Daily,No,Probably not,Good,Excellent,OK,Good,Early access deployments at exascale computing facilities.,"The docs have been super helpful, but the community willing to answer questions in slack has been the biggest help.",Configuring externals on bespoke systems is one of the biggest pain points (for me). There isn't enough configuration control over environments/build systems of dependents from external package definitions. There is also no support for selecting compatible externals without duplicating the package.py dependencies in the external spec.,Improved support for externals.,"Not sure right now, but I will add them when I need them!",The Spack community is great and I am very happy to be a part of it!,
3/9/2023 12:42:00,Research Software Engineer (RSE),"DOE/Office of Science Lab (e.g., ORNL/ANL/LBL)",United States,Yes,No,,"C++, Python, Perl, sh/bash/other shell script",High Energy Physics,Birds-of-a-feather (BOF) at conference,5,"Packages, Core Features, Slack Discussions, Issues","develop, custom fork","RHEL 7, AlmaLinux 9","500-1,000","3.6, 3.9","spack load, Spack environments, spack build-env, UPS","Environments, Module generation, Chaining (upstreams), Mirrors (spack mirror create / air gap support), Build caches (making binary packages), build-env (debug a build), spack-python (Python scripting), Externals in packages.yaml, Concretization preferences in packages.yaml, New `require:` directive in packages.yaml, New concretizer (clingo), spack develop, concretization: --reuse (default), concretizer:unify:true (concretize together), concretizer:unify:when_possible, Multiple build systems in one package, Variant/flag propagation (++, ~~, ==), Git versions, spack test, spack load",Yes -- several,Yes,SpackDev,"AMD, Intel, ARM",No GPUs,"gcc, Intel Compilers, Intel OneAPI, LLVM",Somewhat important,Critical,Critical,Very Important,Slightly Important,Slightly Important,Somewhat important,Somewhat important,Very Important,Very Important,Somewhat important,Very Important,Very Important,Somewhat important,Somewhat important,Not Important,Better decoupling between buildcache and local Spack recipes to increase buildcache hits and decrease recompilations when Spack used to produce binary package differs from local,Maybe,No,"Documentation, Slack, Coworkers, GitHub Issues, spack help, Source Code",Weekly,Probably not,Probably not,Excellent,Excellent,OK,Excellent,Developing tools and workflows to replace previous packaging/build infrastructure for multiple small to medium-sized HEP experiments and Fermilab as an entity.,Using Clingo / Slack discussions and responsiveness of devs,Handling of compiler/C++ standard/library selection in deep and wide stacks; unnecessary rebuilds of C/pure Python/non-compiled packages due to compiler differences; buildcache/local Spack recipe mismatches causing [errors](https://github.com/spack/spack/issues/33227) and/or unwanted rebuilds; inability to specify test-only build dependencies (e.g. googletest).,Compilers-as-dependencies and better handling of build and test-only build dependencies.,PRs will be incoming!,Keep going! Onward!,
3/9/2023 21:48:16,Manager,Research Infrastructure Group based at University,Australia,No,No,Australian Earth-System Simulator (ACCESS-NRI),"Fortran, Python",Climate Modelling (HPC+analysis),Search,0,Slack Discussions,0.19,Rocky 8,10 - 100,3.1,Still testing best methods,"Environments, Module generation, spack containerize, Chaining (upstreams), Stacks (matrices in environments), Build caches (making binary packages), build-env (debug a build), spack external find, Externals in packages.yaml, Concretization preferences in packages.yaml, Distributed Builds (srun/mpirun spack install), spack develop, Multiple build systems in one package, Variant/flag propagation (++, ~~, ==), spack load",Yes -- just one,Yes,No,"AMD, Intel",No GPUs,"gcc, Intel Compilers, Intel OneAPI",Critical,Somewhat important,Somewhat important,Not Important,Not Important,Somewhat important,Very Important,Very Important,Very Important,Somewhat important,Slightly Important,Critical,Slightly Important,Slightly Important,Very Important,Not Important,Split packages out of main repo,Maybe,Yes,"Documentation, Slack, Coworkers, GitHub Issues, spack help, Source Code, search",Daily,Probably not,Probably,Excellent,OK,Good,Good,"We are converting our climate modelling builds to spack. We need to deploy these builds to users and make them easy to discover and user. We need to provide easy ways for developers to build the models when testing new features, with the ability to test different versions of dependencies easily.",Ability to build exactly the same spec on HPC as GitHub runner for CI.,"The E4S cache bug meant we had to create our own buildcache, but OpenStack wasn't a supported cache end-point","Move from slack to a proper forum. Long form answers that can be found and added to, rather than the same questions asked repeatedly. Stackoverflow has problems, but think of the value it adds. A huge amount of the problem in using spack is specificity. It helps enormously if I can find uses cases that look like mine that I can adapt. Anything that would help to share this kind of knowledge would be a huge boost. ",Nothing I can think of.,"Thanks for providing an awesome tool. You have added come great features, but I think they need to be improved and bedded down better before trying to add heaps more.",
3/10/2023 0:00:44,Scientist/Researcher,University research group,Italy,No,No,,"C++, Python","HPC / Simulation, Visualization",Word of mouth,5,Packages,0.19,"RHEL 7, CentOS 7, AlmaLinux 8, Debian 11, Arch, openSuSE",200 - 500,"3.6, 3.8, 3.10","spack load, Spack environments, Environment Modules (TCL modules)","Environments, Module generation, build-env (debug a build), spack external find, Externals in packages.yaml, Concretization preferences in packages.yaml, New concretizer (clingo), concretization: --reuse (default), concretization: --fresh (build everything fresh), Git versions, spack load",No,Yes,No,"AMD, Intel, RISC-V","NVIDIA Ampere, Intel Xe (Ponte Vecchio), No GPUs","gcc, LLVM, nvcc (CUDA)",Somewhat important,Critical,Very Important,Very Important,Not Important,Not Important,Slightly Important,Very Important,Somewhat important,Very Important,Slightly Important,Slightly Important,Not Important,Slightly Important,Slightly Important,Not Important,,Maybe,Yes,"Documentation, Coworkers, GitHub Issues, Source Code",Weekly,Probably not,"Yes, definitely!",Good,OK,Good,Excellent,Build support packages for the developemtn of scientific software in HPC environment,spack environments,managing generated packages and making them available in a cohesive way,get compilers as proper dependencies,,,
3/10/2023 5:34:15,User Support Staff,University HPC/Computing Center,United Kingdom,No,No,,"Python, sh/bash/other shell script","HPC / Simulation, Statistics / Data Analysis, AI/ML, Computer Science Research, Bioinformatics, High Energy Physics, (all applications that our users request we install on HTC and HPC)",Word of mouth,0,No,0.19,RHEL 7,10 - 100,3.11,Environment Modules (TCL modules),"Environments, Module generation, Stacks (matrices in environments), Build caches (making binary packages), Git versions, spack diff (compare two specs), We're just starting so this will grow.",Yes -- just one,No,No,"AMD, Intel",NVIDIA Ampere,"gcc, Intel Compilers, Intel OneAPI, PGI, NVHPC, LLVM, nvcc (CUDA), NAG",Very Important,Critical,Slightly Important,Somewhat important,Slightly Important,Not Important,Not Important,Slightly Important,Somewhat important,Somewhat important,Very Important,Slightly Important,Not Important,Slightly Important,Slightly Important,Not Important,,Maybe,No,"Documentation, Slack, GitHub Issues",Monthly,Probably not,No,OK,Good,Good,Good,"I am part of a team that supports multiple general-use university clusters. We have one HTC cluster, one HPC cluster, plus some more HPC clusters for specific domains. We are working out how to replace our current software stack (bash buildscripts) with Spack. We expect users to be interacting with environment modules and not with Spack itself in most circumstances. (We need compilers and libraries built with Spack to work when building arbitrary non-Spack code that wants to check LD_LIBRARY_PATH etc!). We intend to have a local binary cache which clusters with the same CPU types can use. We are only going to be using release versions of Spack, with a specific update schedule when there are new releases. (We need Spack itself to be reproducible and have a defined release as well as the software that is being built with it). At the moment we're still working out how to create our whole software stack in Spack. We are looking at views in order to manage Python bundles and R additional dependency bundles. We want users to be able to load one module that gives them a certain version of python+lots of packages (without creating an incredibly long PYTHONPATH), and the same for R. We'll have multiple of these for newer versions of python and R. ",,"Working out how it all fits together, and which of the more esoteric bits of setup are the ones we need for our purposes. The docs are good as far as they go, but there are always additional details that can be easier found in Slack, or the important thing you're missing is on another page. 

The missing LD_LIBRARY_PATH in generated compiler modules was a problem - and we were told the compiler *should* work anyway, but in practice trying to compile something with a Makefile with the default created module could not find compiler libraries it needed and so could not build a fairly simple program. Our users do build a lot of software themselves too, some written by them, some not and often are not experts in things that can go wrong with build systems - they are just following the build instructions on GitHub and our central packages need to not cause them additional difficulties.

It was hard to find what and if there were specific things we should be setting for GPU builds when we have multiple different eras of Nvidia GPUs and know that sometimes a certain Compute Capability is required by some software.

How to find why a given spec is wanting to use a specific package looks like it will be something that will be a pain point in future!",,,,
3/10/2023 9:20:31,Software Developer,University HPC/Computing Center,Switzerland,No,No,,"Python, sh/bash/other shell script","HPC / Simulation, Statistics / Data Analysis, AI/ML, Compiler Testing, Embedded Systems",Used at my site,2,"Packages, Slack Discussions, Issues","0.15, 0.18, 0.19, develop","RHEL 7, RHEL 8, Ubuntu 20","500-1,000","3.8, 3.10","Spack environments, Lmod","Environments, Module generation, Chaining (upstreams), Stacks (matrices in environments), Mirrors (spack mirror create / air gap support), build-env (debug a build), spack-python (Python scripting), Externals in packages.yaml, Concretization preferences in packages.yaml, New `require:` directive in packages.yaml, Distributed Builds (srun/mpirun spack install), New concretizer (clingo), concretization: --reuse (default), concretizer:unify:when_possible, spack diff (compare two specs)",Yes -- several,My site has a front-end or extension to Spack,,"Intel, ARM",NVIDIA Volta,"gcc, Intel Compilers, Intel OneAPI, LLVM, nvcc (CUDA)",Very Important,Not Important,Not Important,Very Important,Not Important,Not Important,Not Important,Very Important,Critical,Critical,Very Important,Somewhat important,Very Important,Slightly Important,Slightly Important,Not Important,"spack show differences in concretized packages before installation. The problem arises when I try to see why the concretization (of the full stack at our university) shows 5 different hdf5 and another number of py-numpy (example). When this happens, I would like to know why is spack installing so many hdf5 packages. And then, once I know why spack has decided to install 5 different hdf5 packages, I want to play with versions and options to try to reduce the number of packages installed more than once. Sometimes, its easy to see that a package requires (for example) hdf5@version, but in other cases, that is not so easy. For me it is important to get information that can help me to reduce the number of installed packages to a realistic number. Good luck :)",Maybe,Yes,"Documentation, Slack, GitHub Issues, spack help, Source Code",Weekly,No,No,Good,Excellent,Good,Good,"We use spack to deploy (jenkins) the software stack at our university (EPFL, CH), the same stack on three clusters with different intel architectures. We have developed a spack extension.","The require directive seems very interesting, although haven't tested it yet so much, since our spack in prod is still v0.18.","Understand why spack installs so many packages (2x, 3x, 4x and more). This is detailed in a previous question.",Help with the problem already mentioned above.,No,No,
3/10/2023 10:32:05,Scientist/Researcher,"DOE/NNSA Lab (e.g., LLNL/LANL/SNL)",United States,Yes,No,,"C, C++",HPC / Simulation,Presentation,5,Packages,"0.18, 0.19, develop","macOS 10.15 (Catalina), RHEL 7, RHEL 8",10 - 100,"3.8, 3.9, 3.10, 3.11","Spack environments, Lmod, spack view, Containers","Environments, Module generation, spack containerize, Stacks (matrices in environments), spack external find, Externals in packages.yaml, Concretization preferences in packages.yaml, New concretizer (clingo), spack develop, concretization: --reuse (default), concretizer:unify:when_possible, spack test, spack diff (compare two specs)",Yes -- just one,No,uberenv,"AMD, Intel, IBM Power, ARM","NVIDIA Ampere, NVIDIA Hopper, AMD MI200/250X, AMD MI300, Intel Xe (Ponte Vecchio)","gcc, Intel Compilers, Intel OneAPI, PGI, LLVM, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA), IBM XL, CCE (Cray Compilers), Fujitsu Compilers, armclang",Very Important,Somewhat important,Slightly Important,Slightly Important,Not Important,Somewhat important,Somewhat important,Slightly Important,Very Important,Very Important,Critical,Slightly Important,Somewhat important,Very Important,Somewhat important,Somewhat important,,Maybe,Yes,"Documentation, Slack, Coworkers, GitHub Issues",Monthly,Probably not,"Yes, definitely!",Good,Excellent,Good,Excellent,We use spack to install external dependencies for developing our library and CI testing,Building containers for CI testing with GitHub actions and installing dependencies at HPC facilities for CI testing,"Setting up projections in spack stacks seems be broken (or at least it was the last time I tried it). It would be nice to have a way to include a package in a projection if it does not have a particular variant. For example, some packages have an int64 variant for using 32- or 64-bit integers but other packages don't have is variant (i.e., they can support both without a configuration option). I'd like to project based on ~int64 or +int64 in the spec and include packages without the int64 variant in both projections.

Speaking of the int64 variant, having packages use the same variant names would be helpful e.g., int64 vs ilp64 for 64-bit integers. ",,,,
3/10/2023 11:12:50,Research Software Engineer (RSE),University HPC/Computing Center,United States,No,No,,"Fortran, C, C++, Python, sh/bash/other shell script",HPC / Simulation,Used at my site,2,"Slack Discussions, Issues","0.17, 0.18, 0.19",RHEL 7,10 - 100,"3.6, 3.8",Lmod,"Environments, Module generation, Stacks (matrices in environments), Mirrors (spack mirror create / air gap support), Externals in packages.yaml, Concretization preferences in packages.yaml, concretizer:unify:true (concretize together), concretizer:unify:when_possible, spack diff (compare two specs)",No,No,No,"AMD, Intel","NVIDIA Volta, NVIDIA Ampere, AMD MI200/250X","gcc, Intel Compilers, Intel OneAPI, NVHPC, LLVM, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA)",Not Important,Very Important,Slightly Important,Not Important,Not Important,Not Important,Not Important,Slightly Important,Not Important,Slightly Important,Somewhat important,Not Important,Not Important,Not Important,Not Important,Not Important,cuda and rocm as providers (like mpi and lapack are treated currently),"Yes, I'd like to attend",No,"Documentation, Slack, spack help",Weekly,No,No,OK,Excellent,Good,Good,"We maintain the software stack on the campus-wide HPC clusters.  Upon software requests from users, we add new software to our spack stacks.  If Spack builds fail, we install manually",Automatically resolving and installing dependencies,"We have frequent issues building graphical applications.  Packages like qt fail a lot, and we have trouble isolating the causes.  ","* If cuda and rocm were providers, we could add them to our modulefile hierarchy and really simply things.  
* There's also some info in the Tutorial docs that is very hard to find or missing in the actual docs.  It would be nice to harmonize those a bit better",,"Given the magnitude of what you're trying to accomplish, Spack is incredible.  ",
3/11/2023 18:30:52,Research Software Engineer (RSE),"DOE/Office of Science Lab (e.g., ORNL/ANL/LBL)",United States,Yes,No,,"C, C++, sh/bash/other shell script","HPC / Simulation, Computer Science Research, Compiler Testing",Birds-of-a-feather (BOF) at conference,5,Packages,"develop, E4S latest","RHEL 8, SLES15, Cray XC, Cray EX",10 - 100,3.6,"Lmod, Environment Modules (TCL modules)","Module generation, spack external find, Cray PE support (spack external read-cray-manifest), Externals in packages.yaml, New concretizer (clingo), spack develop, Git versions, spack test",No,No,No,"AMD, Intel, IBM Power","NVIDIA Volta, NVIDIA Ampere, AMD MI100, AMD MI200/250X, Intel Xe (Ponte Vecchio)","gcc, Intel Compilers, Intel OneAPI, PGI, NVHPC, LLVM, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA), CCE (Cray Compilers)",Slightly Important,Somewhat important,Not Important,Somewhat important,Not Important,Not Important,Not Important,Somewhat important,Somewhat important,Very Important,Very Important,Not Important,Slightly Important,Somewhat important,Somewhat important,Not Important,"Separate the package repo from the Spack infrastructure repo!!!

The current coupling means users of a stable Spack release are generally stuck using packages that can be 6+ months behind the latest package release. Spack's #1 job is to efficiently deliver software, and introducing a 6 month delay in software deployment degrades the primary responsibility of Spack in an unacceptable manner. 
Real end users don't primarily care about the latest bells and whistles you might add that require changing the package DSL if it means they are forced to use obsolete packages. They care about getting the current release of packages and not ones artificially aged by the current arrangement which is designed to be ideal for Spack maintainers instead of ideal for end users.",No,No,"Documentation, GitHub Discussions",Monthly,Probably not,Probably not,Bad,OK,Good,Bad,I maintain Spack packages for the software we develop.,,"Support for Cray platforms has been embarrassingly poor for years. Cray EX systems are literally the entire DOE exascale landscape, so making Spack work seamlessly out-of-the-box on these systems is critical.","Separate the package repo from the Spack infrastructure repo!!!

The current coupling means users of a stable Spack release are generally stuck using packages that can be 6+ months behind the latest package release. Spack's #1 job is to efficiently deliver software, and introducing a 6 month delay in software deployment degrades the primary responsibility of Spack in an unacceptable manner. 
Real end users don't primarily care about the latest bells and whistles you might add that require changing the package DSL if it means they are forced to use obsolete packages. They care about getting the current release of packages and not ones artificially aged by the current arrangement which is designed to be ideal for Spack maintainers instead of ideal for end users.",,,
3/13/2023 9:40:57,SysAdmin/DevOps/Software Developer,"DOE/Office of Science Lab (e.g., ORNL/ANL/LBL)",United States,No,No,,"C, Python, sh/bash/other shell script","HPC / Simulation, Visualization",Tutorial,2,"Packages, Slack Discussions, Issues","0.16, 0.19","CentOS 7, Rocky 8, rocky9",10 - 100,"2.7, 3.9","Environment Modules (TCL modules), Containers","Environments, Module generation, Public build caches at https://binaries.spack.io",Yes -- several,Yes,No,Intel,NVIDIA Volta,"gcc, Intel Compilers, Intel OneAPI",Critical,Critical,Critical,Somewhat important,Somewhat important,Very Important,Critical,Somewhat important,Somewhat important,Critical,Somewhat important,Somewhat important,Very Important,Very Important,Very Important,Somewhat important,,Maybe,Yes,"Documentation, Slack, Coworkers, Source Code",Monthly,Probably,Probably not,OK,OK,Good,OK,using it to provide modules on our cluster,download all the stuff,upgrades and version changes make it so i can upgrade.,"consider long term support of a cluster.  have a default scope somehow.  when i'm building a cluster environment, i dont want my user configs mucking with the directory
",,,
3/13/2023 10:02:27,Scientist/Researcher,"DOE/Office of Science Lab (e.g., ORNL/ANL/LBL)",United States,No,No,,"C++, Python",High Energy Physics,Word of mouth,3,Packages,"0.17, 0.18","RHEL 7, RHEL 8, CentOS 7, CentOS 8, Ubuntu 18",200 - 500,"3.8, 3.10",spack load,"spack containerize, Chaining (upstreams), Build caches (making binary packages), build-env (debug a build), New concretizer (clingo), spack develop, concretization: --reuse (default), Variant/flag propagation (++, ~~, ==), Git versions, spack load, spack diff (compare two specs)",Yes -- several,No,No,"AMD, Intel, ARM",No GPUs,"gcc, LLVM",Slightly Important,Very Important,Very Important,Somewhat important,Not Important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Slightly Important,Very Important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,,"Yes, I'd like to attend",Yes,"Documentation, Source Code",Weekly,Probably not,Probably,Good,Good,Good,Good,We use spack for our software release. We have a spack instance with the external packages our release needs. This is updated two times a year and is used as an upstream to  another spack instance which contains only our own packages. The latter instance is recreated daily and kept around for two weeks. This setup allows us to simply delete the directory when it's time to clean up older nightly releases.,,"Having to build the compiler from source when staring a new installation from scratch. This is troublesome when working inside minimalist containers where the system does not have any compilers installed. It would be great to have an easy way (maybe it already exists, but just need to be better publicized in documentation) to install compilers using a public build-cache.",Public build-cache for major versions of compilers for popular platforms. This will help avoid building compilers from source and eliminate the need of system compilers when using minimalist container images.,,,
3/13/2023 10:05:42,Research Software Engineer (RSE),Other Public Research Lab,Germany,No,Yes,,Python,"HPC / Simulation, Statistics / Data Analysis, Computer Science Research",Used at my site,1,"Packages, Documentation, Slack Discussions, Issues","0.18, 0.19, develop, custom fork","Debian 11, Fedora",10 - 100,3.9,Lmod,"Environments, Module generation, spack containerize, Chaining (upstreams), Stacks (matrices in environments), Mirrors (spack mirror create / air gap support), Build caches (making binary packages), Externals in packages.yaml, concretizer:unify:when_possible, Variant/flag propagation (++, ~~, ==), spackbot (@spackbot fix style; @spackbot rebuild everything, etc.)",Yes -- several,Yes,No,Intel,NVIDIA Ampere,"gcc, Intel Compilers, Intel OneAPI, nvcc (CUDA)",Critical,Somewhat important,Somewhat important,Critical,Very Important,Somewhat important,Somewhat important,Very Important,Critical,Slightly Important,Very Important,Very Important,Critical,Slightly Important,Very Important,Critical,,"Yes, I'd like to present something!",Yes,"Documentation, Slack, Source Code",Weekly,Probably,Probably,Horrible,Good,OK,Good,,,,,,,
3/13/2023 10:09:48,Scientist/Researcher,University research group,United States,Yes,No,,"C, C++, Python, sh/bash/other shell script, Java",Computer Science Research,Used at my site,5,"Packages, Slack Discussions, GitHub Discussions, Issues, Tools/integrations",develop,"RHEL 8, CentOS 8, Ubuntu 20, Ubuntu 22, Fedora, Windows Subsystem for Linux (WSL), Cray XT",10 - 100,"3.6, 3.10","spack load, Spack environments, Lmod, Environment Modules (TCL modules), Containers","Environments, Chaining (upstreams), Mirrors (spack mirror create / air gap support), Build caches (making binary packages), E4S build caches (https://e4s.io), spack external find, Externals in packages.yaml, Concretization preferences in packages.yaml, New concretizer (clingo), spack test, spack load, spackbot (@spackbot fix style; @spackbot rebuild everything, etc.), spack diff (compare two specs)",No,No,No,"AMD, Intel, IBM Power, ARM","NVIDIA T4, NVIDIA Volta, NVIDIA Ampere, NVIDIA Hopper, AMD MI100, AMD MI200/250X, AMD MI300, Intel Xe (Ponte Vecchio)","gcc, Intel Compilers, Intel OneAPI, NVHPC, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA), CCE (Cray Compilers)",Very Important,Critical,Very Important,Somewhat important,Slightly Important,Somewhat important,Slightly Important,Somewhat important,Somewhat important,Very Important,Very Important,Somewhat important,Somewhat important,Critical,Somewhat important,Slightly Important,,Maybe,Yes,"Documentation, Slack, Coworkers, GitHub Issues, GitHub Discussions, spack help, Source Code",Monthly,Probably not,Probably not,OK,Excellent,Good,Good,Build/chain dependencies in a Spack environment on a variety of systems (compilers/accelerators) and then run Spack or external tests on top level packages.,"With Spack I was able to easily work around broken/missing compilers, MPI, etc on my institution's local cluster.",Spack tests are too fragile in different run environments and a PR is a lot of overhead for a platform-specific test fix. Spack's ability to auto-configure its environment for detected compilers/externals is sometimes shaky.,I think your current roadmap looks great.,,Keep up the good work!,
3/13/2023 10:31:38,Software Developer,"DOE/NNSA Lab (e.g., LLNL/LANL/SNL)",United States,Yes,No,,"C++, Python, sh/bash/other shell script","HPC / Simulation, Visualization",Used at my site,2,Packages,develop,"macOS 10.15 (Catalina), macOS 11 (Big Sur), RHEL 7, RHEL 8, CentOS 8, Ubuntu 18, Ubuntu 20, Ubuntu 22, Debian 9, Debian 10, Debian 11",10 - 100,3.7,Spack environments,Environments,No,Yes,No,"AMD, Intel, IBM Power","NVIDIA Volta, NVIDIA Ampere, NVIDIA Hopper, AMD MI200/250X, AMD MI300","gcc, LLVM, AMD ROCmCC (amdclang/hipcc)",Critical,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Slightly Important,Slightly Important,Very Important,Very Important,Somewhat important,Very Important,Somewhat important,Very Important,Very Important,Critical,Somewhat important,,Maybe,Yes,"Documentation, Slack, Coworkers",Monthly,Probably not,Probably not,Good,Good,Good,Good,I use spack to build my software package. I submit PRs for updates to my package and sometimes dependent packages. Getting the PR to pass is painful and takes weeks. The log getting cut off at 2Mb means my failure messages are usually not present. Trying to debug this doesn't appear to be documented. Eventually I get my PR accepted either by rerunning the CI multiple times or help if I have a real failure.,Getting my software running on the Frontier EAS.,"The CI is flakey and nearly impossible for me to debug because of the 2Mb worth of output in the log, which means I can't see the error and determine why it failed or timed out.",Improve the CI.,Pretty complete.,,
3/13/2023 11:18:38,Computational Scientist,Other Public Research Lab,Germany,No,No,,"Fortran, C, Python, Rust","HPC / Simulation, Statistics / Data Analysis, Visualization",Word of mouth,3,"Packages, Issues","0.19, custom fork","macOS 12 (Monterey), macOS 11 (Ventura), Debian 11",10 - 100,"3.8, 3.9, 3.10","spack load, Lmod","Environments, Module generation, Mirrors (spack mirror create / air gap support), spack external find, Externals in packages.yaml, Concretization preferences in packages.yaml, New concretizer (clingo), spack develop, concretization: --reuse (default), concretizer:unify:true (concretize together), concretizer:unify:when_possible, Variant/flag propagation (++, ~~, ==), spack test, spack load, spack diff (compare two specs)",Yes -- just one,Yes,No,"AMD, Intel, ARM","NVIDIA Ampere, NVIDIA Other, AMD MI100","gcc, Intel Compilers, Intel OneAPI, nvcc (CUDA)",Somewhat important,Not Important,Not Important,Slightly Important,Very Important,Slightly Important,Slightly Important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Slightly Important,Slightly Important,Very Important,Slightly Important,Slightly Important,,No,Yes,"Documentation, Slack, GitHub Issues, spack help, Source Code",Monthly,Probably not,No,Good,Good,Good,Excellent,Setting up software on HPC system. Supporting multiple microarchitectures. Create lmod module files.,,,,,,
3/13/2023 12:18:23,Software Developer,"DOE/Office of Science Lab (e.g., ORNL/ANL/LBL)",United States,No,,,,data acquisition,Used at my site,1,No,0.18,"CentOS 7, CentOS 8, AlmaLinux 9",10 - 100,3.1,"spack load, Spack environments","Environments, Chaining (upstreams), Stacks (matrices in environments), build-env (debug a build), spack develop, spack load",Yes -- several,No,No,"AMD, Intel, ARM",No GPUs,gcc,Slightly Important,Slightly Important,Slightly Important,Somewhat important,Not Important,Not Important,Not Important,Slightly Important,Slightly Important,Slightly Important,Slightly Important,Not Important,Slightly Important,Not Important,Not Important,Slightly Important,,Maybe,Yes,"Documentation, Coworkers",Weekly,Probably not,Probably,OK,OK,OK,OK,"setup different readonly spack environments, then add a user specific/writable repo/install area",,seems SPACK_ROOT could be an ordered list of roots.,,,,
3/13/2023 12:31:06,Scientist/Researcher,Other Public Research Lab,France,No,No,,Fortran,HPC / Simulation,Word of mouth,2,"Packages, Issues",develop,"macOS 12 (Monterey), RHEL 7, RHEL 8, CentOS 7, CentOS 8, Ubuntu 18, Ubuntu 20, Ubuntu 22",100 - 200,"2.7, 3.11","spack load, Environment Modules (TCL modules), spack view","Environments, Module generation, Mirrors (spack mirror create / air gap support), spack external find, Externals in packages.yaml, Concretization preferences in packages.yaml, New concretizer (clingo), spack develop, spack load",Yes -- several,No,No,"AMD, Intel","NVIDIA Ampere, NVIDIA Hopper","gcc, Intel Compilers, Intel OneAPI, NVHPC, AMD ROCmCC (amdclang/hipcc)",Very Important,Somewhat important,Very Important,Slightly Important,Not Important,Not Important,Slightly Important,Very Important,Very Important,Somewhat important,Very Important,Not Important,Slightly Important,Not Important,Slightly Important,Not Important,,No,Yes,"Documentation, GitHub Issues",Weekly,Probably,No,Excellent,Good,OK,Good,"I often get stuck with clingo that wants to use packages I erroneously declared as external but which do not exist. I would like to tell clingo : OK, restart from the white sheet !",Fast compiling my code on various platforms ; spack makes sure my swig libs are compatible with my perl env. Spack compiles Hypre smoothly.,clingo gets mad !,Better traceback - clingo demystified,"No, I made PRs for all of them, it was easy - thanks so much to reviewers !","spack : I dreamt of it, you did it ! THANKS !",
3/13/2023 13:17:32,Manager,University HPC/Computing Center,United States,No,No,AMD HPC User Forum Application Build and Profiling groups,"Fortran, C, C++, Python, Go, Perl, R, sh/bash/other shell script, MATLAB","HPC / Simulation, Computer Science Research, Bioinformatics, High Energy Physics, Compiler Testing, Visualization",Tutorial,2,"Packages, Slack Discussions, Issues","0.17, develop",Rocky 8,100 - 200,3.8,"Lmod, Containers","Module generation, spack containerize, Build caches (making binary packages), spack develop",Yes -- several,No,,"AMD, Intel","NVIDIA Volta, NVIDIA Ampere","gcc, Intel Compilers, Intel OneAPI, NVHPC, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA)",Slightly Important,Very Important,Somewhat important,Slightly Important,Not Important,Very Important,Very Important,Somewhat important,Somewhat important,Slightly Important,Somewhat important,Somewhat important,Slightly Important,Somewhat important,Very Important,Slightly Important,"Reconfigure spack for more natural use in CI/CD pipelines. Focus on streamlined repeatable builds, integration with batch system build runners, dividing workloads for related builds wileretainign consitency of build products, etc.",No,Yes,"Documentation, Slack, Mailing List, Coworkers, Source Code",Weekly,Probably not,Probably not,Good,Good,OK,OK,"We need to maintain hundreds of software products for our university HPC cluster researchers. Spack has been helpful, but not a silver bullet, in this task.",Improved success rate of builds.,"It is extremely difficult to migrate versions or to repeat our builds when moving to a new operatind sytem, adding an architecture to our cluster, etc. It takes a major amount of work -- but before Spack, it was even harder to do this.","Really streamline sets of builds to facilitate updating Slack itself, reinstalling a full set of applications, and supporting ongoing maintenance rather than just one-time installation of large software collections.","Really there ought to be a simple tool to allow configuration of a target environment and list the applications, including versions, compiler choices, and MPI choices that can be built for that environment.",Thank you for this work.,
3/13/2023 15:02:06,DevOps/SRE,University HPC/Computing Center,Switzerland,No,Yes,,"C++, Python",HPC / Simulation,Used at my site,5,"Packages, Slack Discussions, Issues, Tools/integrations","0.18, 0.19, develop",Cray EX,"> 1,000","3.6, 3.7, 3.8, 3.9, 3.10","spack load, Spack environments, Environment Modules (TCL modules)","Environments, Module generation, Chaining (upstreams), Mirrors (spack mirror create / air gap support), Build caches (making binary packages), spack external find, Externals in packages.yaml, Concretization preferences in packages.yaml, New `require:` directive in packages.yaml, New concretizer (clingo), concretization: --reuse (default), concretization: --fresh (build everything fresh), concretizer:unify:true (concretize together), concretizer:unify:when_possible, Multiple build systems in one package",Yes -- just one,No,No,"AMD, Intel, ARM","NVIDIA Ampere, NVIDIA Hopper, AMD MI200/250X, AMD MI300, NVIDIA Grace-Hopper","gcc, NVHPC, LLVM, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA), armclang",Not Important,Very Important,Critical,Slightly Important,Slightly Important,Not Important,Slightly Important,Somewhat important,Slightly Important,Somewhat important,Very Important,Not Important,Not Important,Not Important,Slightly Important,Not Important,,"Yes, I'd like to present something!",Yes,"Slack, GitHub Issues, I ask Harmen on Slack ;)",Daily,Probably not,No,Excellent,Excellent,Good,Good,"I develop tooling that supports building programming environments using spack, and deploying them as squashfs images. This relies heavily on spack environments, in order to isolate the build environments.",Spack repos just working ;) Build caches and environments too.,"Spack is very stateful - it will look for information and configuration in locations like $HOME/.spack by default. These should be opt in.
Also, the gpg key policy on spack build caches makes no sense.
I would like to enable workflows to push to build caches, where if the workflow has write access to the cache, it is implied that it can write without having to mess around with managing a secret key.",Tooling around spack build caches.,,"Keep up the great work everyone. Spack is a great tool because it handles the vast majority cases elegantly, and allows me to handle the annoying corner cases with a minimum of hacking!",
3/13/2023 17:22:08,DevOps/SRE,Cloud Provider,Switzerland,No,No,,Python,"HPC / Simulation, AI/ML",Word of mouth,5,Issues,"develop, custom fork","CentOS 7, AlmaLinux 8",100 - 200,"2.7, 3.9","Spack environments, Environment Modules (TCL modules)","Environments, Module generation, Mirrors (spack mirror create / air gap support), Build caches (making binary packages), spack ci (GitLab pipeline generation -- yourself, not on our CI), spack-python (Python scripting), Externals in packages.yaml, Concretization preferences in packages.yaml, New `require:` directive in packages.yaml, Distributed Builds (srun/mpirun spack install), New concretizer (clingo), concretization: --fresh (build everything fresh), concretizer:unify:when_possible, Multiple build systems in one package, spack load",Yes -- just one,Yes,No,"AMD, Intel, ARM","NVIDIA Volta, NVIDIA Ampere, NVIDIA Hopper","gcc, Intel Compilers, Intel OneAPI, NVHPC, nvcc (CUDA)",Very Important,Critical,Not Important,Not Important,Critical,Slightly Important,Slightly Important,Not Important,Critical,Not Important,Not Important,Very Important,Somewhat important,Slightly Important,Very Important,Slightly Important,Cross-distro buildcache e.g. via Gentoo prefix like EESSI/Compute Canada do with easybuild,Maybe,No,"Documentation, GitHub Issues, Source Code",Weekly,Probably not,Probably,Good,Good,OK,Good,Creating build cache for variety of VM types and packages,"module generation, environments",environment builds not efficient; makefile-based builds run into spack db file locking issues,multi-distro buildcache e.g. using Gentoo prefix like EESSI,,,
3/13/2023 22:11:53,Scientist/Researcher,"DOE/NNSA Lab (e.g., LLNL/LANL/SNL)",United States,Yes,No,,"C++, Python, sh/bash/other shell script","HPC / Simulation, AI/ML, Computer Science Research",Used at my site,5,"Packages, Core Features, Slack Discussions, Issues","0.19, develop","macOS 10.15 (Catalina), RHEL 7, RHEL 8, Cray EX","> 1,000","3.7, 3.9, 3.10","Spack environments, spack build-env, spack view","Environments, Chaining (upstreams), Mirrors (spack mirror create / air gap support), Build caches (making binary packages), build-env (debug a build), spack ci (GitLab pipeline generation -- yourself, not on our CI), spack external find, Cray PE support (spack external read-cray-manifest), Externals in packages.yaml, Concretization preferences in packages.yaml, New concretizer (clingo), concretizer:unify:true (concretize together), Variant/flag propagation (++, ~~, ==), Git versions, spack load",No,Yes,No,"AMD, Intel, IBM Power, ARM","NVIDIA Volta, NVIDIA Ampere, NVIDIA Hopper, AMD MI200/250X, AMD MI300, Intel Xe (Ponte Vecchio)","gcc, Intel OneAPI, NVHPC, LLVM, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA), CCE (Cray Compilers), Fujitsu Compilers",Very Important,Critical,Critical,Very Important,Not Important,Somewhat important,Somewhat important,Not Important,Critical,Critical,Critical,Somewhat important,Very Important,Somewhat important,Critical,Somewhat important,,Maybe,Yes,"Documentation, Slack, Coworkers, GitHub Issues, GitHub Discussions, Source Code, Email",Weekly,Probably,"Yes, definitely!",Good,Excellent,Good,Good,Scalable Deep Learning software tool development,The development team,Instability on each upgrade to the existing repositories and dependency tree.,Stability and speed of concretization,,,
3/13/2023 23:27:38,User Support Staff,University HPC/Computing Center,Switzerland,No,No,,"C++, Python, sh/bash/other shell script, cuda, hip",HPC / Simulation,Used at my site,2,Issues,6408b51,"macOS 11 (Ventura), Ubuntu 22, Debian 11, Amazon Linux, Cray XC, Cray EX",10 - 100,3.6,"spack load, Lmod, Environment Modules (TCL modules)","Module generation, Build caches (making binary packages), Cray PE support (spack external read-cray-manifest), Externals in packages.yaml, spack load",Yes -- several,No,No,"AMD, ARM","NVIDIA Hopper, NVIDIA Other, AMD MI200/250X","gcc, NVHPC, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA), CCE (Cray Compilers)",Very Important,Somewhat important,Somewhat important,Somewhat important,Critical,Very Important,Critical,Very Important,Critical,Somewhat important,Very Important,Very Important,Slightly Important,Slightly Important,Very Important,Slightly Important,,Maybe,No,Coworkers,Monthly,Probably not,Probably,OK,OK,OK,Good,https://github.com/eth-cscs/stackinator,,,,,,
3/13/2023 23:55:11,System Administrator,University HPC/Computing Center,Switzerland,No,No,,"Fortran, C++, Python, Julia, Perl, R, sh/bash/other shell script","HPC / Simulation, AI/ML, Bioinformatics",It's been so long I can't remember,5,"Packages, Slack Discussions, GitHub Discussions, Issues",0.19,RHEL 8,"500-1,000",3.6,Lmod,"Environments, Module generation, spack containerize, Chaining (upstreams), Stacks (matrices in environments), spack-python (Python scripting), Externals in packages.yaml, Concretization preferences in packages.yaml, New concretizer (clingo), concretization: --fresh (build everything fresh), concretizer:unify:when_possible, Git versions, spack diff (compare two specs)",Yes -- several,Yes,,AMD,NVIDIA Ampere,"gcc, Intel Compilers, LLVM",Very Important,Very Important,Slightly Important,Slightly Important,Not Important,Not Important,Not Important,Very Important,Somewhat important,Somewhat important,Slightly Important,Slightly Important,Somewhat important,Somewhat important,Slightly Important,Not Important,Separation of the builtin package repository from the core to allow for updates without causing massive reconcretisation. ,No,No,"Documentation, Slack, GitHub Issues, GitHub Discussions, Source Code",Weekly,Probably not,Probably not,Excellent,Excellent,OK,Excellent,Spack environments (via homemade jinja template tooling) for defining the software environment and lmod generation/customisation ,spack install wrf,"The inclusion of the built in package repository as it makes pulling bug fixes and improvements from upstream a lot more complicated. I know there are good reasons for this but still! 

The reuse behaviour of the concretiser is, on paper great, but in the real world it's non deterministic as it depends on which variant/version happened to be built first and on subsequent runs it isn't clear which variant it will choose.",See above + clearer documentation for integrating projections and modules.,,Keep up the good work!,
3/14/2023 0:46:00,Performance Engineer,Cloud Provider,Germany,No,No,,"Python, sh/bash/other shell script",HPC / Simulation,Word of mouth,3,"Packages, Core Features, Documentation, Slack Discussions, Issues, Tools/integrations",develop,"Ubuntu 20, Amazon Linux","> 1,000","2.7, 3.7, 3.8","spack load, Environment Modules (TCL modules)","Module generation, Build caches (making binary packages), Public build caches at https://binaries.spack.io, build-env (debug a build), spack external find, Externals in packages.yaml, Concretization preferences in packages.yaml, New `require:` directive in packages.yaml, Distributed Builds (srun/mpirun spack install), New concretizer (clingo), spack develop, concretization: --fresh (build everything fresh), Multiple build systems in one package, spack load, spackbot (@spackbot fix style; @spackbot rebuild everything, etc.)",Yes -- just one,No,No,"AMD, Intel, ARM","NVIDIA Volta, NVIDIA Ampere, NVIDIA Hopper","gcc, Intel OneAPI, NVHPC, nvcc (CUDA), armclang",Somewhat important,Critical,Critical,Very Important,Slightly Important,Critical,Critical,Somewhat important,Somewhat important,Not Important,Slightly Important,Not Important,Not Important,Not Important,Not Important,Slightly Important,Separate releases of Spack core and packages.,"Yes, I'd like to attend",Yes,"Documentation, Slack, GitHub Issues, Source Code",Weekly,Probably,"Yes, definitely!",Excellent,Good,OK,Good,I define spack configs and specs for our users to poick up once they build their clusters.,Onboarding new applications is fast as usually someone has already built a package. Adapting packages to our needs is much faster than starting from scratch.,"It is really hard to predict how the concretizer will select dependencies. I would like to see an easier way of saying ""<provider> = package"", e.g. `spack install gromacs mpi=mpich fftw=intel-oneapi-mkl`.",Separate releases of Spack core and packages.,,,
3/14/2023 1:02:20,Research Software Engineer (RSE),University HPC/Computing Center,Switzerland,No,No,,"Fortran, C++, Python",HPC / Simulation,Word of mouth,4,"Packages, Issues",develop,"Arch, Cray XC","500-1,000","3.9, 3.11","spack load, Spack environments, spack build-env, spack view","Environments, Chaining (upstreams), build-env (debug a build), spack external find, Cray PE support (spack external read-cray-manifest), Externals in packages.yaml, Concretization preferences in packages.yaml, New `require:` directive in packages.yaml, New concretizer (clingo), spack develop, concretization: --reuse (default), concretization: --fresh (build everything fresh), concretizer:unify:true (concretize together), Variant/flag propagation (++, ~~, ==), spack load, spack diff (compare two specs)",Yes -- several,No,,"AMD, Intel, ARM","NVIDIA Ampere, NVIDIA Hopper, AMD MI200/250X, AMD MI300","gcc, NVHPC, LLVM, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA), CCE (Cray Compilers), armclang",Very Important,Critical,Slightly Important,Slightly Important,Slightly Important,Slightly Important,Slightly Important,Very Important,Somewhat important,Somewhat important,Somewhat important,Very Important,Critical,Somewhat important,Somewhat important,Critical,,"Yes, I'd like to attend",Yes,"Documentation, Slack, Coworkers, GitHub Issues, GitHub Discussions",Weekly,Probably,"Yes, definitely!",Good,Excellent,Good,Excellent,,,,,,,
3/14/2023 1:11:52,Research Software Engineer (RSE),University HPC/Computing Center,Switzerland,No,Yes,,C++,HPC / Simulation,Used at my site,0,No,"0.19, develop","Amazon Linux, SLES15, Cray XC",10 - 100,3.1,"Spack environments, Lmod","Environments, Module generation, Build caches (making binary packages), Externals in packages.yaml, New concretizer (clingo), concretizer:unify:true (concretize together)",Yes -- just one,No,No,"AMD, ARM","NVIDIA Ampere, NVIDIA Hopper, AMD MI200/250X, AMD MI300","gcc, nvcc (CUDA)",Critical,Somewhat important,Somewhat important,Very Important,Very Important,Critical,Critical,Not Important,Critical,Critical,Critical,Not Important,Not Important,Not Important,Not Important,Not Important,,No,Yes,"Documentation, Coworkers",Weekly,Probably not,Probably not,OK,Excellent,Good,Good,Building the dependencies for the development of HPC simulation apps.,Being able to build whatever I need. Example: building OpenMPI on a Cray system to diagnose bugs in CrayMPI. That sort of thing would be more painful without Spack.,Slow concretization times.,Faster concretization and more build caches.,,,
3/14/2023 3:31:22,Research Software Engineer (RSE),University HPC/Computing Center,Switzerland,No,No,,"C++, Python",HPC / Simulation,Presentation,4,"Packages, Core Features, Issues",develop,"macOS 11 (Big Sur), Ubuntu 20, Cray XC, Cray EX","> 1,000","3.6, 3.9, 3.10, 3.11","Spack environments, spack build-env, spack view","Environments, Chaining (upstreams), build-env (debug a build), spack-python (Python scripting), spack external find, Externals in packages.yaml, Concretization preferences in packages.yaml, New `require:` directive in packages.yaml, New concretizer (clingo), spack develop, concretization: --reuse (default), concretization: --fresh (build everything fresh), concretizer:unify:true (concretize together), concretizer:unify:when_possible, Git versions",Yes -- just one,No,No,"AMD, Intel, ARM","NVIDIA Ampere, NVIDIA Hopper, NVIDIA Other, AMD MI200/250X","gcc, NVHPC, LLVM, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA)",Very Important,Slightly Important,Somewhat important,Somewhat important,Slightly Important,Not Important,Not Important,Slightly Important,Critical,Very Important,Very Important,Slightly Important,Somewhat important,Not Important,Slightly Important,Not Important,,No,Yes,"Documentation, Slack, Coworkers, Source Code, Harmen Stoppels",Weekly,Probably,No,Good,Good,Good,Good,"Development on different machines, with multiple variants for the same set of packages",Managing and compiling dependencies (and keep them organised),Constraining the concretization step (and debugging it) [require: improved a bit the thing],,,,
3/14/2023 3:36:14,Research Software Engineer (RSE),University HPC/Computing Center,Switzerland,No,No,,C++,HPC / Simulation,Used at my site,4,"Packages, Issues",develop,"macOS 10.15 (Catalina), macOS 11 (Big Sur), macOS 12 (Monterey), Ubuntu 20, Ubuntu 22, Cray XC, Cray EX","> 1,000","3.6, 3.8, 3.9, 3.10","spack load, Spack environments, spack build-env, Custom script or env vars","Environments, spack containerize, build-env (debug a build), spack external find, Externals in packages.yaml, Concretization preferences in packages.yaml, New `require:` directive in packages.yaml, New concretizer (clingo), spack develop, concretization: --reuse (default), concretization: --fresh (build everything fresh), concretizer:unify:true (concretize together), spack load, spack diff (compare two specs)",No,No,No,"AMD, Intel, ARM","NVIDIA Ampere, NVIDIA Hopper, NVIDIA Other, AMD MI200/250X","gcc, NVHPC, LLVM, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA)",Very Important,Slightly Important,Very Important,Somewhat important,Slightly Important,Not Important,Not Important,Very Important,Critical,Very Important,Very Important,Not Important,Somewhat important,Not Important,Somewhat important,Not Important,,No,No,"Documentation, Coworkers, spack help",Weekly,Probably,No,OK,OK,Good,Good,"software development: environment + install only dependencies + build-env
CI: environment + install only dependencies + install (to create a docker container used for the testings)",compiling and managing the dependencies of the software I'm developing,"debugging environments concretizations
cleanup old/unused installed packages ",Speed up environment concretizations,,,
3/14/2023 4:14:33,System Administrator,Other Public Research Lab,United Kingdom,No,No,,"C, Python, sh/bash/other shell script",HPC / Simulation,Word of mouth,2,No,0.19,Rocky 8,"> 1,000",3.1,Environment Modules (TCL modules),"Module generation, concretization: --reuse (default), Git versions",No,Yes,No,"AMD, Intel","NVIDIA Volta, NVIDIA Ampere",gcc,Very Important,Very Important,Slightly Important,Slightly Important,Very Important,Very Important,Very Important,Somewhat important,Somewhat important,Very Important,Very Important,Somewhat important,Somewhat important,Somewhat important,Slightly Important,Not Important,,"Yes, I'd like to attend",No,spack help,Weekly,Probably not,Probably,Good,Good,Good,Good,,,,,,,
3/14/2023 6:59:28,User Support Staff,"DOE/Office of Science Lab (e.g., ORNL/ANL/LBL)",United States,Yes,No,,"Python, sh/bash/other shell script",HPC / Simulation,Word of mouth,4,"Documentation, GitHub Discussions, Issues",0.19,"SLES15, Cray XC",200 - 500,"3.7, 3.8","spack load, spack view","Environments, Chaining (upstreams), Stacks (matrices in environments), Build caches (making binary packages), spack ci (GitLab pipeline generation -- yourself, not on our CI), Externals in packages.yaml, Concretization preferences in packages.yaml, New concretizer (clingo), spack test, spack load",No,No,,AMD,NVIDIA Ampere,"gcc, NVHPC, CCE (Cray Compilers)",Very Important,Somewhat important,Slightly Important,Slightly Important,Not Important,Somewhat important,Slightly Important,Slightly Important,Very Important,Very Important,Very Important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Slightly Important,,No,Yes,"Documentation, Slack, Coworkers, GitHub Issues, spack help, Source Code",Weekly,No,Probably not,Good,Excellent,Good,Good,,spack ci has helped us with deployment of E4S stack which is especially important when building large software stacks. The spack install process is parallelized into multiple gitlab jobs and automatically pushed to buildcache which is great.,,,,,
3/14/2023 15:27:53,User Support Staff,University HPC/Computing Center,United States,No,No,,"Python, R, sh/bash/other shell script","HPC / Simulation, Statistics / Data Analysis, AI/ML, Bioinformatics",Word of mouth,1,"Slack Discussions, Issues","0.17, 0.19",RHEL 8,10 - 100,3.6,Lmod,"Environments, Module generation, Concretization preferences in packages.yaml, New `require:` directive in packages.yaml, concretization: --reuse (default), Variant/flag propagation (++, ~~, ==)",Yes -- several,No,No,Intel,"NVIDIA Volta, NVIDIA Ampere",gcc,Very Important,Somewhat important,Not Important,Not Important,Not Important,Very Important,Somewhat important,Somewhat important,Somewhat important,Not Important,Somewhat important,Not Important,Not Important,Somewhat important,Slightly Important,Slightly Important,,Maybe,Yes,"Documentation, Slack, GitHub Issues",Monthly,Probably not,Probably not,Good,Good,Good,Good,"I work for general HPC support at our university.  Our Med unit support team is understaffed.  We help them keep up with requests for software installations by maintaining a Bioinformatics specific spack instance, and install packages upon request from our Med unit support team.  I recently installed and configured a separate instance of spack for installation of more general packages, specifically those that have lots of dependencies, are more complex, etc.",,"Modules not being created automatically when using the ""blacklist_implicits"" option.  Getting R and Python packages to work while navigating dependencies and trying to keep implicitly built modules hidden without having to do a lot of manual editing of the modules.yaml file (this might be because I am not doing things in the most efficient or intended way).",Make it easier to use R and Python packages without having a ton of visible module files (dependencies) and doing so without needing manual updates to the modules.yaml file with each new install.  This might be partly a problem of user error or misunderstanding.,,,
3/14/2023 18:27:42,Research Software Engineer (RSE),"DOE/Office of Science Lab (e.g., ORNL/ANL/LBL)",United States,Yes,Yes,,"C++, Python","HPC / Simulation, Statistics / Data Analysis, AI/ML, High Energy Physics",Twitter/Mastodon,5,"Packages, Core Features, Documentation, Slack Discussions, GitHub Discussions, Issues","0.18, 0.19, develop","macOS 12 (Monterey), RHEL 7, RHEL 8, CentOS 8, Ubuntu 20, Ubuntu 22, Debian 11, Windows Subsystem for Linux (WSL), Cray XC, Cray EX, Cray XT","> 1,000","3.9, 3.10, 3.11","spack load, Spack environments","Environments, Chaining (upstreams), Mirrors (spack mirror create / air gap support), Build caches (making binary packages), Public build caches at https://binaries.spack.io, E4S build caches (https://e4s.io), build-env (debug a build), spack external find, Cray PE support (spack external read-cray-manifest), Externals in packages.yaml, Concretization preferences in packages.yaml, New `require:` directive in packages.yaml, New concretizer (clingo), spack develop, concretization: --reuse (default), concretization: --fresh (build everything fresh), concretizer:unify:true (concretize together), Multiple build systems in one package, Variant/flag propagation (++, ~~, ==), New scalable binding link model (config:shared_linking:bind:true), Git versions, spack test, spack load, spackbot (@spackbot fix style; @spackbot rebuild everything, etc.), spack diff (compare two specs)",Yes -- just one,No,No,"AMD, Intel, IBM Power, ARM","NVIDIA T4, NVIDIA Volta, NVIDIA Ampere, NVIDIA Hopper, AMD MI200/250X, AMD MI300, AMD Other, Intel Xe (Ponte Vecchio)","gcc, Intel OneAPI, NVHPC, LLVM, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA), CCE (Cray Compilers), Fujitsu Compilers",Critical,Very Important,Somewhat important,Somewhat important,Slightly Important,Slightly Important,Critical,Slightly Important,Slightly Important,Somewhat important,Critical,Critical,Somewhat important,Somewhat important,Very Important,Slightly Important,,Maybe,Yes,"Documentation, Slack, GitHub Issues, Source Code",Weekly,Probably,"Yes, definitely!",Good,Excellent,Good,Good,I develope an exascale application. I need Sapck to develop on Unix systems and to deploy our releases to facilities for users.,Environments,Cryptic concretization errors. Missing binary caches for macOS. Issues chaining with E4S deployments on facilities.,Make chaining of caches at facilities super easy to use with custom environments.,,<3,
3/15/2023 0:56:52,Scientist/Researcher,Other Public Research Lab,France,No,No,,"C++, Python",High Energy Physics,Presentation,2,"Packages, Slack Discussions, Issues","0.19, develop",macOS 11 (Ventura),200 - 500,3.11,"spack load, Spack environments, spack build-env, Containers","Environments, spack containerize, Build caches (making binary packages), build-env (debug a build), spack external find, Externals in packages.yaml, Concretization preferences in packages.yaml, New concretizer (clingo), spack develop, concretizer:unify:true (concretize together), spack test, spack load",Yes -- several,Yes,No,"AMD, Intel, ARM",AMD MI100,"gcc, Apple clang",Critical,Somewhat important,Not Important,Somewhat important,Somewhat important,Very Important,Very Important,Somewhat important,Very Important,Somewhat important,Somewhat important,Slightly Important,Very Important,Very Important,Very Important,Not Important, Better UI to compare installed specs (eg to know why I end up with tens of specs for a similingly identical package ),No,Yes,"Documentation, Slack",Monthly,Probably not,Probably,Good,Excellent,Good,Good,Maintain a software stack for a high energy physics experiment. For personal use only. Spack is NOT the choice of that collaboration,Build several versions of my packages (one per branch WIP basically) while not growing (too much) the number of dependents built,"Not having (or not knowing…) multi platform env files ? And, most of all, migrating between Spack versions…",Split the core from the packages. Having both on the same repo is one thing that was a deal breaking for a larger adoption in my current community,,,
3/15/2023 4:20:31,Research Software Engineer (RSE),University HPC/Computing Center,Switzerland,No,No,,"C++, Python","HPC / Simulation, Computer Science Research",Word of mouth,2,Packages,develop,"CentOS 8, Ubuntu 20",200 - 500,3.9,"Spack environments, spack build-env, Containers","Environments, build-env (debug a build), Externals in packages.yaml, New concretizer (clingo), concretization: --reuse (default), concretization: --fresh (build everything fresh), concretizer:unify:true (concretize together), spack diff (compare two specs)",Yes -- several,No,No,"AMD, Intel, ARM","NVIDIA Volta, NVIDIA Ampere, NVIDIA Hopper, AMD MI100, AMD MI200/250X","gcc, Intel Compilers, NVHPC, LLVM, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA), CCE (Cray Compilers), armclang",Somewhat important,Slightly Important,Not Important,Not Important,Somewhat important,Not Important,Slightly Important,Slightly Important,Very Important,Somewhat important,Very Important,Not Important,Not Important,Somewhat important,Not Important,Not Important,cheatsheet of the most used commands in the docs + better indexing of the docs (rarely find what I'm looking for),Maybe,Yes,"Coworkers, GitHub Issues, spack help, Source Code",Weekly,No,Probably not,Good,Excellent,Good,Excellent,"Using spack in CI and for development, mostly using environments",Help to determine faster compiler/library bugs as we can easily switch between versions,installing rocm packages,improving performance and documentation indexing,no,,
3/15/2023 8:15:08,Computational Scientist,Company,United Kingdom,No,No,,"Fortran, C++",HPC / Simulation,Word of mouth,0,No,"0.18, 0.19, develop","RHEL 7, Cray XC",1 - 10,3.7,spack load,"Environments, spack develop, concretization: --reuse (default), concretization: --fresh (build everything fresh), Git versions, spack load",Yes -- just one,No,No,"AMD, Intel",AMD MI100,"gcc, Intel Compilers, Intel OneAPI, LLVM, CCE (Cray Compilers)",Somewhat important,Slightly Important,Not Important,Not Important,Not Important,Not Important,Not Important,Very Important,Very Important,Somewhat important,Slightly Important,Slightly Important,Slightly Important,Critical,Slightly Important,Not Important,,No,Yes,"Documentation, Coworkers, spack help",Monthly,Probably,Probably not,OK,OK,OK,OK,Mainly software development using Spack Develop,Once set up it makes compilation easy with multiple compilers and configurations,Figuring out how to get spack test to work! Haven't had much joy there yet,,,,
3/15/2023 8:16:04,Research Software Engineer (RSE),Other Public Research Lab,United Kingdom,No,No,,"Fortran, C++","HPC / Simulation, Computer Science Research",Used at my site,1,No,0.19,"CentOS 8, Ubuntu 22",10 - 100,3.8,"Spack environments, Environment Modules (TCL modules)",Environments,Yes -- just one,No,No,"AMD, Intel","NVIDIA Volta, NVIDIA Hopper, AMD MI200/250X","gcc, Intel Compilers, Intel OneAPI, NVHPC, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA), CCE (Cray Compilers)",Critical,Somewhat important,Slightly Important,Very Important,Not Important,Slightly Important,Slightly Important,Very Important,Very Important,Critical,Very Important,Slightly Important,Very Important,Not Important,Not Important,Not Important,,No,Yes,"Documentation, Coworkers",Monthly,Probably not,Probably not,OK,Good,Good,OK,,,,,,,
3/15/2023 8:16:36,Software Developer,Other Public Research Lab,United Kingdom,No,No,,"C++, Python",HPC / Simulation,Word of mouth,5,No,0.18,"RHEL 7, Ubuntu 20, SLES12","> 1,000",3.7,Environment Modules (TCL modules),"Environments, Module generation, Mirrors (spack mirror create / air gap support), build-env (debug a build), Externals in packages.yaml, Concretization preferences in packages.yaml, New concretizer (clingo), spack develop, concretization: --fresh (build everything fresh), concretizer:unify:true (concretize together), Git versions",Yes -- several,No,No,Intel,No GPUs,gcc,Critical,Somewhat important,Slightly Important,Somewhat important,Not Important,Not Important,Not Important,Critical,Somewhat important,Slightly Important,Slightly Important,Slightly Important,Somewhat important,Somewhat important,Slightly Important,Slightly Important,,Maybe,Yes,"Documentation, Coworkers, GitHub Issues, GitHub Discussions, Source Code",Weekly,Probably not,Probably,OK,OK,OK,OK,,,Trying to figure out why the concretizer doesn't use the versions specified in packages.yaml,,,,
3/15/2023 9:19:59,Computational Scientist,Other Public Research Lab,United Kingdom,No,No,,"Fortran, C, Python","HPC / Simulation, Compiler Testing",Word of mouth,5,bug fixes to packages,"0.18, 0.19","RHEL 7, CentOS 7, Ubuntu 22, SLES15, Cray EX",200 - 500,"2.7, 3.8","spack load, Spack environments, Environment Modules (TCL modules)","Environments, Module generation, Chaining (upstreams), Mirrors (spack mirror create / air gap support), build-env (debug a build), spack external find, Cray PE support (spack external read-cray-manifest), Externals in packages.yaml, Concretization preferences in packages.yaml, New concretizer (clingo), concretization: --reuse (default), concretization: --fresh (build everything fresh), spack load",Yes -- just one,No,No,"AMD, Intel, ARM","NVIDIA Volta, AMD MI200/250X","gcc, Intel Compilers, Intel OneAPI, PGI, NVHPC, LLVM, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA), CCE (Cray Compilers), armclang",Very Important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Critical,Critical,Critical,Critical,Somewhat important,Somewhat important,Critical,Very Important,Somewhat important,"Would be great to have the ability when working off-line, for Spack to be able to search your internal source mirrors to tell you what dependency source mirrors are missing from your internal mirror, so that you have a list of what needs downloading and transferring to your internal source mirror.","Yes, I'd like to attend",Yes,"Documentation, Slack, Mailing List, Coworkers, GitHub Issues, GitHub Discussions, Source Code, Email",Monthly,Probably not,Probably,OK,Excellent,Excellent,Excellent,"we have at least a three-fold use case.
1 - Installing / configuring Compilers; MPI: Math libraries (and similar software) - limited to HPC staff - so that these packages can be setup correctly
2 - Installing user software - chaining to the above spack instance for compilers etc.
3 - in-house developers using spack to help develop their software",makes deploying software a lot easier,"Some packages aren't fully developed - e.g. Abinit - basic deployment (including variants) is covered, but the testing option is not fully developed/tested - it is missing some python dependencies.","when working off-line - when an error occurs due to missing source tarballs, show all of the full paths, and filenames of the files that spack is trying to access.",Not off the top of my head,Thanks for all of your hard work,
3/15/2023 19:48:24,System Administrator,University HPC/Computing Center,United States,No,No,,"C, C++, Python, sh/bash/other shell script",HPC / Simulation,Used at my site,1,"Packages, Core Features, Documentation, Issues",0.19,Ubuntu 20,100 - 200,3.9,Lmod,"Module generation, Externals in packages.yaml, New `require:` directive in packages.yaml, concretization: --reuse (default), spackbot (@spackbot fix style; @spackbot rebuild everything, etc.)",Yes -- just one,Yes,,"AMD, Intel, IBM Power, ARM","NVIDIA Ampere, NVIDIA Other","gcc, Intel Compilers, Intel OneAPI",Critical,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Critical,Critical,Very Important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,,No,No,"Documentation, Slack, GitHub Issues, Source Code",Weekly,Probably not,Probably,OK,Good,OK,Good,I help run a heterogeneous cluster and we build lots of packages for our users. We have a wrapper script around `spack install` that starts slurm jobs and installs packages for specific architectures.,,"It's really slow. I frequently get errors like ""package xyz not found, try spack clean -m"", or ""not a valid dependency for any pacakge in the DAG"". `spack gc` used to delete important modules and break any other modules that depended on it, and I don't know why the problem went away or if it is coming back. `spack --debug` prints out which config files it uses, and not much else. We don't want hashes in our module names and removing them brings a host of other problems. When I ask a difficult question in slack it gets ignored. I want to make elegant package files using python inheritance, but I can't undo certain declarations (mainly dependencies) in the original package file. Modules for the Core compilers add the Core directory to modulepath and causes an infinite loop in the Lmod spider causing a segfault. Installation problem github issues are ignored (there are so many, I don't blame you guys).",,,,
3/16/2023 3:11:00,Research Software Engineer (RSE),"DOE/NNSA Lab (e.g., LLNL/LANL/SNL)",France,No,No,,"C++, Python, sh/bash/other shell script",HPC / Simulation,Word of mouth,5,"Packages, Core Features, Slack Discussions","0.19, develop, custom fork",Any OS present in LC (LLNL),"> 1,000",3.9,"Spack environments, spack build-env, CMakeCache","Environments, Chaining (upstreams), Mirrors (spack mirror create / air gap support), spack ci (GitLab pipeline generation -- yourself, not on our CI), Externals in packages.yaml, New concretizer (clingo), concretization: --fresh (build everything fresh), Variant/flag propagation (++, ~~, ==), Git versions",Yes -- just one,No,No,Any present at LC (LLNL),Any present at LC (LLNL),Any present at LC (LLNL),Very Important,Somewhat important,Somewhat important,Slightly Important,Slightly Important,Slightly Important,Slightly Important,Somewhat important,Very Important,Very Important,Very Important,Somewhat important,Very Important,Somewhat important,Slightly Important,Slightly Important,Better documentation search: critical,No,Yes,"Documentation, Slack, Coworkers",Monthly,No,No,OK,Excellent,Good,Good,Installing dependencies in CI context.,Spack new env variables to isolate a spack instance.,"I think I am now lagging behind Spack features, I would blame the search mechanism in the documentation. This documentation is so rich it absolutely needs a better search.",Search mechanism in documentation. Stay up to date with new architectures.,Not that I recall.,"Sorry for not looking for all the compilers, architectures and OS I might be using next year. Making organization and personnal location mandatory leads to a clear identification of who I am.",
3/16/2023 7:03:47,Software Developer,Other Public Research Lab,United Kingdom,No,No,,"Fortran, C, C++",HPC / Simulation,Presentation,1,No,"0.18, 0.19","RHEL 7, CentOS 7",1 - 10,3.7,spack load,"Environments, Mirrors (spack mirror create / air gap support), spack develop, Multiple build systems in one package, Git versions, spack load",Yes -- just one,Yes,No,"AMD, Intel",AMD MI200/250X,"gcc, Intel Compilers, Intel OneAPI, CCE (Cray Compilers)",Somewhat important,Very Important,Very Important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Very Important,Very Important,Somewhat important,Very Important,Somewhat important,Very Important,Somewhat important,Very Important,Somewhat important,,Maybe,Yes,"Documentation, GitHub Issues",Monthly,Probably,Probably,OK,OK,OK,OK,,,,,,,
3/16/2023 10:52:25,User Support Staff,Other Public Research Lab,United States,No,No,,"Fortran, Python, sh/bash/other shell script","HPC / Simulation, Statistics / Data Analysis, AI/ML, Visualization",Word of mouth,2,"Packages, Core Features, Slack Discussions, GitHub Discussions, Issues","develop, custom fork","CentOS 7, SLES15, openSuSE, Cray EX",100 - 200,3.6,"Lmod, Containers","Environments, Module generation, Chaining (upstreams), Mirrors (spack mirror create / air gap support), Build caches (making binary packages), build-env (debug a build), spack-python (Python scripting), spack external find, Externals in packages.yaml, Concretization preferences in packages.yaml, New `require:` directive in packages.yaml, New concretizer (clingo), concretization: --reuse (default), Variant/flag propagation (++, ~~, ==), spack diff (compare two specs)",Yes -- just one,My site has a front-end or extension to Spack,We have an in-house front end to ensure consistency and traceability when using Spack,"AMD, Intel","NVIDIA Volta, NVIDIA Ampere","gcc, Intel Compilers, Intel OneAPI, NVHPC, nvcc (CUDA), CCE (Cray Compilers)",Somewhat important,Slightly Important,Critical,Somewhat important,Somewhat important,Slightly Important,Not Important,Critical,Very Important,Very Important,Somewhat important,Not Important,Slightly Important,Slightly Important,Not Important,Not Important,"Getting the package API stable enough to where the builtin repo and core Spack files could be independently versioned with a well-understood compatibility matrix between the two would be a game changer for administering complex, rapidly-evolving HPC software stacks!

Also, better upstream support. For example, it would be nice if Spack would use upstream packages by default but allow the downstream to override with its own version if desired. Also customization for natively inheriting settings like package concretization preferences/requirements from the upstream. And perhaps some awareness of whether the Spack versions are the same between upstream and downstream.",Maybe,Yes,"Documentation, Slack, GitHub Issues, GitHub Discussions, Source Code",Daily,Probably not,Probably not,Excellent,Excellent,Good,Good,"We use Spack to manage our development (and soon production) software stacks on our HPC and analysis clusters. Our workflow is to use a front-end to sanitize the user environment (starting a very clean bash shell), then we activate a ""build"" Spack environment in which we build and test packages to be installed. This is visible only to our user support team. Once validated, we create a binary cached version and install into our ""public"" environment which users can see via Lmod modules. Even though we use an environment for the public builds, they are installed directly into our Spack install to support the use of the install as an upstream by our users. (it would be nice if environments could be used as upstreams in addition to base Spack installs!)",The library of package recipes and understanding of dependencies by the concretizer is a lifesaver from doing things manually.,"Sometimes the concretizer will decide to use a different hash, bypassing our intention of using the build cache, and it can be very difficult to understand why as all requirements seem the same. In particular, Spack seems very temperamental in deciding on a package DAG/hash when dependencies are built with different architectures (for example - most packages built with zen3 but some built with zen b/c the system compiler doesn't support the newer arch).

Having a very easy way to understand why two package hashes are different when spec'ing them out would be very helpful (many commands seem to rely on the packages already being installed, but this is laborious at best and sometimes just not possible due to prefix conflicts and such).

It's challenging to get Spack to use a ""generic"" compiler for dependencies and an ""exotic"" compiler for the requested package. I don't want to build build perl with every version of OneAPI and NVHPC, for example! The addition of ""require"" has made this so much better, so it's a minor complaint, but it's still a fairly manual and laborious process to implement.

Less technical but also a challenge is when you want to contribute a package update but the package maintainer is unresponsively for weeks/months. What is the recommendation in that scenario? This is one reason we have to have our own fork of Spack.

Finally, the ""spack config"" command seems only partially implemented. It would be great if it could be used to edit all YAML fields, and also modify all sections of the config files. Currently there are gaps and some aspects of the YAML format that it doesn't seem to understand. This makes it difficult to script up our workflow, forcing us to use awkward sed/awk/cat constructs.",Make it easier to get new package recipe versions without breaking changes to the whole Spack install.,,"Given the scope of the project and the number of PRs submitted every day, I think you all do an admirable job keeping up. Thanks for all you do!",
3/16/2023 11:11:23,Manager,University HPC/Computing Center,United States,No,No,,"C++, Python, sh/bash/other shell script","HPC / Simulation, Statistics / Data Analysis, Visualization",Used at my site,1,"Packages, Slack Discussions, GitHub Discussions, Issues","0.19, develop","CentOS 7, Rocky 8, AlmaLinux 8, SLES15, openSuSE, Cray EX",10 - 100,"2.7, 3.8, 3.9, 3.10, 3.11","Spack environments, Lmod, spack build-env","Environments, Module generation, Chaining (upstreams), Mirrors (spack mirror create / air gap support), Build caches (making binary packages), spack external find, Cray PE support (spack external read-cray-manifest), Externals in packages.yaml, Concretization preferences in packages.yaml, New concretizer (clingo), Git versions",Yes -- several,My site has a front-end or extension to Spack,No,"AMD, Intel, ARM","NVIDIA Volta, NVIDIA Ampere, NVIDIA Hopper","gcc, Intel Compilers, Intel OneAPI, NVHPC, LLVM, nvcc (CUDA), CCE (Cray Compilers)",Somewhat important,Very Important,Critical,Somewhat important,Not Important,Not Important,Not Important,Not Important,Somewhat important,Slightly Important,Slightly Important,Slightly Important,Slightly Important,Slightly Important,Very Important,Not Important,,"Yes, I'd like to attend",Yes,"Documentation, Slack, Coworkers, GitHub Issues, Source Code",Weekly,Probably,Probably,Excellent,Excellent,Good,Excellent,,,"concretizing ‘stacks’ seems opaque and error prone, consequently I avoid them. I write spack.yaml files from bash scripts and still loop over compilers/mpis to get predictable results.","require packages to properly install into an empty environment on a minimal host (containerized acceptance test?), ensuring their dependencies are adequately spec’ed",,,
3/16/2023 15:19:36,Computational Scientist,"DOE/NNSA Lab (e.g., LLNL/LANL/SNL)",United States,No,No,,"C, C++, sh/bash/other shell script","HPC / Simulation, AI/ML, Computer Science Research",Used at my site,5,No,develop,macOS 12 (Monterey),10 - 100,3.8,Spack environments,Environments,Yes -- several,Yes,No,"AMD, Intel, IBM Power","NVIDIA Volta, AMD MI200/250X","gcc, LLVM, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA), CCE (Cray Compilers)",Very Important,Very Important,Critical,Very Important,Somewhat important,Somewhat important,Somewhat important,Very Important,Very Important,Critical,Very Important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Very Important,,Maybe,No,"Slack, Coworkers",Yearly,No,Probably not,Horrible,OK,OK,OK,,,,,,,
3/16/2023 20:46:03,Manager,Other Public Research Lab,United States,No,No,,"Fortran, C, Python","HPC / Simulation, Computer Science Research, High Energy Physics, Embedded Systems",Todd Gamblin at the beginning ,5,"Packages, Core Features, Slack Discussions, GitHub Discussions, Issues",develop,"macOS 10.15 (Catalina), macOS 11 (Big Sur), macOS 12 (Monterey), RHEL 7, RHEL 8, Clear Linux","> 1,000","3.8, 3.11","Environment Modules (TCL modules), Custom script or env vars","Module generation, Chaining (upstreams), Concretization preferences in packages.yaml, Multiple build systems in one package, Variant/flag propagation (++, ~~, ==), Git versions",Yes -- several,Yes,No,"AMD, Intel, ARM",No GPUs,"gcc, Intel Compilers, Intel OneAPI, LLVM",Not Important,Very Important,Somewhat important,Slightly Important,Not Important,Slightly Important,Slightly Important,Critical,Very Important,Not Important,Slightly Important,Very Important,Not Important,Critical,Slightly Important,Somewhat important,,Maybe,Yes,"Documentation, GitHub Issues, Source Code, Cry in a corner",Monthly,Probably not,No,Good,Good,OK,OK,General HPC software environment maintenance,,Poor upkeep of package definition; Intel compiler handling feels like a mess and neglects the influence of gcc on its behavior in a given environment,Make compiler flag selection customizable for micro architectures. Flags for ARM are frequently wrong and hard to override without surgery.,Matlab - it would be nice to have more commercial support. ,,
3/17/2023 0:21:06,System Administrator,University HPC/Computing Center,Estonia,No,Yes,,sh/bash/other shell script,HPC / Simulation,Birds-of-a-feather (BOF) at conference,3,No,0.18,CentOS 7,200 - 500,3.8,"spack load, Lmod","Module generation, Chaining (upstreams), build-env (debug a build), Concretization preferences in packages.yaml, spack load",Yes -- just one,No,No,AMD,"NVIDIA T4, NVIDIA Volta, NVIDIA Ampere","gcc, Intel Compilers, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA)",Very Important,Very Important,Critical,Slightly Important,Not Important,Somewhat important,Somewhat important,Somewhat important,Critical,Somewhat important,Somewhat important,Very Important,Slightly Important,Slightly Important,Slightly Important,Very Important,,"Yes, I'd like to attend",No,"Documentation, Slack",Weekly,Probably,Probably,Excellent,Excellent,Good,Excellent,Centralized software handling. For users they can load spack. It sets the installation path in their home directory and sets the central stack as an upstream. ,The ease of handling your own repository and creating new package recepies.,I wish it could read setup.py files and automatically add dependencies to the build script.,Honestly just keep going like you already are. I see great things happening with spack.,More non scientific packages like some for AI image generation,I love spack :),
3/17/2023 0:37:19,Software Developer,Cloud Provider,Switzerland,No,No,,"C, C++, Python, Go, sh/bash/other shell script","HPC / Simulation, AI/ML",Word of mouth,2,"Packages, Issues","0.19, develop","CentOS 7, Rocky 8, Ubuntu 22, Debian 11",10 - 100,"3.6, 3.10","spack load, Spack environments, Containers","Environments, spack containerize, Build caches (making binary packages), spack external find, Externals in packages.yaml, Concretization preferences in packages.yaml, Distributed Builds (srun/mpirun spack install), New concretizer (clingo), concretization: --fresh (build everything fresh), concretizer:unify:true (concretize together), concretizer:unify:when_possible, Variant/flag propagation (++, ~~, ==), spack load",Yes -- just one,Yes,No,"AMD, Intel, ARM","NVIDIA T4, NVIDIA Volta, NVIDIA Ampere, NVIDIA Hopper","gcc, Intel Compilers, Intel OneAPI, NVHPC, LLVM, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA)",Slightly Important,Somewhat important,Slightly Important,Slightly Important,Slightly Important,Not Important,Not Important,Somewhat important,Somewhat important,Very Important,Slightly Important,Not Important,Slightly Important,Slightly Important,Somewhat important,Somewhat important,Improved parallel builds - potentially with non-fs based locking,Maybe,No,"Documentation, Coworkers, GitHub Issues, GitHub Discussions, Source Code",Weekly,Probably,Probably not,OK,Good,OK,OK,Build production quality packages for HPC deployements targeted at quite narrow use-cases for a limited range of target platforms (i.e. a deployment for a few life science applications reasonable optimized for 2-3 different machine types).,Keeping track of dependencies and versions. Quickly being able to stand up reasonably efficient installations of some core applications.,"* Parallel builds seems sometime to not terminate (all install processes idle - so potential dead-lock or other locking issue)
* Packages don't get updated in the released version (but I could contribute more towards that myself tbh)",Maybe integrate/document/support some framework for regression testing of performance for built packages.,"FHI Aims, linux perf(1), AMD uperf, maybe some VNC implementations ",Great work! I'm really happy to have discovered Spack!,
3/17/2023 2:18:19,Scientist/Researcher,University research group,China,No,No,,"C++, Python",HPC / Simulation,Word of mouth,2,"Packages, Issues","0.19, develop","Ubuntu 20, Ubuntu 22, Windows Subsystem for Linux (WSL)",200 - 500,"3.6, 3.7, 3.8, 3.9, 3.10, 3.11","spack load, Spack environments, Environment Modules (TCL modules)","Environments, Module generation, Mirrors (spack mirror create / air gap support), spack-python (Python scripting), concretizer:unify:true (concretize together), Variant/flag propagation (++, ~~, ==), spack load",Yes -- several,Yes,No,"AMD, Intel, ARM",NVIDIA Hopper,"gcc, Intel Compilers, Intel OneAPI, LLVM, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA)",Slightly Important,Very Important,Somewhat important,Somewhat important,Not Important,Not Important,Not Important,Somewhat important,Somewhat important,Slightly Important,Somewhat important,Slightly Important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,,No,No,"Documentation, Slack, GitHub Issues, GitHub Discussions",Weekly,Probably not,Probably not,Good,Good,OK,Excellent,Install softwares on air-bag HPCs: using mirror and environment.,It saves lots of time to install packages on workstations.,The package of LLVM always have problems.,Speedup the command `spack`.,Firedrake,Thanks for your excellent work.,
3/17/2023 2:29:44,Architect ,Cloud Provider,United Kingdom,No,No,Azure,"Fortran, C, C++, Python",HPC / Simulation,Birds-of-a-feather (BOF) at conference,3,"Packages, Issues","0.18, 0.19","CentOS 8, AlmaLinux 8, Cray EX, Mariner Linux",100 - 200,3.8,"spack load, Lmod, Environment Modules (TCL modules), Containers","Environments, Module generation, Stacks (matrices in environments), Mirrors (spack mirror create / air gap support), Build caches (making binary packages), spack external find, New concretizer (clingo), concretization: --reuse (default), spack load, spack diff (compare two specs)",Yes -- several,Yes,No,"AMD, Intel","NVIDIA T4, NVIDIA Volta, NVIDIA Ampere, NVIDIA Other, AMD MI200/250X","gcc, Intel Compilers, Intel OneAPI, NVHPC, LLVM, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA), CCE (Cray Compilers)",Not Important,Somewhat important,Slightly Important,Slightly Important,Somewhat important,Very Important,Very Important,Somewhat important,Very Important,Very Important,Very Important,Somewhat important,Very Important,Slightly Important,Slightly Important,Very Important,"Faster, more reliable spack load or another way to ditch modules",Maybe,Yes,"Documentation, GitHub Issues, Source Code",Daily,Probably,Probably,Good,OK,OK,Excellent,Cloud based package installs ,"Reproducibility
",Time consumed debugging build issues,Make spack load a viable alternative to modules,"Quite a lot, we use private repos as workarounds ",Spack is beautiful but somehow very time consuming ,
3/17/2023 4:06:02,User Support Staff,Other Public Research Lab,Italy,No,No,,"Python, R, sh/bash/other shell script","HPC / Simulation, Statistics / Data Analysis, AI/ML, Computer Science Research, Bioinformatics, Visualization",Used at my site,0,Packages,0.18,CentOS 8,10 - 100,3.6,"Spack environments, Lmod, Environment Modules (TCL modules)","Environments, Module generation, Mirrors (spack mirror create / air gap support), Build caches (making binary packages), spack external find, Externals in packages.yaml, Concretization preferences in packages.yaml, concretization: --reuse (default), spack diff (compare two specs)",Yes -- several,Yes,No,"AMD, Intel",NVIDIA T4,"gcc, Intel Compilers, Intel OneAPI, nvcc (CUDA)",Very Important,Slightly Important,Slightly Important,Slightly Important,Not Important,Slightly Important,Somewhat important,Very Important,Critical,Critical,Somewhat important,Critical,Very Important,Very Important,Very Important,Somewhat important,,"Yes, I'd like to attend",No,"Documentation, Slack, Mailing List, GitHub Issues, GitHub Discussions, Source Code",Daily,Probably,Probably,Good,Good,OK,Good,"We use spack to manage a software repository centrally for scientific software that needs to be shared and used in an HPC and in a VDI. We also would like to let researchers using this software contribute to this central repository so that there is a common effort to install new software (e.g. using upstream spack installations, CI, etc.). For now, we have two environments, a testing and a production one: we first concretize and install new software in testing, when the installation is successful the same installation is done in production.","I have been using Spack since ~3 months, so I am still learning it, but I really like how it's relatively simple to write a new package recipe in python, and I also think how environment, mirrors, buildcaches, etc are done in Spack is really useful to manage a software repository.","I think the biggest pain is upgrading spack to newer version. We did an update a while ago from v17 to v18 (we didn't have much knowledge of spack back then) and concretized and installed the environment, this caused some inconsistencies with the packages already installed and newer ones. Since we have a big focus on reproducibility and we would like to keep the environment installed reproducible for multiple years, updating Spack causes us difficulties in keeping track of what packages have been modified between different releases, which will be installed in a different way, or which are just changing their hashes. ",,"I work mainly on installing software for Structural Biology research. I found most dependencies for these packages are installed, and the most used are also present in spack, which is nice. Some others (like IMOD, Phenix, TomoBEAR, Dynamo, etc) are not included, but I am happy to contribute.  ",,
3/17/2023 4:16:23,System Administrator,University HPC/Computing Center,France,No,No,,"Python, sh/bash/other shell script, Javascript","HPC / Simulation, AI/ML, Computer Science Research",Search,5,No,0.19,"RHEL 7, RHEL 8, CentOS 7, CentOS 8, Rocky 8, Fedora","500-1,000","2.7, 3.6",Environment Modules (TCL modules),"Module generation, Distributed Builds (srun/mpirun spack install), Git versions",Yes -- just one,No,No,"Intel, ARM","NVIDIA Volta, NVIDIA Ampere, NVIDIA Hopper","gcc, Intel Compilers, Intel OneAPI, PGI, nvcc (CUDA)",Somewhat important,Very Important,Somewhat important,Slightly Important,Not Important,Very Important,Critical,Somewhat important,Somewhat important,Very Important,Very Important,Slightly Important,Not Important,Slightly Important,Slightly Important,Somewhat important,A better way to manage python packages,Maybe,Yes,"Documentation, Coworkers, spack help",Monthly,Probably,"Yes, definitely!",Good,OK,Good,Good,"Installing softwares for scientists on our supercomputer. If the spack package doesn'nt exists or is not well made, we compile it by hand.",Compilation of many software with pack made us gain a good response time.,Not very well made to manage python packages for multiple python versions via module TCL.,A better way to manage python packages for multiple python versions via module TCL.,,,
3/17/2023 4:19:45,System Administrator,University HPC/Computing Center,France,No,No,,sh/bash/other shell script,HPC / Simulation,Used at my site,1,No,0.19,RHEL 7,200 - 500,"2.7, 3.6",Environment Modules (TCL modules),"Module generation, Distributed Builds (srun/mpirun spack install), Git versions",Yes -- just one,No,No,Intel,"NVIDIA Volta, NVIDIA Ampere, NVIDIA Hopper","gcc, Intel Compilers, Intel OneAPI, PGI, nvcc (CUDA)",Somewhat important,Very Important,Somewhat important,Slightly Important,Not Important,Somewhat important,Slightly Important,Slightly Important,Not Important,Slightly Important,Slightly Important,Not Important,Not Important,Not Important,Not Important,Not Important,,No,No,"Documentation, Coworkers, GitHub Issues, spack help, Source Code",Monthly,Probably not,Probably not,OK,OK,OK,OK,,,It is not possible to include the hash of a dependency into the path of a makefile.,"Making a page in the documentation about updating spack versions, especially about the compatibility of installed spack packages of old spack versions with newer versions of spack.",,,
3/17/2023 5:07:53,System Administrator,Other Public Research Lab,United States,No,No,,"Python, Go, Perl, sh/bash/other shell script, Javascript",Bioinformatics,Birds-of-a-feather (BOF) at conference,4,"No, Issues","0.18, 0.19","RHEL 7, RHEL 8, CentOS 7, Rocky 8, Ubuntu 20",1 - 10,3.9,"spack load, Spack environments, Lmod","Environments, Module generation, Concretization preferences in packages.yaml, Multiple build systems in one package, spack load",No,Yes,No,"AMD, Intel","NVIDIA Volta, NVIDIA Ampere, NVIDIA Other","gcc, Intel Compilers, Intel OneAPI",Critical,Somewhat important,Somewhat important,Not Important,Not Important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Very Important,Somewhat important,Not Important,Not Important,Somewhat important,Not Important,Not Important,,No,Yes,"Documentation, Mailing List, Source Code",Monthly,Probably not,Probably,OK,OK,Good,Good,,,,,,,
3/17/2023 6:07:34,Research Software Engineer (RSE),"DOE/Office of Science Lab (e.g., ORNL/ANL/LBL)",United States,No,No,,"Fortran, C, Python","HPC / Simulation, AI/ML",Presentation,0,No,"0.18, 0.19","RHEL 8, Cray EX",1 - 10,3.7,"Lmod, Environment Modules (TCL modules)","Module generation, Cray PE support (spack external read-cray-manifest)",No,Yes,No,AMD,"AMD MI200/250X, AMD MI300, No GPUs","AMD ROCmCC (amdclang/hipcc), CCE (Cray Compilers)",Somewhat important,Very Important,Slightly Important,Slightly Important,Critical,Slightly Important,Slightly Important,Somewhat important,Very Important,Slightly Important,Very Important,Somewhat important,Very Important,Somewhat important,Somewhat important,Somewhat important,,Maybe,No,Documentation,Monthly,Probably not,Probably,Good,OK,Good,Good,,,,,,,
3/17/2023 6:43:40,Research Software Engineer (RSE),NCAR,United States,No,No,,"Fortran, C, Python",HPC / Simulation,Used at my site,1,"Packages, Slack Discussions, GitHub Discussions, Issues","0.19, develop","macOS 11 (Ventura), RHEL 8, Ubuntu 22, Cray EX",10 - 100,"3.7, 3.9",Lmod,"Environments, Module generation, Chaining (upstreams), Stacks (matrices in environments), build-env (debug a build), Externals in packages.yaml, New concretizer (clingo), spack develop, concretization: --fresh (build everything fresh), Variant/flag propagation (++, ~~, ==)",Yes -- several,Yes,No,"AMD, Intel, ARM","NVIDIA T4, AMD MI100","gcc, Intel Compilers, Intel OneAPI, NVHPC, LLVM, NAG, CCE (Cray Compilers), Fujitsu Compilers",Somewhat important,Slightly Important,Somewhat important,Slightly Important,Not Important,Not Important,Not Important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Slightly Important,Somewhat important,Somewhat important,Slightly Important,,Maybe,No,"Documentation, Slack, GitHub Issues, Source Code, NCAR User Support Group",Daily,Probably not,Probably not,Good,Excellent,Good,Good,"I support ESMF and ParallelIO packages on a number of HPC systems, I recently started using spack to do this, it's a great time saver.",build and install modules,spack doesn't always correctly figure out specs without my providing a lot of detail,I think you're doing great.  ,no,Thank you for the great tool,
3/17/2023 7:00:45,System Administrator,"DOE/Office of Science Lab (e.g., ORNL/ANL/LBL)",United States,No,No,DUNE,"Python, sh/bash/other shell script","High Energy Physics, Compiler Testing",Used at my site,2,"Packages, Documentation, Slack Discussions, Issues",0.18,"AlmaLinux 8, AlmaLinux9",10 - 100,"3.8, 3.9, 3.10","spack load, Spack environments, spack build-env","Environments, Mirrors (spack mirror create / air gap support), Build caches (making binary packages), Git versions",Yes -- just one,No,No,"AMD, Intel, ARM","NVIDIA Other, AMD Other","gcc, LLVM",Critical,Very Important,Somewhat important,Very Important,Slightly Important,Somewhat important,Very Important,Very Important,Somewhat important,Very Important,Very Important,Somewhat important,Slightly Important,Somewhat important,Very Important,Slightly Important,,No,Yes,"Documentation, Slack, Coworkers",Monthly,Probably not,Probably,OK,Good,Good,Good,,,,,,,
3/17/2023 7:07:07,Software Developer,"DOE/Office of Science Lab (e.g., ORNL/ANL/LBL)",United States,No,No,,"C++, Python",High Energy Physics,Used at my site,1,No,0.17,"macOS 12 (Monterey), CentOS 7",100 - 200,3.9,"Spack environments, spack view","Environments, Externals in packages.yaml",No,No,No,"Intel, ARM",No GPUs,"gcc, LLVM",Not Important,Critical,Slightly Important,Somewhat important,Slightly Important,Somewhat important,Slightly Important,Slightly Important,Slightly Important,Slightly Important,Slightly Important,Not Important,Somewhat important,Not Important,Not Important,Not Important,,No,No,"Documentation, Slack, Coworkers, spack help",Monthly,No,No,Good,Good,Good,Good,,,"Invoking spack (un)install in combination with environments is difficult for me to understand.  Sometimes I uninstall things in an environment, but I still see them outside of the environment (understandable); other times I uninstall things outside of an in environment but might still see them within the environment (less understandable).  I'd like to think of Spack environments has entirely encapsulated entities...and maybe they are and I'm just using them wrong.  But better documentation about environments would be helpful.",,,,
3/17/2023 7:16:36,Scientist/Researcher,Cloud Provider,United States,No,No,,"Python, Go, R, sh/bash/other shell script, Javascript, Lua","HPC / Simulation, AI/ML, Bioinformatics",Used at my site,2,Tools/integrations,"0.18, 0.19, develop","CentOS 7, Ubuntu 18, Ubuntu 20, Amazon Linux",100 - 200,"3.9, 3.10, 3.11","Lmod, Environment Modules (TCL modules)","Module generation, Mirrors (spack mirror create / air gap support), Build caches (making binary packages), Public build caches at https://binaries.spack.io",No,No,No,"AMD, Intel, ARM","NVIDIA T4, NVIDIA Volta, NVIDIA Ampere, NVIDIA Hopper","gcc, Intel Compilers, Intel OneAPI, nvcc (CUDA)",Somewhat important,Slightly Important,Not Important,Not Important,Not Important,Very Important,Very Important,Somewhat important,Very Important,Very Important,Critical,Not Important,Not Important,Not Important,Somewhat important,Not Important,,Maybe,Yes,"Documentation, GitHub Discussions",Weekly,Probably,Probably,Good,Good,Good,Good,,,,,,,
3/17/2023 7:47:52,Computational Scientist,"DOE/NNSA Lab (e.g., LLNL/LANL/SNL)",United States,Yes,No,,"Fortran, C, C++, Python","HPC / Simulation, AI/ML",Used at my site,2,Packages,"0.19, develop","RHEL 8, CentOS 8, Debian 11",200 - 500,"3.6, 3.9, 3.11",Spack environments,"Environments, Chaining (upstreams), spack external find, Cray PE support (spack external read-cray-manifest), Externals in packages.yaml, Concretization preferences in packages.yaml, spack develop, concretization: --reuse (default), concretization: --fresh (build everything fresh), concretizer:unify:true (concretize together), Variant/flag propagation (++, ~~, ==)",Yes -- several,No,No,"AMD, Intel, ARM","NVIDIA Volta, NVIDIA Hopper, AMD MI100, AMD MI200/250X, AMD MI300","gcc, Intel Compilers, Intel OneAPI, LLVM, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA), CCE (Cray Compilers)",Slightly Important,Slightly Important,Somewhat important,Slightly Important,Not Important,Not Important,Not Important,Somewhat important,Somewhat important,Very Important,Very Important,Somewhat important,Somewhat important,Slightly Important,Slightly Important,Slightly Important,,Maybe,Yes,"Documentation, Slack, Coworkers, GitHub Issues, Source Code",Monthly,Probably,Probably not,Good,Good,OK,Good,building environments with different compilers/flags to get all the build deps for my actual projects. heavily using spack external if possible,spack develop is great to test out small changes to one of my dependencies,spack concretize being fairly slow,Being able to more easily mix standard compilers (gcc/clang) for the base dependencies and more esoteric onces (nvcc/rocmcc) for the final packages.,,Keep up the great work. I've been looking for something like spack for many years.,
3/17/2023 8:21:36,Research Software Engineer (RSE),"DOE/NNSA Lab (e.g., LLNL/LANL/SNL)",United States,No,No,,"C, C++, Python","HPC / Simulation, Computer Science Research, Compiler Testing",Word of mouth,3,Packages,"0.18, 0.19, develop","macOS 11 (Ventura), RHEL 8","> 1,000","3.9, 3.10, 3.11","spack load, Spack environments, spack view","Environments, Stacks (matrices in environments), Build caches (making binary packages), spack external find, New concretizer (clingo), concretization: --reuse (default), concretizer:unify:true (concretize together), Variant/flag propagation (++, ~~, ==)",Yes -- just one,No,No,"AMD, Intel, IBM Power","NVIDIA Volta, NVIDIA Ampere, NVIDIA Hopper, AMD MI200/250X, AMD MI300","gcc, LLVM, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA)",Very Important,Very Important,Somewhat important,Somewhat important,Somewhat important,Slightly Important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Very Important,Somewhat important,Slightly Important,,No,Yes,"Documentation, Coworkers",Monthly,Probably not,Probably,Good,Excellent,Excellent,Excellent,I use spack a spack environments per project i am working. Typically I share that environment with my colleagues via a build cache.,"Build caches, externals and the improved support on ML Libraries ",Runtime errors that occur after building a huge stack. Usually those occur for me when I use externals.,External version matching and better error messages. Tools that bisect software stacks when errors occur in building ,,,
3/17/2023 8:27:09,DevOps/SRE,"DOE/Office of Science Lab (e.g., ORNL/ANL/LBL)",United States,Yes,No,,"Fortran, C, Python, Go, Perl, sh/bash/other shell script",HPC / Simulation,Used at my site,1,Documentation,0.19,"SLES15, Cray EX",10 - 100,"3.6, 3.7, 3.11","spack load, Spack environments, Lmod, spack view","Environments, Module generation, Stacks (matrices in environments), Mirrors (spack mirror create / air gap support), Build caches (making binary packages), E4S build caches (https://e4s.io), spack ci (GitLab pipeline generation -- yourself, not on our CI), spack external find, Cray PE support (spack external read-cray-manifest), Externals in packages.yaml, Concretization preferences in packages.yaml, New concretizer (clingo), spack develop, Variant/flag propagation (++, ~~, ==), spack test, spack load, spack diff (compare two specs)",No,Yes,No,"AMD, Intel, ARM",NVIDIA Ampere,"gcc, Intel Compilers, Intel OneAPI, PGI, NVHPC, LLVM, nvcc (CUDA), CCE (Cray Compilers)",Very Important,Slightly Important,Slightly Important,Slightly Important,Very Important,Slightly Important,Slightly Important,Somewhat important,Slightly Important,Slightly Important,Somewhat important,Slightly Important,Slightly Important,Very Important,Very Important,Somewhat important,,No,Yes,"Documentation, GitHub Issues, Source Code",Weekly,Probably,Probably not,Excellent,OK,Good,OK,Perlmutter. Spack to install software for our users. Spack for our users to install software they are missing. This includes e4s.,,Packages not quite installing and having to debug the package problem.,More testing on Cray platforms,,Keep up the good work. Thanks for everything.,
3/17/2023 8:42:42,Software Developer,Company,United Kingdom,No,No,,"Fortran, C, C++, Python, sh/bash/other shell script",HPC / Simulation,Used at my site,3,No,0.18,"CentOS 7, Ubuntu 22, Cray XT",100 - 200,3.7,"Spack environments, Environment Modules (TCL modules), spack build-env","Environments, Module generation, Chaining (upstreams), Mirrors (spack mirror create / air gap support), Build caches (making binary packages), build-env (debug a build), Externals in packages.yaml, spack develop, concretization: --reuse (default), concretization: --fresh (build everything fresh), Multiple build systems in one package",Yes -- several,No,No,"AMD, Intel",No GPUs,"gcc, Intel Compilers, Intel OneAPI, LLVM, CCE (Cray Compilers)",Very Important,Critical,Slightly Important,Somewhat important,Slightly Important,Not Important,Not Important,Slightly Important,Critical,Very Important,Not Important,Slightly Important,Very Important,Not Important,Not Important,Not Important,,Maybe,Yes,"Documentation, Coworkers, spack help, Source Code",Weekly,Probably not,Probably not,Excellent,Excellent,Excellent,Excellent,,,,,,,
3/17/2023 9:13:59,Scientist/Researcher,University research group,United States,Yes,No,,"C, C++, Python",HPC / Simulation,Used at my site,3,"Core Features, Slack Discussions, GitHub Discussions, Issues","develop, custom fork","AlmaLinux 8, Ubuntu 20, Ubuntu 22, Debian 11, SLES15, openSuSE, Fedora",100 - 200,"3.6, 3.9, 3.10, 3.11","spack load, Spack environments, Custom script or env vars","Environments, Stacks (matrices in environments), Build caches (making binary packages), Public build caches at https://binaries.spack.io, spack ci (GitLab pipeline generation -- yourself, not on our CI), Concretization preferences in packages.yaml, New `require:` directive in packages.yaml, New concretizer (clingo), concretization: --reuse (default), concretization: --fresh (build everything fresh), concretizer:unify:true (concretize together), concretizer:unify:when_possible, Git versions, spack load",No,Yes,No,"AMD, Intel, IBM Power, ARM","NVIDIA Volta, NVIDIA Ampere, NVIDIA Hopper, AMD MI200/250X, AMD MI300, Intel Xe (Ponte Vecchio)","gcc, Intel OneAPI, LLVM, nvcc (CUDA), CCE (Cray Compilers)",Somewhat important,Very Important,Slightly Important,Somewhat important,Not Important,Very Important,Very Important,Somewhat important,Critical,Not Important,Slightly Important,Not Important,Somewhat important,Not Important,Critical,Not Important,"In order of decreasing priority:

 - `spack ci` NEEDS to support ""secret"" destination mirrors that include mirror-specific credentials, OR separate credentials from mirrors.yaml entirely (""auth.yaml"")
    - If ""auth.yaml"" route, must (a) support credentials based on server + path prefix and (b) have a `spack login` or `spack auth login` frontend command like `docker login` (but supporting more authentication schemes than just username/password)

 - Local network cache for binary packages to cut buildcache server load
    - `spack ci` downloads gigabytes of binary packages in every pipeline. Very costly on cloud storage.

 - Reduce network requests needed for buildcaches
    - ~75% of requests from `spack ci` pipelines fail with 4xx errors. Very costly on cloud storage. Blind probing?
    - E.g. standard ""meta.json"" with layout version number OR per-mirror layout config (next bullet)

 - Better configuration for buildcaches
    - Per-mirror signing key / unsigned toggle
    - Toggle buildcache/source mirror separately
    - Buildcache layout config (if needed for last bullet)

 - Standard container images ready to use for `spack ci`
    - Reduces setup curve for running `spack ci` outside binaries.spack.io
    - If ghcr.io/spack/* images work for this purpose: (a) document that, (b) make them the default in `ci.yaml` if possible and (c) please add more OSs (almalinux8 and fedora(36|37))

 - Standardization for `spack buildcache create`, should always generate a usable binary package regardless of current (local) settings
    - e.g. `install_tree:padded_length:512` should be enforced in all binary packages
    - Reduces learning curve for setting up a buildcache outside binaries.spack.io

 - Support for Google Cloud Storage, up to parity with AWS S3
    - Main missing piece IIRC is the configuration for credentials (private SSH key)
    - Would help to have documentation on all the URL types supported for mirrors and how to get/add credentials

 - OS-agnostic specs
    - Helps us on rolling distros (e.g. Debian Sid) where the OS code changes with OS updates
    - Also helps when OS code changes without warning on Spack updates (e.g. during https://github.com/spack/spack/pull/33951, which integrated the years-prior https://github.com/python-distro/distro/pull/319, which fixed support for Leap 15.2 released years before that).
    - Would significantly lower the buildcache size for many-OS configurations",Maybe,No,"Documentation, Slack, GitHub Issues, GitHub Discussions, Source Code",Weekly,No,Probably,Good,Excellent,OK,Good,"Primarily using Spack to install dependencies for our project, to develop and test on local and remote machines. Also using Spack for the same purpose in project's CI, in containers (`spack ci` + buildcache).","Support for many OSs (esp. Cray) and many packages with minimal configuration. `--reuse` has been great (when it works, sometimes it can break the build due to incomplete package requirements :P). ","Buildcaches and esp. `spack ci`, they are second-rate features compared to the rest of Spack. https://github.com/spack/spack/discussions/32958 and https://github.com/spack/spack/discussions/32749 discuss and/or reference the main problems I've run into.","Improve tests for the core. It's difficult to develop new features (and replace old ones) without tests that are easy to run locally. Esp. missing (strong) tests for: upgrade paths for configs + caches, network code paths, buildcaches + ci.",https://github.com/intel/intel-graphics-compiler (We only need a few of the headers.),,
3/17/2023 9:44:37,Research Software Engineer (RSE),University research group,United States,Yes,No,,"C, C++, Python, sh/bash/other shell script",HPC / Simulation,DOE and ECP,5,"Packages, Issues",develop,"RHEL 7, RHEL 8, CentOS 7, CentOS 8, Ubuntu 18, Ubuntu 20, Cray XC, Cray XT",10 - 100,"3.8, 3.9, 3.10","Lmod, Environment Modules (TCL modules)","Module generation, spack external find, Cray PE support (spack external read-cray-manifest), Externals in packages.yaml, Concretization preferences in packages.yaml, New `require:` directive in packages.yaml, New concretizer (clingo), spack develop, concretization: --fresh (build everything fresh)",No,No,No,"AMD, Intel, IBM Power, ARM","NVIDIA T4, NVIDIA Volta, NVIDIA Ampere, NVIDIA Hopper, AMD MI100, AMD MI200/250X, AMD MI300, AMD Other, Intel Xe (Ponte Vecchio)","gcc, NVHPC, LLVM",Very Important,Slightly Important,Somewhat important,Slightly Important,Slightly Important,Slightly Important,Slightly Important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Slightly Important,Somewhat important,Very Important,Very Important,Somewhat important,,Maybe,Yes,"Documentation, Slack, GitHub Issues, Source Code",Weekly,Probably not,Probably,Good,Excellent,Good,Good,We use spack to install all the prereqs (about 20) for our project.,"The community, access to spack developers, mostly via slack.","When writing or updating a package.py recipe, often there is a 1-line solution that takes me all day to find.","It can be a steep learning curve, so maybe make that easier.
Maybe, in separate documentation, pick a few common use cases and do an end-to-end demo of what a new user might want to do in these cases.","If there were, I would add them.","Often there is a short, clever way to do something that takes too long to find.",
3/17/2023 10:54:13,Computational Scientist,University HPC/Computing Center,United States,No,No,,"Fortran, C++, Python",HPC / Simulation,Word of mouth,0,No,"0.18, 0.19","CentOS 7, Rocky 8",100 - 200,3.6,spack load,spack load,No,No,No,Intel,"NVIDIA Volta, NVIDIA Ampere, NVIDIA Hopper","gcc, Intel Compilers",Very Important,Very Important,Somewhat important,Very Important,Somewhat important,Critical,Somewhat important,Somewhat important,Critical,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,,No,No,"Documentation, Coworkers, GitHub Issues",Daily,Probably,Probably not,Good,OK,Good,Good,,,,,,,
3/17/2023 11:22:35,Research Software Engineer (RSE),University HPC/Computing Center,Switzerland,No,No,,"Fortran, C++, Python",HPC / Simulation,Word of mouth,3,Packages,develop,"macOS 12 (Monterey), Ubuntu 20, Ubuntu 22, SLES15, Cray XC",10 - 100,"3.10, 3.11","spack load, spack build-env","Environments, build-env (debug a build), spack external find, New concretizer (clingo), concretization: --reuse (default), concretizer:unify:true (concretize together), spack load",No,No,No,"AMD, Intel, ARM","NVIDIA Ampere, NVIDIA Hopper, AMD MI200/250X, AMD MI300","gcc, NVHPC, AMD ROCmCC (amdclang/hipcc), CCE (Cray Compilers)",Critical,Very Important,Not Important,Not Important,Not Important,Not Important,Not Important,Very Important,Very Important,Very Important,Very Important,Not Important,Somewhat important,Not Important,Not Important,Not Important,separate core of spack from packages,No,Yes,"Documentation, Slack, Coworkers",Weekly,Probably,"Yes, definitely!",Good,Excellent,OK,Good,"1) shared $HOME on multiple platforms: you need to be carefull to configure the location of yaml config files and installed packages
2) 'spack external find' for python modules, like py-scipy. I don't think it's working well at the moment, however it can be configured ""by hand"" in packages.yaml
3) it would be nice to have yalm schema for config.yaml and packages.yaml to know the structure of the files (what is allowed and not allowed to specify in the config files)",Software deployment becomes manageable. It's really amazing! I once got an access to a platform with ancient gcc-4.5 and nothing else. I was able install the most fresh version of gcc and all required packages in an easy way.,"Sometimes it is hard to follow the reasoning of concretizer. There can be packages already installed and expected to be reused, but still the concretized wants to rebuild them. Usually it happens when you can't build your software and dependencies with a single compiler.",split packages and core of spack,intel compiler? (if it's not available already),"Great product, really! Thanks a lot for your effort!",
3/17/2023 11:44:07,Most of these,"DOE/Office of Science Lab (e.g., ORNL/ANL/LBL)",United States,Yes,No,,C++,HPC / Simulation,Birds-of-a-feather (BOF) at conference,5,"Packages, Slack Discussions, Issues",develop,"macOS 11 (Ventura), Ubuntu 22, RHEL 9, CentOS 9","> 1,000",3.1,"spack load, Spack environments","Environments, Module generation, spack containerize, Distributed Builds (srun/mpirun spack install), New concretizer (clingo), concretizer:unify:true (concretize together), concretizer:unify:when_possible, Variant/flag propagation (++, ~~, ==)",No,No,No,"AMD, Intel, IBM Power, ARM, RISC-V","NVIDIA Volta, NVIDIA Ampere, NVIDIA Hopper, NVIDIA Other, AMD MI100, AMD MI200/250X, AMD MI300, AMD Other, Intel Xe (Ponte Vecchio)","gcc, Intel OneAPI, NVHPC, LLVM, AMD ROCmCC (amdclang/hipcc), CCE (Cray Compilers), armclang",Somewhat important,Critical,Not Important,Somewhat important,Not Important,Not Important,Not Important,Slightly Important,Very Important,Very Important,Very Important,Somewhat important,Slightly Important,Slightly Important,Slightly Important,Somewhat important,,No,Yes,"Documentation, Slack, GitHub Issues",Weekly,Probably,"Yes, definitely!",OK,Excellent,Good,Excellent,"Making many different software development/installation environments for our app and building/testing it. Different compilers, mpi, blas etc.",,,,,"(1) Have a clear stance on which operating systems are expected to work and the degree to which spack is expected to work. e.g. current spack is useless for me on my lab provided apple ventura laptop since neither gcc nor llvm build; is this a spack problem, an apple problem, or is my lab's mandated securityware getting in the way?  Also... RHEL9 was not even listed as an option on the survey.   Understood if ""strategic ambiguity"" is the most pragmatic route forward here. (2) have a way for package owners to indicate which flavors of GPU are supported or not.",
3/17/2023 12:07:05,Software Developer,"DOE/NNSA Lab (e.g., LLNL/LANL/SNL)",United States,No,No,,"Fortran, C, C++","HPC / Simulation, High Energy Physics",Used at my site,1,Packages,custom fork,RHEL 7,10 - 100,2.7,Not sure - I just use spack for CI,"Externals in packages.yaml, Concretization preferences in packages.yaml, Git versions",Yes -- several,Yes,uberenv,"AMD, Intel, IBM Power","NVIDIA Volta, AMD MI200/250X, AMD MI300","gcc, Intel OneAPI, LLVM, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA), IBM XL, CCE (Cray Compilers)",Critical,Somewhat important,Somewhat important,Very Important,Slightly Important,Slightly Important,Slightly Important,Critical,Very Important,Very Important,Very Important,Somewhat important,Critical,Very Important,Very Important,Somewhat important,Revert weird two colon syntax in the yaml file that broke everyone.,Maybe,Yes,"Documentation, Coworkers",Monthly,Probably,Probably not,Good,Good,OK,OK,I use spack through uberenv for CI (attempting to mimic umpire's CI),Not sure,"Poor error messages, difficulty updating Spack - every update breaks something","Better error messages, and documentation for how to debug issues in Spack (what options to use, how to make tweaks to packages and then rebuild only those packages, etc...)",N/A,"Usability is my biggest struggle. I'm stuck on an old outdated version because the new versions break, and I don't know how to debug the issues I'm hitting.",
3/17/2023 12:19:59,Software Developer,"DOE/NNSA Lab (e.g., LLNL/LANL/SNL)",United States,Yes,No,,"Fortran, C, C++, Python, Perl, sh/bash/other shell script, Lua",HPC / Simulation,Word of mouth,5,Packages,"0.17, 0.19","RHEL 7, RHEL 8","> 1,000","2.7, 3.8",Lmod,"Mirrors (spack mirror create / air gap support), Cray PE support (spack external read-cray-manifest), Externals in packages.yaml, Concretization preferences in packages.yaml, Multiple build systems in one package",Yes -- several,No,No,"AMD, Intel, IBM Power, ARM","NVIDIA Volta, NVIDIA Hopper, AMD MI200/250X, AMD MI300","gcc, Intel Compilers, Intel OneAPI, PGI, NVHPC, LLVM, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA), IBM XL, CCE (Cray Compilers), armclang",Very Important,Somewhat important,Somewhat important,Somewhat important,Slightly Important,Slightly Important,Slightly Important,Very Important,Somewhat important,Critical,Very Important,Slightly Important,Somewhat important,Slightly Important,Slightly Important,Slightly Important,,Maybe,Yes,Coworkers,Never,"Yes, definitely!",Probably,Good,Good,Good,Good,,,,,,,
3/17/2023 12:27:59,Scientist/Researcher,"DOE/NNSA Lab (e.g., LLNL/LANL/SNL)",United States,No,No,,"C++, sh/bash/other shell script","HPC / Simulation, Mathematical optimization",Word of mouth,3,"Slack Discussions, Issues, patches",custom fork,"RHEL 7, Fedora",10 - 100,3.7,Custom script or env vars,"Environments, Mirrors (spack mirror create / air gap support), Externals in packages.yaml, Concretization preferences in packages.yaml, New concretizer (clingo)",Yes -- just one,Yes,uberenv,"AMD, Intel","NVIDIA Volta, AMD MI300","gcc, LLVM, nvcc (CUDA)",Critical,Somewhat important,Slightly Important,Slightly Important,Not Important,Not Important,Not Important,Slightly Important,Slightly Important,Somewhat important,Somewhat important,Slightly Important,Slightly Important,Not Important,Not Important,Not Important,Patches or fixes for packages that modern versions of GCC/Clang won't compile because they enforce language rules that they didn't used to. This is my biggest hassle.,No,No,"Documentation, I basically don't get help with spack. As far as I am concerned, spack feels unsupported. There are no patches to prior releases. The only solution is more to the head of the main branch.",Weekly,Probably,Probably not,OK,OK,Bad,Bad,Use spack to build third party libraries on LLNL LC systems.,It kind of works building third party libraries on LLNL LC systems.,"Packages don't build with modern C/C++/Fortran compilers because compilers are rightly becoming stricter. I understand this isn't strictly a spack core issue, but it makes spack less useful.
Whenever I've tried to get help from the Spack team, they basically expect me to fix things myself. AFAIK, they never issue fixes for prior official releases.
Spack error messages are abysmal. ","Make sure whenever spack fails, the output explains why in a way that allows people to debug the problem.",No,,
3/17/2023 13:13:58,Scientist/Researcher,"DOE/NNSA Lab (e.g., LLNL/LANL/SNL)",United States,No,No,,"C, C++, Python",Computer Science Research,Used at my site,4,No,0.19,"macOS 11 (Big Sur), RHEL 8, Ubuntu 22",200 - 500,3.1,"spack load, Spack environments","Environments, spack develop",Yes -- just one,No,No,"AMD, Intel, IBM Power, ARM","NVIDIA Volta, AMD MI200/250X, AMD MI300","gcc, LLVM",Very Important,Very Important,Slightly Important,Very Important,Not Important,Somewhat important,Somewhat important,Very Important,Critical,Somewhat important,Critical,Slightly Important,Very Important,Somewhat important,Somewhat important,Slightly Important,,Maybe,No,"Documentation, Slack, Coworkers",Monthly,Probably not,Probably,Good,Good,OK,Good,,,"Incompatible builds, say program A has a dependency on library B and build breaks","More robust building, make sure build DAGs compile together",,,
3/17/2023 13:32:10,User Support Staff,"DOE/Office of Science Lab (e.g., ORNL/ANL/LBL)",United States,Yes,No,,"Python, sh/bash/other shell script","HPC / Simulation, Statistics / Data Analysis, AI/ML, Computer Science Research, Bioinformatics, High Energy Physics",Word of mouth,5,"Packages, Slack Discussions, GitHub Discussions, Issues","0.18, 0.19","SLES15, Cray XC, Cray EX",100 - 200,3.6,"spack load, Spack environments, Lmod, Environment Modules (TCL modules), spack view","Environments, Module generation, Chaining (upstreams), Stacks (matrices in environments), Build caches (making binary packages), spack external find, Cray PE support (spack external read-cray-manifest), Externals in packages.yaml, Concretization preferences in packages.yaml, concretization: --reuse (default), concretization: --fresh (build everything fresh), concretizer:unify:true (concretize together), concretizer:unify:when_possible, Variant/flag propagation (++, ~~, ==), spack load",Yes -- several,Yes,No,"AMD, Intel",NVIDIA Ampere,"gcc, Intel Compilers, Intel OneAPI, NVHPC, LLVM, nvcc (CUDA), CCE (Cray Compilers)",Slightly Important,Not Important,Somewhat important,Slightly Important,Very Important,Not Important,Slightly Important,Slightly Important,Critical,Critical,Somewhat important,Not Important,Somewhat important,Somewhat important,Slightly Important,Not Important,,Maybe,No,"Documentation, Slack, GitHub Issues, Source Code",Daily,Probably,Probably not,Good,Excellent,OK,Good,"getting software onto the system for our users, and helping them to install software they need","the ability to decouple failure domains via externals, buildcaches and environments","that the components are too tightly coupled, so there are too many opportunities for individual steps to encounter an error, and this breaks the whole workflow and is hard to debug (most of my effort has been actually in mitigating this, rather then in installing packages).
Second biggest is that concretization is too opaque, it can be really difficult to work out why Spack decided to do a particular thing","performance - esp. around concretization. Explainable concretization would also be great, though I understand that is a fundamentally hard problem in ASP",,"There are certainly things about Spack that, in hindsight, I would design differently, but there are some really good ideas and capabilities there too, and over the last few years the maturity has improved from ""mostly hits some error and fails"" to ""mostly succeeds"" - which is great to see",
3/17/2023 13:34:39,Software Developer,"DOE/NNSA Lab (e.g., LLNL/LANL/SNL)",United States,Yes,No,,"Fortran, C++, Python, Lua","HPC / Simulation, Computer Science Research, Visualization",Used at my site,5,"Packages, Issues","0.19, develop, custom fork","RHEL 7, RHEL 8, Ubuntu 20, Windows Subsystem for Linux (WSL)",100 - 200,3.7,"Spack environments, Containers","Environments, spack containerize, Chaining (upstreams), Mirrors (spack mirror create / air gap support), Build caches (making binary packages), spack-python (Python scripting), spack external find, Externals in packages.yaml, Concretization preferences in packages.yaml, New `require:` directive in packages.yaml, Distributed Builds (srun/mpirun spack install), New concretizer (clingo), spack develop, concretization: --fresh (build everything fresh), concretizer:unify:true (concretize together), Multiple build systems in one package, Variant/flag propagation (++, ~~, ==)",Yes -- several,No,mack,"AMD, Intel, IBM Power, ARM","NVIDIA Volta, NVIDIA Ampere, AMD MI200/250X, AMD MI300","gcc, Intel Compilers, Intel OneAPI, LLVM, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA), IBM XL, CCE (Cray Compilers)",Very Important,Somewhat important,Somewhat important,Somewhat important,Not Important,Slightly Important,Slightly Important,Critical,Critical,Slightly Important,Very Important,Slightly Important,Critical,Slightly Important,Slightly Important,Slightly Important,"Improved support for modularized environment inputs (e.g. versions, platforms) and stacking of concretization requirements; improved setup/config/testing on air-gapped networks",Maybe,Yes,"Documentation, Coworkers, GitHub Issues, spack help, Source Code, Email, MS Teams; Direct access to the spack team helps :)",Weekly,Probably,Probably not,Good,Good,Good,Excellent,spack as a build system for multiphysics codes (mack); spack for shared TPLs for teams (uberenv),"Close collaboration w/ spack team to drive spack features in support of converting from a custom Make-based build system, to a spack-based one. Improvements in spack develop, concretization requirements, commit/branch-based versioning.","Debugging build problems in spack recipes; time to concretize and rebuild, especially when iterating; ambiguous/vague error messages","Accelerate build/rebuild times, especially for incremental builds",none that I can think of. It will be nice when more packages work on Windows so we can migrate uberenv away from vcpkg,"Thank you for all the improvements to spack over the past few years, especially related to spack develop.  (Also, uberenv was not listed as a choice in the spack helpers section; perhaps that one should have had check boxes instead of radio boxes).",
3/17/2023 14:20:45,Software Developer,"DOE/NNSA Lab (e.g., LLNL/LANL/SNL)",United States,No,No,,"C, C++, Python, Perl, sh/bash/other shell script, MATLAB","HPC / Simulation, AI/ML, Computer Science Research, Compiler Testing",Word of mouth,5,"Packages, Slack Discussions, GitHub Discussions, Issues","0.18, 0.19, develop","macOS 12 (Monterey), macOS 11 (Ventura), RHEL 7, RHEL 8, Ubuntu 20, Ubuntu 22, Debian 11, Amazon Linux",10 - 100,"3.5, 3.6, 3.7, 3.8, 3.9, 3.10",Spack environments,"Environments, Mirrors (spack mirror create / air gap support), Build caches (making binary packages), Public build caches at https://binaries.spack.io, spack external find, Externals in packages.yaml, Concretization preferences in packages.yaml, New `require:` directive in packages.yaml, New concretizer (clingo), spack develop, concretization: --fresh (build everything fresh), concretizer:unify:true (concretize together), Multiple build systems in one package",Yes -- several,No,No,"AMD, Intel, IBM Power","NVIDIA T4, NVIDIA Volta, NVIDIA Ampere, NVIDIA Hopper, NVIDIA Other, AMD MI100, AMD MI200/250X, AMD MI300, AMD Other","gcc, Intel Compilers, Intel OneAPI, PGI, NVHPC, LLVM, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA), IBM XL, CCE (Cray Compilers)",Critical,Slightly Important,Somewhat important,Somewhat important,Not Important,Not Important,Slightly Important,Very Important,Somewhat important,Critical,Somewhat important,Not Important,Somewhat important,Not Important,Not Important,Slightly Important,,No,Yes,"Documentation, Slack, Coworkers, Source Code",Yearly,Probably,"Yes, definitely!",OK,Excellent,Good,Good,,,,,,,
3/17/2023 16:09:33,Scientist/Researcher,"DOE/Office of Science Lab (e.g., ORNL/ANL/LBL)",United States,No,No,,"C, C++, Python, sh/bash/other shell script","HPC / Simulation, High Energy Physics",Used at my site,3,Packages,"0.16, 0.17","RHEL 7, CentOS 7",1 - 10,3.6,"spack load, Spack environments","Environments, Mirrors (spack mirror create / air gap support), Build caches (making binary packages)",Yes -- just one,Yes,SpackDev,"AMD, Intel",No GPUs,gcc,Critical,Critical,Somewhat important,Somewhat important,Somewhat important,Very Important,Very Important,Very Important,Very Important,Critical,Very Important,Very Important,Very Important,Very Important,Very Important,Slightly Important,,No,Yes,"Documentation, Slack, Coworkers, spack help",Monthly,Probably not,Probably not,Good,Excellent,Good,Good,Build experiment code stack,,,,,,
3/17/2023 16:45:52,Scientist/Researcher,University research group,Denmark,No,No,,"Python, Rust, sh/bash/other shell script, Emacs Lisp","Computer Science Research, Data Management ",Libpressio GitHub Readme,2,No,0.19,"Ubuntu 20, Ubuntu 22, Arch",1 - 10,"3.8, 3.9, 3.10",spack load,spack load,No,No,No,"AMD, Intel",No GPUs,"gcc, LLVM",Slightly Important,Very Important,Slightly Important,Not Important,Not Important,Not Important,Not Important,Slightly Important,Not Important,Critical,Not Important,Not Important,Not Important,Not Important,Not Important,Not Important,Install software using system packages if available,No,Yes,"Documentation, GitHub Issues, Google",Yearly,No,No,Excellent,OK,Good,Excellent,Install software not in Ubuntu’s repository through the default space CLi,It could install software I needed that was not in Ubuntu’s repository ,It installs software available as system package so installing software takes longer than needed.,Install software from the system repository if it is available ,,,
3/17/2023 16:58:48,System Administrator,University HPC/Computing Center,United States,No,No,,"C++, Python, sh/bash/other shell script",HPC / Simulation,Used at my site,0,Slack Discussions,0.19,RHEL 8,1 - 10,3.6,"spack load, Lmod","Environments, Module generation",No,No,No,"AMD, Intel","NVIDIA Volta, NVIDIA Ampere",gcc,Critical,Very Important,Not Important,Slightly Important,Not Important,Very Important,Slightly Important,Somewhat important,Critical,Somewhat important,Somewhat important,Slightly Important,Slightly Important,Slightly Important,Slightly Important,Not Important,,Maybe,Yes,"Documentation, Slack, GitHub Issues, spack help",Weekly,No,No,Good,OK,Good,Good,,,,,,,
3/17/2023 17:02:16,Software Developer,"DOE/NNSA Lab (e.g., LLNL/LANL/SNL)",United States,Yes,No,,"C, C++, Python, sh/bash/other shell script",HPC / Simulation,Word of mouth,0,"Slack Discussions, GitHub Discussions, Mailing List",develop,"RHEL 7, RHEL 8",10 - 100,3.7,"Spack environments, Custom script or env vars","Environments, spack external find, Concretization preferences in packages.yaml, spack develop, concretizer:unify:true (concretize together), Variant/flag propagation (++, ~~, ==), Git versions",Yes -- several,,No,"AMD, Intel, ARM","NVIDIA T4, NVIDIA Volta, NVIDIA Ampere, NVIDIA Hopper, AMD MI100, AMD MI200/250X, AMD MI300","gcc, Intel Compilers, Intel OneAPI, AMD ROCmCC (amdclang/hipcc)",Very Important,Somewhat important,Critical,Critical,Very Important,Critical,Somewhat important,Very Important,Very Important,Very Important,Very Important,Somewhat important,Very Important,Somewhat important,Critical,Very Important,drop directive,"Yes, I'd like to attend",Yes,"Documentation, Slack, spack help, Email",Daily,Probably,Probably,OK,OK,OK,OK,,,,,,,
3/18/2023 1:04:26,Software Developer,Company,Canada,Yes,Yes,,"C, C++, HIP",HPC / Simulation,Word of mouth,2,"Packages, Core Features, Slack Discussions, Issues",develop,"CentOS 7, Ubuntu 20, Ubuntu 22, Debian 11","> 1,000","3.8, 3.9, 3.10, 3.11","spack load, Spack environments","Environments, spack external find, Externals in packages.yaml, New concretizer (clingo), concretization: --fresh (build everything fresh), concretizer:unify:true (concretize together), Variant/flag propagation (++, ~~, ==), Git versions, spack load",No,Yes,No,"AMD, Intel","AMD MI200/250X, AMD MI300, AMD Other","gcc, LLVM, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA)",Somewhat important,Very Important,Somewhat important,Slightly Important,Not Important,Slightly Important,Critical,Somewhat important,Somewhat important,Somewhat important,Critical,Not Important,Slightly Important,Very Important,Somewhat important,Not Important,,No,No,"Documentation, Slack, GitHub Issues, spack help, Source Code",Weekly,No,Probably not,Good,Excellent,OK,Good,I use Spack primarily to install various versions of ROCm libraries and dependencies to test different configurations.,"AMD does not distribute HIP built for the NVIDIA platform, so Spack is the easiest way to build those libraries. It also is good for building libraries for AMD GPU architectures that lack official support.",The handling of GPU architectures is awful compared to how CPU architectures are handled.,,,It takes a very long time to get reviews on PRs. I often need to beg for attention once a week for several weeks before my changes are merged. A series of changes therefore takes months.,
3/18/2023 7:55:35,Scientist/Researcher,University research group,United States,Yes,No,,"Fortran, C++, Python","HPC / Simulation, High Energy Physics",Word of mouth,3,"Packages, Issues","0.18, 0.19, develop","macOS 12 (Monterey), RHEL 6, RHEL 7, RHEL 8, Ubuntu 22",100 - 200,3.9,"spack load, Spack environments, Lmod, Environment Modules (TCL modules), spack view","Environments, Module generation, Chaining (upstreams), Public build caches at https://binaries.spack.io, spack external find, Externals in packages.yaml, New concretizer (clingo), concretizer:unify:true (concretize together), spack load, spack diff (compare two specs)",Yes -- just one,No,No,"AMD, Intel, IBM Power, ARM","NVIDIA Volta, NVIDIA Ampere, NVIDIA Hopper, AMD MI100, AMD MI200/250X, Intel Xe (Ponte Vecchio)","gcc, Intel Compilers, NVHPC, LLVM, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA), CCE (Cray Compilers)",Critical,Very Important,Critical,Somewhat important,Not Important,Very Important,Very Important,Somewhat important,Very Important,Slightly Important,Critical,Somewhat important,Critical,Slightly Important,Slightly Important,Not Important,Better cmake integration/tool chain files for improved IDE integration. A tool chain file could point to an environment view. ,No,No,"Documentation, Slack",Monthly,Probably not,Probably not,Good,Excellent,Excellent,Excellent,I typically create a space environment with my package dependencies use the view to work develop a package. Often some of the dependencies are in “develop” mode so I can update those locally as needed. ,Spack environments. ,Chaining: I gave up on chaining because if the spack versions and config files aren’t identical all sorts of problems come up. I haven’t tried again with some of the improved clingo concretization. ,,,,