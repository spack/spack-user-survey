Timestamp,What kind of user are you?,Where do you work?,What country are you in?,What languages do you primarily program in?,What are your primary application areas?,How did you find out about Spack?,How long have you been using Spack?,Have you contributed to Spack?,What version(s) of Spack do you use?,What OS do you use Spack on?,How many package installations have you done with Spack in the past year?,What Python version(s) do you use to run Spack?,How do you get installed Spack packages into your environment?,Which of the following Spack features do you use? (details at https://github.com/spack/spack/releases),Do you have your own local Spack package repositories?,Do you have any local modifications to Spack itself?,Do you use any third-party tools/front-ends to do development with Spack?,Which processors do you expect to use with Spack in the next year?,Which GPUs / Accelerators do you expect to use with Spack in the next year?,Which compilers do you expect to use with Spack in the next year?,Rank these TBD Spack features by importance [Better error messages],Rank these TBD Spack features by importance [Testing / integration with Pavilion2/ReFrame/other test tool],Rank these TBD Spack features by importance [More packages in public build caches],Rank these TBD Spack features by importance [Better organized/publicized public build caches],Rank these TBD Spack features by importance [Better compiler flag handling],Rank these TBD Spack features by importance [Performance/speed improvements],Rank these TBD Spack features by importance [Better autodetection of system packages],Rank these TBD Spack features by importance [Better GPU compiler support],Rank these TBD Spack features by importance [Generate GitHub Actions pipelines + build caches],Rank these TBD Spack features by importance [More developer features],Rank these TBD Spack features by importance [Improvements for `spack test`],Rank these TBD Spack features by importance [Better CI Stability / faster PR turnaround],Rank these TBD Spack features by importance [SpackOS/support for custom libc],Rank these TBD Spack features by importance [Cross-compilation],Rank these TBD Spack features by importance [More build parallelism],Rank these TBD Spack features by importance [Separate the builtin repo from core],What features NOT in the prior list would you like to see (tell us your wish list)?,Has Spack's transition into Linux Foundation / HPSF given you more confidence in the project?,"Will you be attending the Spack User Meeting at HPSFCon, May 5-8?",Have you attended a Spack Tutorial?,How do you get help with Spack when you need it?,How often do you consult the Spack documentation?,"If there were commercial support for Spack, would you or your organization buy it?",How would you rate the overall quality of ... [Spack documentation],How would you rate the overall quality of ... [Spack community],How would you rate the overall quality of ... [Spack packages],How would you rate the overall quality of ... [Spack],"What is the most recent thing you did with Spack, anywhere from installing a package to modifying the core functionality?",Tell us briefly about your use case and your usual Spack workflow.,What about Spack has helped you the most in the past year?,What are the biggest pain points in Spack for your workflow? (feel free to link to issues),What's the biggest thing we could do to improve Spack over the next year?,Are there key packages you'd like to see in Spack that are not included yet?,Do you have any other comments for us?,"If you're interested in being contacted about your response, please leave us your email.",,,,,,
4/9/2025 0:13:09,System Administrator,Paul Scherrer Institut,Switzerland,"Python, sh/bash/other shell script",System Administration,Word of mouth,6,"Packages, Core Features",develop (1.0.0dev0),SLES15,"500-1,000",3.13,Lmod,"Environments, Module generation, Chaining (upstreams), Stacks (matrices in environments), Mirrors (spack mirror create / air gap support), Build caches (making binary packages), Externals in packages.yaml, Concretization preferences in packages.yaml, `require:` directive in packages.yaml, `prefer:` directive in packages.yaml, concretization: --reuse (default), concretizer:unify:when_possible, spack load, spack diff (compare two specs), include_concrete",Yes -- several,Yes,No,"Intel, ARM","NVIDIA Ampere, NVIDIA Hopper","gcc, Classic Intel Compilers, Intel OneAPI, NVHPC, LLVM, CCE (Cray Compilers)",Very Important,Not Important,Not Important,Not Important,Somewhat important,Very Important,Very Important,Very Important,Somewhat important,Slightly Important,Slightly Important,Slightly Important,Slightly Important,Somewhat important,Somewhat important,Very Important,Backward compatibility as critical,Yes,No,Yes,"Documentation, Slack, GitHub Issues, GitHub Discussions, Source Code",Daily,Probably not,Good,Excellent,Good,Good,Installing ghosctip,I have two stages environment and provide packages to users and configuration to help them build software on our cluster,Installing software fast and easilier,"concretization failing but having absolutely no idea why, even with spack -d",better the concretization debugging,g4beamline,,,,,,,,
4/9/2025 0:13:09,Software Developer,Private Research Lab,Canada,"C++, Python","AI/ML, Bioinformatics",Presentation,0,No,0.23,"macOS 11 (Ventura), Ubuntu 22, Ubuntu 24, Windows 11","500-1,000","3.8, 3.9, 3.10",spack load,"Mirrors (spack mirror create / air gap support), Build caches (making binary packages), OCI build caches (pushing packages to container registries), Public build caches at cache.spack.io / binaries.spack.io, E4S build caches (https://e4s.io), spack load",Yes -- just one,No,,"Intel, ARM","NVIDIA Ampere, NVIDIA Hopper, NVIDIA Blackwell, Cerebras","gcc, Intel OneAPI, LLVM, armclang",Somewhat important,Not Important,Very Important,Very Important,Very Important,Very Important,Slightly Important,Somewhat important,Very Important,Very Important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,"spack porcelain (just like git, but very high level api for one or two commands for fast use)",Yes,No,Yes,"Documentation, ChatGPT / other LLMs, Perplexity / Gemini / Claude Code",Monthly,Probably,Excellent,Excellent,Good,Excellent,Installing custom packages with a custom repository.,Installing private packages on internal workflows,Allowed me to easily compile on macos and ubuntu.,Not enough spack porcelain. Running 10 commands when 1 or 2 porcelain would do.,spack porcelain; easy private build caches; LLM agents to generate countless spack packages,n/a,You guys rock. Spack is amazing.,,,,,,,
4/9/2025 0:19:53,HPC User / Analyst,University HPC/Computing Center,France,"Fortran, Python",HPC / Simulation,Word of mouth,0,"Slack Discussions, Issues",develop (1.0.0dev0),linux-rocky9-zen4 ,1 - 10,3.9,Environment Modules (TCL modules),Module generation,Yes -- just one,Yes,No,AMD,AMD MI100,"gcc, Intel OneAPI, AMD ROCmCC (amdclang/hipcc)",Very Important,Slightly Important,Very Important,Very Important,Very Important,Critical,Somewhat important,Not Important,Not Important,Not Important,Not Important,Not Important,Not Important,Not Important,Critical,Not Important,,,No,No,"Documentation, Slack, GitHub Issues",Monthly,No,Good,OK,Good,Excellent,installing packages,,,,,,,,,,,,,
4/9/2025 0:37:48,Research Software Engineer (RSE),University HPC/Computing Center,Switzerland,"Fortran, C, C++, Python","HPC / Simulation, AI/ML",Used at my site,2,"Packages, Slack Discussions, Issues, Tools/integrations","0.23, develop (1.0.0dev0)","macOS 11 (Ventura), Ubuntu 22, Ubuntu 24, SLES15","> 1,000",3.11,"Spack environments, spack build-env","Environments, Chaining (upstreams), Build caches (making binary packages), Public build caches at cache.spack.io / binaries.spack.io, build-env (debug a build), spack external find, Externals in packages.yaml, `require:` directive in packages.yaml, `prefer:` directive in packages.yaml, spack develop, concretization: --reuse (default), concretization: --fresh (build everything fresh), concretizer:unify:true (concretize together), concretizer:unify:when_possible, Multiple build systems in one package, Variant/flag propagation (++, ~~, ==), spack test, spackbot (@spackbot fix style; @spackbot rebuild everything, etc.)",Yes -- several,No,Other script to wrap spack,"AMD, ARM","NVIDIA Ampere, NVIDIA Hopper, AMD MI200/250X, AMD MI300X","gcc, NVHPC, LLVM",Very Important,Not Important,Slightly Important,Slightly Important,Somewhat important,Very Important,Somewhat important,Critical,Slightly Important,Very Important,Somewhat important,Slightly Important,Not Important,Slightly Important,Somewhat important,Critical,,Not sure,No,Yes,"Documentation, Slack, GitHub Issues",Weekly,Probably not,Good,Excellent,OK,Good,"I built my own Spack development wrapper around Spack to make sure I can automatically concretize and environment, install all the dependencies, and put myself in the build environment after running the initial phases of the build system (usually CMake). I love being able to setup my development environment with a single command.",,,,,,,,,,,,,
4/9/2025 0:56:11,System Administrator,University HPC/Computing Center,Germany,"Fortran, C, C++, Python, sh/bash/other shell script","HPC / Simulation, High Energy Physics, User Support, System Administration",Used at my site,0,No,0.23,"RHEL 8, RHEL9",200 - 500,"3.9, 3.11, 3.12","spack load, Spack environments, Lmod","Environments, Module generation, Chaining (upstreams), Stacks (matrices in environments), Mirrors (spack mirror create / air gap support), Build caches (making binary packages), E4S build caches (https://e4s.io), build-env (debug a build), Externals in packages.yaml, concretization: --reuse (default), concretization: --fresh (build everything fresh), concretizer:unify:when_possible, spack load, spack diff (compare two specs)",Yes -- just one,No,No,"AMD, Intel, ARM","NVIDIA T4, NVIDIA Volta, NVIDIA Ampere, NVIDIA Hopper, NVIDIA Blackwell, AMD MI300X, Intel Xe (Ponte Vecchio)","gcc, Classic Intel Compilers, Intel OneAPI, NVHPC, LLVM, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA), armclang",Very Important,Slightly Important,Somewhat important,Somewhat important,Very Important,Slightly Important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Slightly Important,Very Important,Very Important,,Yes,No,Yes,"Documentation, Slack, Coworkers",Daily,Probably,Good,Excellent,OK,Good,Building a software stack,"Build the software stack for users, with different compilers and MPI implementations, with support for different GPU types",,Several packages fail to compile (with chain effects); problems in building packages with INTEL and AMD GPU support.,,,,,,,,,,
4/9/2025 0:57:06,System Administrator,University research group,Taiwan,"C, C++, Python, sh/bash/other shell script",System Administration,Tutorial,0,Issues,0.23,Debian 12,10 - 100,3.11,Spack environments,"Environments, spack external find, concretizer:unify:true (concretize together), concretizer:unify:when_possible",No,Yes,No,"AMD, Intel",NVIDIA Other,"gcc, LLVM, nvcc (CUDA)",Very Important,Slightly Important,Very Important,Very Important,Very Important,Somewhat important,Very Important,Very Important,Very Important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Slightly Important,,Not sure,No,No,"Documentation, GitHub Issues, Source Code",Weekly,Probably not,Good,OK,OK,OK,install environment for a course in my department.,,,,,,,,,,,,,
4/9/2025 1:10:19,Scientist/Researcher,Other Public Research Lab,France,C,"HPC / Simulation, Computer Science",Word of mouth,4,"Packages, Slack Discussions",develop (1.0.0dev0),"Debian 11, Debian 12, Alpine",100 - 200,3.13,spack load,"Environments, Module generation, Externals in packages.yaml, spack develop, Git versions, spack load",Yes -- just one,No,No,"AMD, Intel, ARM","NVIDIA Ampere, NVIDIA Hopper, AMD MI200/250X, AMD MI300A, Intel Xe (Ponte Vecchio)","gcc, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA)",Somewhat important,Not Important,Slightly Important,Slightly Important,Slightly Important,Somewhat important,Slightly Important,Slightly Important,Not Important,Not Important,Not Important,Not Important,Not Important,Not Important,Somewhat important,Very Important,,Not sure,No,Yes,"Documentation, Slack",Monthly,Probably not,Good,Good,Good,Good,contribute a package,,,,,,,,,,,,,
4/9/2025 1:10:28,DevOps/SRE,University HPC/Computing Center,Switzerland,"Fortran, C, C++, Python","HPC / Simulation, Statistics / Data Analysis, AI/ML, User Support",Word of mouth,8,"Packages, Slack Discussions, GitHub Discussions, Issues, Tools/integrations","0.22, 0.23, 1.0.0-alpha* pre-releases, develop (1.0.0dev0)",SLES15,"> 1,000",3.6,"Environment Modules (TCL modules), spack view, Custom script or env vars","Environments, Module generation, Chaining (upstreams), Mirrors (spack mirror create / air gap support), Build caches (making binary packages), spack external find, Externals in packages.yaml, Concretization preferences in packages.yaml, `require:` directive in packages.yaml, `prefer:` directive in packages.yaml, concretization: --fresh (build everything fresh), concretizer:unify:true (concretize together), concretizer:unify:when_possible, Multiple build systems in one package, Variant/flag propagation (++, ~~, ==)",Yes -- several,My site has a front-end or extension to Spack,the fantastic stackinator: https://github.com/eth-cscs/stackinator,"AMD, ARM","NVIDIA Ampere, NVIDIA Hopper, AMD MI200/250X, AMD MI300A","gcc, NVHPC, LLVM, nvcc (CUDA)",Very Important,Slightly Important,Not Important,Not Important,Somewhat important,Very Important,Slightly Important,Critical,Not Important,Not Important,Not Important,Somewhat important,Slightly Important,Not Important,Somewhat important,Critical,BYO compiler toolchain (mainly nvfortran-gcc-g++),Not sure,No,No,"Documentation, Slack, Coworkers",Daily,No,Good,Excellent,Good,Excellent,I built a software stack for our weather and climate users.,"I create the tools and pipelines for deploying spack-based software stacks at CSCS.
The tools use spack directly to build full software stacks based on recipes.",,"Generating modules - there have been multiple changes over the last year to how modules are generated, each on breaking what was a stable process.
Build caches - being able to audit build caches, and delete packages in a clean way.
Also, we have to exclude some packages from build caches because they contain hard-coded paths to compilers, which can come back to bite us later (looking at you, perl, python, libtool). It would be great to be able to enable auto push to build cache, with a blacklist of packages to never push.",Decoupling Spack from the package repository would help us a lot.,"Not really missing, but the ML/AI packages like tensorflow and torch are already there, but building them (particularly tensorflow) is disgustingly difficult because many dependencies are up to date.
This is probably an intractable problem for Spack to solve, given the state of Python packaging and how tricky these packages are to install using any method.",Thanks very much for such a great tool and community - I couldn't deliver the quality of service that we do without it!,,,,,,,
4/9/2025 1:21:25,Performance Architect,Company,United Kingdom,"Fortran, C, C++, Python, Rust, sh/bash/other shell script, bpf","Compiler Testing, library testing",Word of mouth,10,"Packages, Core Features, Slack Discussions, GitHub Discussions, Issues, Spack Community Zoom Meetings","0.23, 1.0.0-alpha* pre-releases, develop (1.0.0dev0)","Rocky 8, Rocky 9, Ubuntu 22, Ubuntu 24, Windows Subsystem for Linux (WSL), Gentoo","> 1,000","3.9, 3.10, 3.12","spack load, Spack environments, Environment Modules (TCL modules), Containers, custom containerisation","Environments, Module generation, Build caches (making binary packages), build-env (debug a build), spack external find, Externals in packages.yaml, Concretization preferences in packages.yaml, `require:` directive in packages.yaml, Distributed Builds (srun/mpirun spack install), spack develop, concretization: --reuse (default), concretization: --fresh (build everything fresh), concretizer:unify:true (concretize together), concretizer:unify:when_possible, Multiple build systems in one package, Variant/flag propagation (++, ~~, ==), Git versions",Yes -- several,My site has a front-end or extension to Spack,Other script to wrap spack,"AMD, Intel, ARM",No GPUs,"gcc, Classic Intel Compilers, Intel OneAPI, LLVM, AMD AOCC",Very Important,Slightly Important,Not Important,Not Important,Very Important,Slightly Important,Slightly Important,Not Important,Not Important,Slightly Important,Slightly Important,Slightly Important,Slightly Important,Slightly Important,Slightly Important,Not Important,,No,No,No,"Documentation, Slack, GitHub Issues, GitHub Discussions, Weekly Telecons",Daily,Probably not,Good,Excellent,Good,Good,fix compiler and packages broken by 1.0.0dev,Automated testing using custom framework wrapping spack,It's existence :) Providing a consistent interface to build packages - there is nobody else doing this!,"Difficult to see what the compiler flags really were, hard to inject custom flags for testing",Better compiler wrapper that allows flag injection and better logging of compiler flags in build output,,,,,,,,,
4/9/2025 1:46:22,HPC Application Engineer,"DOE/NNSA Lab (e.g., LLNL/LANL/SNL)",India,"Fortran, C, C++, Python, Julia, Rust, Go, Perl, R","HPC / Simulation, Statistics / Data Analysis, AI/ML, Computer Science, Bioinformatics, High Energy Physics, Web applications, Compiler Testing, Visualization, Embedded Systems, User Support, System Administration, DevOps",Used at my site,3,"Issues, Tools/integrations, Spack User Meeting Talk, Spack Community Zoom Meetings","0.21, 0.22, 0.23, 1.0.0-alpha* pre-releases","CentOS 7, AlmaLinux 8, Debian 11","> 1,000","2.7, 3.7, 3.8, 3.9, 3.10, 3.11, 3.12","spack load, Spack environments, Lmod, Environment Modules (TCL modules), Custom script or env vars","Environments, spack containerize, Stacks (matrices in environments), spack-python (Python scripting), spack external find, Concretization preferences in packages.yaml, spack test, spack load, spack diff (compare two specs), spack env track",Yes -- several,My site has a front-end or extension to Spack,spack-stack (https://github.com/JCSDA/spack-stack),"AMD, Intel","NVIDIA Volta, NVIDIA Ampere, NVIDIA Hopper, AMD MI300A, AMD MI300X, Intel Gaudi","gcc, Classic Intel Compilers, Intel OneAPI, NVHPC, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA)",Slightly Important,Somewhat important,Very Important,Very Important,Very Important,Very Important,Critical,Critical,Very Important,Very Important,Very Important,Very Important,Somewhat important,Very Important,Critical,Very Important,Those applications are not in spack repo please add them.,Yes,"Yes, I'm presenting!",Yes,"Documentation, Slack, GitHub Issues, GitHub Discussions, spack help, Source Code, ChatGPT / other LLMs",Daily,Probably not,Good,Excellent,Excellent,Excellent,I have installed OpenFAOM@1706 and SIESTA@5 with help of SPACK,I'm handling multiple PARAM series supercomputers under NSM in India.,Most of the packages i have installed with spack,Those applications are not in spack please add them too.,Facing difficulties to install more CUDA and ROCM support versions make them easy.,More packages are there.,Facing difficulties to install more CUDA and ROCM support versions make them easy.,,,,,,,
4/9/2025 1:52:35,Research Software Engineer (RSE),University HPC/Computing Center,Argentina,"Fortran, C, C++, Python, Julia, Rust, sh/bash/other shell script, Zig","HPC / Simulation, System Administration, DevOps",Word of mouth,7,"Packages, Slack Discussions, Issues","0.20, develop (1.0.0dev0)","Rocky 8, Rocky 9, Ubuntu 24",10 - 100,"3.6, 3.10, 3.12","spack load, Environment Modules (TCL modules)","Environments, Module generation, Chaining (upstreams), Stacks (matrices in environments), Build caches (making binary packages), spack external find, Externals in packages.yaml, Concretization preferences in packages.yaml, concretization: --fresh (build everything fresh), concretizer:unify:when_possible",No,Yes,No,"AMD, Intel","NVIDIA Ampere, NVIDIA Blackwell","gcc, Classic Intel Compilers, Intel OneAPI, NVHPC, LLVM, nvcc (CUDA)",Very Important,Somewhat important,Not Important,Slightly Important,Slightly Important,Very Important,Slightly Important,Slightly Important,Not Important,Not Important,Not Important,Critical,Slightly Important,Not Important,Slightly Important,Critical,,Not sure,No,No,"Documentation, Slack",Weekly,No,Good,Good,Good,Good,Bisect a package error to a concretizer change,"Spack builds the packages we provide to our users. We pick the latest release, backport some package updates and fixes from develop, and build a few environments.",,Packages are frozen when a release is branched from develop.,,,,,,,,,,
4/9/2025 2:00:05,Research Software Engineer (RSE),Other Public Research Lab,France,C++,HPC / Simulation,Word of mouth,5,"Packages, Spack User Meeting Talk","0.23, 1.0.0-alpha* pre-releases","CentOS 7, Ubuntu 20, Ubuntu 22, Ubuntu 24",10 - 100,"3.8, 3.10","spack load, Spack environments","Environments, Stacks (matrices in environments), concretizer:unify:true (concretize together), spack load",Yes -- several,No,No,"AMD, Intel, ARM, RISC-V","NVIDIA Volta, NVIDIA Ampere, NVIDIA Hopper, NVIDIA Blackwell, AMD MI100, AMD MI200/250X, AMD MI300A, AMD MI300X","gcc, Intel OneAPI, LLVM, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA), CCE (Cray Compilers)",Somewhat important,Not Important,Somewhat important,Somewhat important,Slightly Important,Somewhat important,Critical,Critical,Very Important,Somewhat important,Slightly Important,Slightly Important,Very Important,Critical,Somewhat important,Critical,,Not sure,"Yes, I'm presenting!",No,"Documentation, Slack, Coworkers, spack help",Monthly,Probably not,Excellent,Good,Good,Excellent,Testing spack v1 that lead to update language dependencies to some packages,I use Spack to deploy my development environment and to deploy production environments on supercomputers (as a regular user of the supercomputer),Spack environments,"* The packages, when installing new environments I usually get errors because packages do not support all what they claim to support.
* The maintainance of recipes is painful as we mostly repeat what has already been described in CMakeLists.txt.
* On supercomputers exposing only modules, which is the common case in the supercomputers I use, I don't know how to use Spack. Installing from scratch consumes a lot of inodes with the risk of not correctly using the hardware. The use of containers is not trivial with GPUs and MPI and produces quite large images.",,,I wonder if there could be some integration with the CPS initiative https://cps-org.github.io/cps/overview.html ? Could it be possible to have seamless integration of external CPS conformant packages ?,,,,,,,
4/9/2025 3:17:01,HPC User / Analyst,Cloud Provider,Switzerland,"Fortran, C++, Python","HPC / Simulation, AI/ML",Word of mouth,7,"Packages, Core Features, Slack Discussions",develop (1.0.0dev0),"RHEL 8, Ubuntu 22","> 1,000","3.10, 3.11",Spack environments,"Environments, spack develop, concretization: --reuse (default), concretization: --fresh (build everything fresh), concretizer:unify:true (concretize together), concretizer:unify:when_possible",Yes -- just one,No,No,"AMD, Intel, ARM","NVIDIA Blackwell, AMD MI300X","gcc, NVHPC, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA)",Somewhat important,Not Important,Very Important,Very Important,Very Important,Very Important,Somewhat important,Very Important,Slightly Important,Not Important,Not Important,Critical,Somewhat important,Somewhat important,Critical,Not Important,,Yes,No,No,"Documentation, Slack, Source Code",Monthly,No,Good,Excellent,Good,Excellent,Build Geos with AMD support for a RFP,,,,,,,,,,,,,
4/9/2025 4:00:02,Research Software Engineer (RSE),"DOE/Office of Science Lab (e.g., ORNL/ANL/LBL)",United Kingdom,"C, C++, Python","HPC / Simulation, Computer Science","I don't remember, it was so long ago!",8,"Packages, Slack Discussions, GitHub Discussions","0.23, develop (1.0.0dev0)","Ubuntu 22, Ubuntu 24, SLES15","> 1,000","3.9, 3.10, 3.11, 3.12, 3.13",Spack environments,"Environments, Mirrors (spack mirror create / air gap support), Build caches (making binary packages), OCI build caches (pushing packages to container registries), spack external find, Externals in packages.yaml, Concretization preferences in packages.yaml, `require:` directive in packages.yaml, spack develop, concretization: --reuse (default), concretization: --fresh (build everything fresh), concretizer:unify:true (concretize together), Git versions",Yes -- several,No,No,"AMD, Intel, ARM",No GPUs,"gcc, Intel OneAPI, LLVM, CCE (Cray Compilers)",Very Important,Not Important,Not Important,Somewhat important,Somewhat important,Very Important,Very Important,Slightly Important,Very Important,Somewhat important,Not Important,Slightly Important,Slightly Important,Somewhat important,Somewhat important,Critical,,Not sure,No,Yes,"Documentation, Slack, GitHub Issues",Monthly,Probably not,OK,Excellent,Good,Good,"""spack develop"" to debug a package's code within an environment","Create 1 environment per project, make sure they are as isolated as possible, use a spack build cache (github registry) to speed up installs",build caches (my own),"spack throwing various errors due to gcc-runtime and the use of a build cache; timeouts from build cache causing ""push"" to fail or installations to fail; combining spack with another package manager, in particular conda",interop with other package managers like conda (at least document how to do it well),,,,,,,,,
4/9/2025 4:22:05,Scientist/Researcher,University research group,United States,"Python, Rust, Ocaml",Computer Science,Word of mouth,1,"Packages, Core Features, Spack User Meeting Talk","0.23, develop (1.0.0dev0)","CentOS 7, Ubuntu 22, Fedora",200 - 500,"3.11, 3.12, 3.13",Spack environments,"`require:` directive in packages.yaml, concretization: --reuse (default), concretization: --fresh (build everything fresh), concretizer:unify:true (concretize together), Splicing",No,No,No,"AMD, Intel",No GPUs,"gcc, LLVM, AMD ROCmCC (amdclang/hipcc)",Very Important,Not Important,Not Important,Very Important,Not Important,Very Important,Not Important,Very Important,Not Important,Somewhat important,Not Important,Very Important,Very Important,Very Important,Critical,Critical,,Yes,"Yes, I'm presenting!",No,"Documentation, Slack, Coworkers, Source Code",Weekly,Probably not,Good,Excellent,Good,Excellent,Built my whole dev environment on a new machine ,,,,,,,,,,,,,
4/9/2025 4:44:26,Research Software Engineer (RSE),Company,United States,"Fortran, C++, Python, sh/bash/other shell script","HPC / Simulation, AI/ML",Word of mouth,1,No,0.21,"Rocky 9, Ubuntu 22, Windows Subsystem for Linux (WSL)",100 - 200,3.11,Spack environments,"Environments, Externals in packages.yaml, concretization: --fresh (build everything fresh), concretizer:unify:true (concretize together), concretizer:unify:when_possible, Variant/flag propagation (++, ~~, ==)",No,No,No,"AMD, Intel",NVIDIA Other,"gcc, Intel OneAPI, nvcc (CUDA)",Critical,Not Important,Not Important,Not Important,Slightly Important,Very Important,Critical,Very Important,Not Important,Not Important,Not Important,Not Important,Not Important,Not Important,Very Important,Not Important,,Not sure,No,Yes,"Documentation, Coworkers, GitHub Issues, spack help, ChatGPT / other LLMs",Monthly,Probably not,Good,OK,OK,Good,Installed some additional packages into an existing environment,I want to build software on my laptop and supercomputers; I use a spack env .yaml file as a starting point to get a functioning dev environment on a new system,Being able to build MPI-based software without fussing with the individual build methods for each dependency,"Need it to be a bit easier to pick up external packages, especially MPI installations; it still wants to install a LOT of stuff even if I try to point it directly to an MPI installation","Smoother interaction with external packages; also it seems slow, but maybe there's parallelism I haven't learned about yet?",,,,,,,,,
4/9/2025 4:59:17,Computational Scientist,Other Public Research Lab,United States,"Fortran, Python, sh/bash/other shell script",HPC / Simulation,Word of mouth,4,"Packages, Core Features, Documentation, Slack Discussions, GitHub Discussions, Issues, Tools/integrations, Spack User Meeting Talk, Spack Community Zoom Meetings","0.23, custom fork","macOS 11 (Big Sur), macOS 12 (Monterey), macOS 11 (Ventura), RHEL 8, RHEL9, CentOS 8, Rocky 8, Rocky 9, AlmaLinux 9, Ubuntu 20, Ubuntu 22, Ubuntu 24, SLES12, SLES15, Windows Subsystem for Linux (WSL), Cray EX, Cray XD","> 1,000","3.6, 3.9, 3.10, 3.11, 3.12","Lmod, Environment Modules (TCL modules), spack build-env, spack view, Containers","Environments, Module generation, spack containerize, Chaining (upstreams), Mirrors (spack mirror create / air gap support), Build caches (making binary packages), build-env (debug a build), spack external find, Cray PE support (spack external read-cray-manifest), Externals in packages.yaml, Concretization preferences in packages.yaml, `require:` directive in packages.yaml, `prefer:` directive in packages.yaml, concretization: --reuse (default), concretization: --fresh (build everything fresh), concretizer:unify:true (concretize together), concretizer:unify:when_possible, Multiple build systems in one package, spack test, spackbot (@spackbot fix style; @spackbot rebuild everything, etc.), spack diff (compare two specs)",Yes -- just one,My site has a front-end or extension to Spack,spack-stack (https://github.com/JCSDA/spack-stack),"AMD, Intel, ARM","NVIDIA Volta, NVIDIA Ampere, NVIDIA Hopper, NextSilicon","gcc, Classic Intel Compilers, Intel OneAPI, NVHPC, LLVM, NAG, aocc",Very Important,Not Important,Not Important,Not Important,Slightly Important,Somewhat important,Slightly Important,Somewhat important,Somewhat important,Somewhat important,Very Important,Somewhat important,Somewhat important,Slightly Important,Somewhat important,Very Important,https://github.com/spack/spack/issues/43569,No,"Yes, I'm presenting!",No,"Documentation, Slack, GitHub Issues, spack help, Source Code, Weekly Telecons",Weekly,Probably not,Good,Excellent,OK,Good,Automated/nightly CI testing,See spack-stack presentation next month at HPSF,We cannot afford maintaining builds for hundreds of packages with multiple compilers and multiple releases of each compiler every year ourselves. spack has really helped us with that and with unifying software stacks across agencies.,"https://github.com/spack/spack/issues/43569

Packages that use the rust ecosystem. First, rust is painfully slow to build. And then some of these packages (py-maturin) reach out to the internet during the spack install call to download hidden dependencies (crates.io/...). This breaks the installation on air-gapped systems. Maybe our community is big enough to take this up with the maturin developers and other offenders to do away with this (ideally with the entire rust stuff).","I don't see good use cases for public build caches. HPC sites are sufficiently different that you want to populate and maintain your own build caches specific to each site, and then provide that build cache to downstream installers, developers etc. Instead of focusing time, energy and money on build caches, I would prefer seeing those resources used for other aspects of the project.",Can contribute those myself if needed,spack is great. It's such a blessing. Thanks so much to all of you!,,,,,,,
4/9/2025 5:40:10,Student,Student,Germany,"C, C++, Python","HPC / Simulation, AI/ML, Computer Science",Used at my site,3,No,develop (1.0.0dev0),"RHEL9, Ubuntu 24, Debian 11",100 - 200,3.12,spack load,"Environments, spack load",No,No,No,"AMD, Intel, ARM, RISC-V","NVIDIA Ampere, NVIDIA Hopper, NVIDIA Blackwell, AMD MI300X, Cerebras, Apple Metal","gcc, LLVM, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA)",Very Important,Not Important,Critical,Very Important,Very Important,Critical,Critical,Critical,Slightly Important,Slightly Important,Not Important,Not Important,Not Important,Not Important,Critical,Not Important,"make packages more robust, alot of times installation fails for different unpredictable reasons",Not sure,No,No,Documentation,Monthly,No,Good,Excellent,Good,Good,"setup a new vm and install all the required ""basics"" (spack install llvm cuda cmake ninja ...)",i use spack mostly as a package manager for hpc-environments where i dont have root/sudo permissions,the fact it lets me switch out software versions quickly etc,"mostly the syntax for specificing versions,features,compilers etc","syntax for specificing versions,features,compilers etc",,,,,,,,,
4/9/2025 5:41:45,Scientist/Researcher,Other Public Research Lab,Argentina,"C, C++, Rust","HPC / Simulation, Computer Science, System Administration",Word of mouth,2,Packages,"0.23, develop (1.0.0dev0), custom fork","Rocky 8, Debian 12, Arch",10 - 100,3.13,"spack load, Spack environments, Environment Modules (TCL modules)","Environments, spack external find, Externals in packages.yaml, Concretization preferences in packages.yaml, `require:` directive in packages.yaml, concretization: --fresh (build everything fresh), concretizer:unify:when_possible, Git versions, spack load",No,Yes,,"AMD, Intel","NVIDIA Ampere, AMD MI200/250X","gcc, Classic Intel Compilers, Intel OneAPI",Very Important,Not Important,Slightly Important,Slightly Important,Very Important,Somewhat important,Slightly Important,Very Important,Slightly Important,Slightly Important,Slightly Important,Somewhat important,Slightly Important,Slightly Important,Somewhat important,Somewhat important,,Yes,Maybe,Yes,"Documentation, GitHub Issues, GitHub Discussions, Source Code",Monthly,No,OK,OK,Good,OK,Installing a program for a cluster user who needed a custom variant which was not available in the spack package,"Create an environment, add the relevant package externals or requirements, select the desired specs",How well it can manage to compile the most messed up programs and how it manages to harmonize multiple build systems,"I don't have the links since it was long ago, but specs are often outdated and/or broken","Honestly I'm happy with the state of the project :), maybe as a computer scientist I don't suffer a lot with the many pitfalls and the steep learning curve, but I don't think there's a lot to improve on with how fucked up the whole ecosystem spack is based around",,I appreciate your good work,,,,,,,
4/9/2025 6:10:15,DevOps/SRE,Government,Netherlands,Python,"AI/ML, System Administration, DevOps",Presentation,0,Packages,develop (1.0.0dev0),Ubuntu 24,100 - 200,3.13,spack load,"concretization: --fresh (build everything fresh), spack load, spackbot (@spackbot fix style; @spackbot rebuild everything, etc.)",Yes -- just one,No,No,"AMD, Intel, ARM",No GPUs,gcc,Slightly Important,Slightly Important,Not Important,Not Important,Not Important,Not Important,Not Important,Not Important,Not Important,Somewhat important,Slightly Important,Critical,Critical,Slightly Important,Slightly Important,Somewhat important,"Full air gap / offline support: for npm, go, etc packages not explicitly in Spack (maybe through their native support for proxies).

More automatic monitoring around package index health. Track things like the number of packages, number of new versions per package, age since last update per package, number of dependent packages. None are useful alone, but overall you should be able to see relevant trends.

Spot breaking builds early. For example a periodic full rebuild of everything in CI. For example for every develop-YYYY-MM-DD snapshot, every week or on every release.

More automation around keeping packages up to date. Think Renovate / Dependabot for Spack packages.

A simple way to smoke test a change to a package does not break dependents without using CI. Maybe a command to build all dependents locally using spack cli as a poor mans ci.

oci storage for source code mirrors (store the source code tarballs in a container registry).

A safe guard against upstream sources going offline. Could take many forms, for example spack mirrors all source code packages by default, but even better would be to support https://archive.softwareheritage.org.",Yes,No,No,"Documentation, Slack, GitHub Issues, GitHub Discussions, Source Code",Daily,Probably,Good,Excellent,OK,Good,Update a package and rebuild everything to use the latest and greatest.,"Alternative to GUIX and Nix. I think Spack is better positioned in the long run.

Still quite new, so very basic work flow. Spack install <package>@<version>. Spack load to use, or in some cases use a script to generate aliases / desktop shortcuts. For my IDE for example.",Getting started using more and more software compiled from source. For me compiling from source is a way to make the freedoms of open source software accessible and counteract the concentration of power of large companies. And a way to learn.,Making sure updating a package does not break downstream dependents.,Monitor the health of the package index continuously.,"Packages from the Kubernetes ecosystem to allow a from source cloud native stack: containerd, Harbor, CNI, LGTM (Loki, Grafana, Tempo, Mimir), etc.","Keep up the great work!

Would be interested in a way to become a paid contributor.

Also willing to pay for a subscription service for binary builds and/or other convenience features if that means the development of Spack can be accelerated. Maybe something in the spirit of https://freeasinweekend.org/. But all features should be accessible for ""self hosters"", so not an open core model.",,,,,,,
4/9/2025 6:20:47,Data Scientist,Company,China,"Fortran, C, C++, Python, MATLAB, Lua","HPC / Simulation, Statistics / Data Analysis, High Energy Physics",Search,1,Issues,1.0.0-alpha* pre-releases,"macOS 11 (Ventura), Ubuntu 24",1 - 10,3.9,"spack build-env, Containers",Intall packages,No,No,No,ARM,No GPUs,"gcc, LLVM",Critical,Slightly Important,Very Important,Critical,Critical,Somewhat important,Somewhat important,Somewhat important,Very Important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Very Important,Somewhat important,Somewhat important,,Yes,Maybe,No,"Documentation, Slack, GitHub Issues, ChatGPT / other LLMs",Monthly,Probably,OK,Bad,Good,Good,Installation of Geant4,,,,,,,,,,,,,
4/9/2025 7:05:12,Scientist/Researcher,Company,United Kingdom,"Fortran, C, C++, Python, sh/bash/other shell script","HPC / Simulation, User Support, System Administration",Word of mouth,5,"Slack Discussions, Issues",0.23,"RHEL 7, RHEL 8, CentOS 7, Rocky 8, Rocky 9, Ubuntu 22, Ubuntu 24, openSuSE, Windows Subsystem for Linux (WSL)",1 - 10,"3.8, 3.9, 3.10, 3.11, 3.12","spack load, Spack environments, Environment Modules (TCL modules), spack build-env","Environments, Module generation, Chaining (upstreams), Mirrors (spack mirror create / air gap support), Build caches (making binary packages), build-env (debug a build), Externals in packages.yaml, `require:` directive in packages.yaml, concretization: --reuse (default), concretization: --fresh (build everything fresh), concretizer:unify:true (concretize together), spack load",Yes -- just one,Yes,No,Intel,No GPUs,"gcc, Classic Intel Compilers, Intel OneAPI, NVHPC",Very Important,Not Important,Not Important,Not Important,Somewhat important,Very Important,Somewhat important,Not Important,Not Important,Not Important,Not Important,Slightly Important,Not Important,Slightly Important,Slightly Important,Not Important,,Not sure,No,No,"Documentation, Slack, GitHub Issues, GitHub Discussions, spack help, Source Code, ChatGPT / other LLMs",Weekly,Probably not,Excellent,Good,OK,OK,Install our software on a cystomer's system,Building and installing our software for customers,,,,,,,,,,,,
4/9/2025 7:06:03,Manager,"DOE/NNSA Lab (e.g., LLNL/LANL/SNL)",United States,"Fortran, C++, Python, sh/bash/other shell script","HPC / Simulation, AI/ML, Computer Science, High Energy Physics, User Support",Used at my site,5,Packages,"0.21, 0.22","toss4, toss4_cray, blueos",10 - 100,3.9,"Spack environments, spack view",,,No,,"AMD, Intel","NVIDIA Volta, NVIDIA Ampere, NVIDIA Hopper, NVIDIA Blackwell, NVIDIA Other, AMD MI200/250X, AMD MI300A, AMD MI300X, No GPUs, SambaNova, Cerebras","gcc, Classic Intel Compilers, LLVM, AMD ROCmCC (amdclang/hipcc)",Somewhat important,Not Important,Critical,Critical,Slightly Important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Slightly Important,Slightly Important,Slightly Important,Not Important,Not Important,Very Important,Slightly Important,,Not sure,No,Yes,"Slack, Coworkers, Email",Yearly,Probably not,OK,Good,Good,Excellent,we build a python env for our users,we build a python env for our users,consistent env across. clusters for our users,"slow build, stability (but seems much better than it used to be).",build farms and caches,tensorflow is given us headaches,,,,,,,,
4/9/2025 7:10:11,Research Software Engineer (RSE),NASA Contractor,United States,"Fortran, C++, Python","HPC / Simulation, User Support, System Administration",Word of mouth,0,No,"0.22, 1.0.0-alpha* pre-releases",Rocky 8,1 - 10,3.6,Lmod,"Environments, Module generation",Yes -- just one,Yes,Our own custom set of scripts,"AMD, Intel",No GPUs,"gcc, Classic Intel Compilers, Intel OneAPI, NVHPC, LLVM",Very Important,Not Important,Slightly Important,Slightly Important,Slightly Important,Very Important,Slightly Important,Not Important,Not Important,Slightly Important,Slightly Important,Not Important,Not Important,Not Important,Very Important,Somewhat important,"Something to better explain why certain versions get chosen by the concretizer. I.e. this `require` got picked up from there, this `preference` got picked up from there, etc.",No,No,No,"Documentation, Slack, Coworkers, spack help",Weekly,Probably,Good,Good,Bad,OK,I'm currently trying to simplify the process by which we use spack to install a large set of packages for use by users with lmod.,We install a large number of packages in our cluster made available to users via lmod. We use a set of scripts to build environments were they refer to packages installed in the previous environment as externals to prevent rebuilding.,Just started working with it,Not understanding why the concretizer makes certain decisions,"Make the concretizers decision making process more transparent, or at least more deterministic.",No,No,,,,,,,
4/9/2025 7:49:40,User Support Staff,University HPC/Computing Center,United States,"Python, sh/bash/other shell script",User Support,Used at my site,2,No,0.23,"CentOS 8, Centos Stream, Ubuntu 20, Ubuntu 22, Ubuntu 24",200 - 500,3.11,"Spack environments, Lmod, Environment Modules (TCL modules), spack view, Containers","Environments, Module generation, spack containerize, Chaining (upstreams), spack external find, Concretization preferences in packages.yaml, `require:` directive in packages.yaml, `prefer:` directive in packages.yaml, concretization: --reuse (default), concretization: --fresh (build everything fresh)",No,No,No,"AMD, Intel, ARM","NVIDIA Ampere, NVIDIA Hopper","gcc, Classic Intel Compilers, Intel OneAPI, nvcc (CUDA)",Very Important,Not Important,Somewhat important,Somewhat important,Slightly Important,Slightly Important,Not Important,Not Important,Not Important,Not Important,Not Important,Not Important,Not Important,Not Important,Not Important,Not Important,Better garbage cleaning and/or tools for identifying package installations that have been orphaned from no-longer-existing environments.,Yes,No,Yes,"Documentation, GitHub Issues, GitHub Discussions",Weekly,Probably not,Good,Good,OK,Good,I used Spack for building a container with the MPI dependencies necessary for running multi-node container jobs on our HPC system.,"In my user-support role, I help users deploy software on our HPC system. I typically iterate multiple times through environment creation, adding specs, and installing them when trying to set up a particular software. ",Using Spack to install MPI with proper dependencies for our HPC cluster.,"1) The spack containerize method is difficult to work with; it seems geared towards devops/CI. Would like improved UX for less-technical users who use Spack as a package manager.
2) Low-level compiler errors when installing a package can be difficult to correct. Solutions online say ""add this compiler flag to fix"" but there doesn't seem to be a way to make that happen.","Include compilers in the full package dependency tree. That is, if a spec specifies a particular compiler to use and said compiler is not already installed, it will be included as a dependency in the output of ""spack spec -lI"" command. The idea is to have all packages, including the compiler, installed in a single ""install"" command.",,"Spack has been incredibly useful to our center and to my personal research. The ability to easily compile programs with high-level declarations without the need to enumerate all the dependencies is a huge time-saver, especially for myself and the users I support, as we do not have much expertise in compiling software stacks. 
The fact that Spack is FOSS is wonderful, and I hope that it can continue to be so.",,,,,,,
4/9/2025 7:50:10,Computational Scientist,"DOE/NNSA Lab (e.g., LLNL/LANL/SNL)",United States,"Fortran, C, C++, Python",HPC / Simulation,Used at my site,7,Packages,0.23,"RHEL 8, RHEL9, Ubuntu 22, Ubuntu 24, Windows 11, macOS 15 (Sequoia)",100 - 200,"3.9, 3.13","Spack environments, Environment Modules (TCL modules)","Environments, Module generation, spack containerize, Stacks (matrices in environments), spack external find, Externals in packages.yaml",No,No,No,"AMD, Intel, ARM","NVIDIA Hopper, NVIDIA Blackwell, AMD MI300X, Intel Xe (Ponte Vecchio), SambaNova, Cerebras","gcc, Intel OneAPI, NVHPC, LLVM, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA), CCE (Cray Compilers), armclang",Somewhat important,Not Important,Slightly Important,Slightly Important,Somewhat important,Very Important,Very Important,Critical,Very Important,Slightly Important,Slightly Important,Slightly Important,Slightly Important,Slightly Important,Somewhat important,Very Important,,Not sure,No,Yes,"Documentation, Slack, Coworkers, GitHub Issues",Monthly,Probably not,Good,Excellent,Good,Excellent,Modify the FFTW package to disable some float simd features that break builds on macOS,Use spack to build TPLs on Linux desktop and Mac laptop for developing applications and math libraries. Use spack to install TPLs in containers for testing on GitHub and locally for testing on HPC systems.,Installing many versions of dependencies for testing,PATH is not restored correctly after deactivating an environment see https://github.com/spack/spack/issues/48391 and https://github.com/spack/spack/issues/38516,Separate packages and the core so I can update packages versions without having to update all of spack,Everything I've needed has been there so far,"Nope, keep up the good work",,,,,,,
4/9/2025 7:53:22,System Administrator,Other Public Research Lab,United States,sh/bash/other shell script,System Administration,Tutorial,6,Slack Discussions,"0.21, 0.22","RHEL 8, Rocky 8, Rocky 9",1 - 10,"3.6, 3.9",Lmod,"Module generation, Public build caches at cache.spack.io / binaries.spack.io, E4S build caches (https://e4s.io)",No,No,No,"AMD, Intel, ARM","NVIDIA Volta, NVIDIA Hopper, NVIDIA Blackwell, AMD MI100, AMD MI200/250X","gcc, Intel OneAPI, NVHPC, LLVM, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA)",Not Important,Slightly Important,Slightly Important,Slightly Important,Not Important,Slightly Important,Somewhat important,Slightly Important,Not Important,Not Important,Not Important,Not Important,Not Important,Not Important,Slightly Important,Not Important,,Not sure,No,Yes,"Documentation, Slack",Yearly,Probably,Good,Good,OK,OK,Installed PAPI to play around with it on a test system .,,,"Not recent, but in the past either Nvidia lagged or did some stuff which would break spack and it just became easier to deal with CUDA outside of Spack. ",,,,,,,,,,
4/9/2025 8:15:10,DevOps/SRE,University research group,United States,"Python, Rust, sh/bash/other shell script","Web applications, System Administration, DevOps",Presentation,7,No,0.23,"CentOS 7, CentOS 8, AlmaLinux 9, Ubuntu 20, Ubuntu 22, Ubuntu 24",200 - 500,"3.6, 3.8, 3.10, 3.11, 3.12","spack view, Custom script or env vars","Environments, Mirrors (spack mirror create / air gap support), Concretization preferences in packages.yaml, concretizer:unify:true (concretize together)",Yes -- just one,No,No,"AMD, Intel, ARM",No GPUs,gcc,Critical,Not Important,Slightly Important,Slightly Important,Somewhat important,Somewhat important,Slightly Important,Slightly Important,Not Important,Not Important,Not Important,Not Important,Not Important,Very Important,Somewhat important,Slightly Important,,Not sure,No,No,"Documentation, GitHub Issues, Source Code",Yearly,Probably not,Good,Good,Good,OK,Upgrading to 0.23 and installing a new set of package versions,"I maintain a central software environment for a scientific collaboration, and typically update it once or twice a year",,"How to manage python packages and virtualenvs, especially within a view","Get cross-compilation working, so I can build for other processor optimizations or architectures on a single machine","I have a handful of specific science packages, like wcslib, pal, and erfa.  Not hard to maintain separately though",,,,,,,,
4/9/2025 8:18:50,Research Software Engineer (RSE),"DOE/NNSA Lab (e.g., LLNL/LANL/SNL)",United States,C++,"HPC / Simulation, DevOps",Word of mouth,0,"Packages, Issues","0.23, develop (1.0.0dev0)",MacOS Sequoia 15,100 - 200,3.9,Spack environments,"Environments, Build caches (making binary packages), Weekly develop snapshots on cache.spack.io, OCI build caches (pushing packages to container registries), Public build caches at cache.spack.io / binaries.spack.io, build-env (debug a build), spack external find, Externals in packages.yaml, spack develop, concretization: --reuse (default)",Yes -- several,No,No,"AMD, Intel, ARM",No GPUs,"gcc, LLVM",Critical,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Critical,Very Important,Somewhat important,Very Important,Very Important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Very Important,Critical,,Not sure,No,No,"Documentation, Slack, Coworkers",Weekly,Probably,Good,Good,OK,OK,Set up CI for project and its dependencies in develop mode on different machines/ different compilers,I am using Spack mostly for CI and buildcaches to speed it up. I am also using the spack github action and to build containers.,Building on many machines for CI with different compilers,"- I find it difficult to get Spack to use the same compiler for a package and its dependencies and to understand why it is choosing certain things when concretizing
- Concretizing is slow
- Error messages are often not helpful
- Updating to the latest Spack causes differences in what gets installed, time-consuming to debug",,,,,,,,,,
4/9/2025 8:58:37,Scientist/Researcher,"DOE/Office of Science Lab (e.g., ORNL/ANL/LBL)",United States,"C++, Python",HPC / Simulation,Used at my site,2,No,"0.23, develop (1.0.0dev0)","AlmaLinux 9, Ubuntu 24, macOS 14.7.5 (Sonoma)",10 - 100,3.12,"spack load, Spack environments","Environments, spack load",No,No,No,"AMD, Intel, ARM","NVIDIA Ampere, NVIDIA Hopper, AMD MI300X","gcc, LLVM, nvcc (CUDA)",Critical,Somewhat important,Very Important,Very Important,Very Important,Critical,Critical,Critical,Very Important,Critical,Very Important,Very Important,Somewhat important,Somewhat important,Critical,Somewhat important,,Yes,No,No,"Documentation, Coworkers, ChatGPT / other LLMs",Monthly,Probably not,OK,Good,OK,Excellent,Install dependencies for the packages I develop.,,"Build automation, script configuration",Cryptic error messages,,,,,,,,,,
4/9/2025 9:05:14,System Administrator,Company,United States,"Python, sh/bash/other shell script",HPC / Simulation,Used at my site,6,No,"0.15, 0.18, 0.21",Rocky 8,200 - 500,3.6,"Spack environments, Lmod","Environments, Module generation, Build caches (making binary packages), spack external find, Externals in packages.yaml, `require:` directive in packages.yaml, `prefer:` directive in packages.yaml, concretization: --reuse (default), concretization: --fresh (build everything fresh), concretizer:unify:true (concretize together)",Yes -- just one,Yes,No,Intel,NVIDIA Hopper,"gcc, Intel OneAPI, NVHPC",Very Important,Slightly Important,Somewhat important,Very Important,Critical,Slightly Important,Not Important,Critical,Not Important,Not Important,Very Important,Not Important,Not Important,Not Important,Not Important,Critical,Stabilize Spack configs for everything ,Yes,No,Yes,"Documentation, Slack, GitHub Issues, GitHub Discussions",Monthly,Probably not,OK,Good,OK,OK,Tried with nvhpc GPU building Gromacs using 0.21.x version which is our production version - it did not work at all,"Config main configurations in site config, then use spack environment to build something that users require incrementally in one env",Helped me build all the open source apps using openmpi using version 0.21.x,"Intel MPI based builds barely worked since 0.19.x version;  Spack configurations in the  environment yaml file barely worked as expected- I had to build something one by one to figure out that some packages I required to be the dependencies are really used in concretization, then confidently proceed to install; it barely worked if I build a whole bunch of packages all together and really painful to debugging those builds. Also, upgrading to 1.0 version is intimidating to me - I don’t know how it will impact the existing builds using old 0.21.x version",Consolidate everything in 1.0 - I may start trying it as a complete separate Spack instance to,,,,,,,,,
4/9/2025 9:25:27,Software Developer,"DOE/NNSA Lab (e.g., LLNL/LANL/SNL)",United States,"Python, sh/bash/other shell script","HPC / Simulation, Statistics / Data Analysis, Computer Science, DevOps",Word of mouth,4,"Packages, Core Features, Slack Discussions, Tools/integrations, Spack User Meeting Talk",develop (1.0.0dev0),"macOS 10.15 (Catalina), RHEL 8",200 - 500,3.13,"spack load, Spack environments","Environments, Mirrors (spack mirror create / air gap support), Build caches (making binary packages), Public build caches at cache.spack.io / binaries.spack.io, E4S build caches (https://e4s.io), spack-python (Python scripting), spack external find, Externals in packages.yaml, spack develop, spack load, spackbot (@spackbot fix style; @spackbot rebuild everything, etc.), E4S containers (https://e4s.io)",No,No,No,"AMD, Intel",AMD MI300X,"gcc, Classic Intel Compilers, Intel OneAPI, NVHPC, LLVM, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA)",Critical,Somewhat important,Very Important,Critical,Very Important,Critical,Very Important,Somewhat important,Critical,Critical,Somewhat important,Critical,Slightly Important,Somewhat important,Critical,Critical,,Yes,"Yes, I'm presenting!",Yes,"Documentation, Slack, Coworkers, Source Code",Weekly,No,Good,Excellent,Excellent,Good,n/a,,,,,,,,,,,,,
4/9/2025 9:31:56,Research Software Engineer (RSE),"DOE/NNSA Lab (e.g., LLNL/LANL/SNL)",United States,"Fortran, C, C++, Python","HPC / Simulation, AI/ML, DevOps",Word of mouth,6,"Packages, Core Features","0.23, develop (1.0.0dev0)","macOS 14 (Sonoma), macOS 15 (Sequoia), RHEL 8, RHEL9, TOSS4","> 1,000","3.8, 3.12","spack load, Spack environments","Environments, Stacks (matrices in environments), Mirrors (spack mirror create / air gap support), Build caches (making binary packages), OCI build caches (pushing packages to container registries), Public build caches at cache.spack.io / binaries.spack.io, E4S build caches (https://e4s.io), spack ci (GitLab pipeline generation -- yourself, not on our CI), spack-python (Python scripting), spack external find, Externals in packages.yaml, spack develop, concretization: --reuse (default), concretization: --fresh (build everything fresh), concretizer:unify:true (concretize together), concretizer:unify:when_possible",Yes -- several,No,No,"AMD, Intel, ARM","NVIDIA Ampere, NVIDIA Hopper, AMD MI200/250X, AMD MI300A, AMD MI300X","gcc, Intel OneAPI, NVHPC, LLVM, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA)",Critical,Not Important,Slightly Important,Slightly Important,Somewhat important,Very Important,Very Important,Very Important,Slightly Important,Slightly Important,Slightly Important,Very Important,Slightly Important,Not Important,Not Important,Critical,,Not sure,No,Yes,"Documentation, Slack, Coworkers, GitHub Issues, GitHub Discussions, spack help, ChatGPT / other LLMs",Weekly,Probably,Good,Excellent,OK,Good,used spack ci,,,,,,,,,,,,,
4/9/2025 9:44:08,Scientist/Researcher,"DOE/NNSA Lab (e.g., LLNL/LANL/SNL)",United States,C++,"HPC / Simulation, Computer Science",Word of mouth,4,pull request fixes,ca977ea9e1afc9742e311b60f9b089f6345ceed8,"Fedora, TOSS4",10 - 100,3.12,cmake config file,"Mirrors (spack mirror create / air gap support), Concretization preferences in packages.yaml",No,My site has a front-end or extension to Spack,No,"AMD, Intel",Don't make me answer all the questions,"gcc, LLVM",Critical,Very Important,Slightly Important,Not Important,Not Important,Not Important,Somewhat important,Somewhat important,Not Important,Not Important,Not Important,Somewhat important,Not Important,Not Important,Not Important,Not Important,,No,No,No,Attempts to get help usually fail,Weekly,No,Good,Bad,OK,Bad,Building third-party libraries,Use it to build third-party libraries,Building third-party libraries,Back error messages from spack,Stop doing everything else and focus on usability,,,,,,,,,
4/9/2025 9:50:01,Software Developer,Company,Poland,"C++, Python","HPC / Simulation, Computer Science",Presentation,3,No,develop (1.0.0dev0),"CentOS 7, Rocky 8, Rocky 9",100 - 200,"2.7, 3.9","spack load, Spack environments","Environments, Variant/flag propagation (++, ~~, ==)",No,Yes,No,"AMD, Intel",NVIDIA Ampere,"gcc, Intel OneAPI",Not Important,Not Important,Somewhat important,Somewhat important,Not Important,Very Important,Very Important,Very Important,Slightly Important,Slightly Important,Slightly Important,Slightly Important,Somewhat important,Slightly Important,Very Important,Slightly Important,Better interactive shell (subshell) I would like to jump into enviroment and jump out witin Ctrl+D ,No,No,Yes,"Documentation, Slack",Monthly,Probably not,OK,Good,Good,Excellent,"I've updated package repo to new / unsuported project branch, and compile it easily with all dependencies etc. ","I work in VFX industry, and we often use HPC libraries (simulations) for film + I tend to use recent gcc rather than the one coming with a system - these days I always compile new gcc with spack along with Python/Slurm/OpenEXR and similar standard libs. Whenever I want to use something not distributed as rpm I try first spack. ",Easy way to build ocmplicated projects with dozen of dependensies,"outdated packages, complicated way to contcratize all to one location (I always have to come back to docs for this). I image I could do spack load ... + spack publish ./mybin + done",nicer interactive shell (let me be in a subshell environment - with nice prompt indicating I'm in different space now),"https://www.aswf.io/projects probably every one from these (some of them are), definitely this one https://openusd.org/release/index.html ","There are a couple of computer graphics packages without maintainer I would be interested to support. Didn't have time to contact you, kinda hesitate too",,,,,,,
4/9/2025 9:53:55,Scientist/Researcher,Other Public Research Lab,France,"Fortran, Perl",HPC / Simulation,Word of mouth,4,"Packages, Issues","0.22, develop (1.0.0dev0)","macOS 15 (Sequoia), RHEL 8, Ubuntu 20, Ubuntu 22",100 - 200,"3.6, 3.8",Environment Modules (TCL modules),"Module generation, Mirrors (spack mirror create / air gap support), spack external find, Externals in packages.yaml, spack develop",Yes -- several,No,No,"AMD, Intel, ARM",NVIDIA Hopper,"gcc, Classic Intel Compilers, Intel OneAPI, NVHPC",Very Important,Not Important,Slightly Important,Slightly Important,Very Important,Very Important,Very Important,Very Important,Slightly Important,Slightly Important,Slightly Important,Slightly Important,Slightly Important,Somewhat important,Somewhat important,Slightly Important,Better offline : mirror not even for example to install poppler,Yes,No,Yes,"Documentation, Slack, Mailing List, Coworkers, GitHub Issues, GitHub Discussions, Source Code",Monthly,Probably,Good,Good,Good,Excellent,PR for Scotch so that compiling using spack provides all the good features,"I install my code ""Sophie"" with it's VisIt plug-in using spack ; it is game changing for me.","Gain a lot of time, make installs reproducible and safe",I find spack concretization error difficult to understand.,For external packages allow for includeprefix and libprefix (typically for OpenMPI from RedHat) instead of only prefix,Usually I add it myself !,"Spack is really great, I could have dreamt of it !",,,,,,,
4/9/2025 9:56:45,Software Developer,"DOE/NNSA Lab (e.g., LLNL/LANL/SNL)",United States,"C++, Python","HPC / Simulation, Computer Science, High Energy Physics, DevOps",Used at my site,4,Issues,"0.20, 0.21, 0.22",Toss4,100 - 200,3.9,"spack load, Spack environments, spack view","Environments, Chaining (upstreams), Mirrors (spack mirror create / air gap support), spack external find, Externals in packages.yaml, Concretization preferences in packages.yaml, `require:` directive in packages.yaml, `prefer:` directive in packages.yaml, concretizer:unify:true (concretize together), Multiple build systems in one package, spack diff (compare two specs)",Yes -- just one,No,No,"AMD, Intel",AMD MI300A,"gcc, Intel OneAPI, LLVM, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA), IBM XL, CCE (Cray Compilers)",Very Important,Not Important,Somewhat important,Somewhat important,Very Important,Very Important,Somewhat important,Very Important,Slightly Important,Somewhat important,Slightly Important,Slightly Important,Slightly Important,Slightly Important,Somewhat important,Slightly Important,Easier to update spack versions and easier bootstrapping across air-gapped machines.,Yes,No,Yes,"Documentation, Slack, Coworkers, GitHub Issues, GitHub Discussions, spack help, Source Code, Email",Weekly,Probably not,OK,Good,OK,Good,Update some recipes to support new versions of TPLs,"Install/manage TPLs for our project, support several custom recipes not in upstream spack, build our project","Environments, views, and isolated package installs is a big improvement over our project's custom build system.
Spack recipes are a great knowledge database. If I hit a problem building something even outside spack I can look at Spack recipes/patches to see if others have encountered it and how they solved it.",Updating spack itself,Make it easier to update. Improve concretizer performance. Provide spack installs on air-gapped machines,No,Spack is great. Thanks for putting up the survey.,,,,,,,
4/9/2025 10:12:35,System Administrator,University HPC/Computing Center,United States,"C, Python, Java, C#","HPC / Simulation, Statistics / Data Analysis, AI/ML, Computer Science, Bioinformatics, High Energy Physics, User Support, System Administration, DevOps",Word of mouth,8,"Packages, Slack Discussions, Issues",develop (1.0.0dev0),"RHEL9, Fedora",200 - 500,3.9,Lmod,"Module generation, Chaining (upstreams), `require:` directive in packages.yaml, concretization: --reuse (default), concretizer:unify:when_possible",No,No,,"AMD, Intel","NVIDIA Ampere, NVIDIA Hopper, AMD MI200/250X, AMD MI300X","gcc, Intel OneAPI, NVHPC, LLVM, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA)",Very Important,Not Important,Slightly Important,Slightly Important,Very Important,Somewhat important,Somewhat important,Somewhat important,Slightly Important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Very Important,Somewhat important,Very Important,,Yes,No,Yes,"Documentation, Slack, GitHub Issues, GitHub Discussions, spack help, Source Code",Weekly,Probably not,OK,Good,Good,Good,Modifying runtime deps of a package.,We use it to manage user software for our cluster,spack's flexibility and broad support for various use cases around software installation,Error messages can be extremely opaque. Dependency hell with higher level languages (like python).,"Automatic dependency detection for things like python (where deps are declared (nominally) explicitly) would be cool. Automatic creation (or at least scaffolding) of package dependency recipes when missing for python deps would be cool, like phoning to pypi (probably not viable, they have enough trouble with automated usage) to get checksums and generating a recipe based on the package from pypi. Recursion! I think someone might be working on this.","If they were missing I'd be working to include them, or at least actively working with the community to get them included.",,,,,,,,
4/9/2025 11:07:36,Scientist/Researcher,Other Public Research Lab,Japan,"C++, Python","HPC / Simulation, Statistics / Data Analysis, AI/ML",Used at my site,5,"Packages, Issues",develop (1.0.0dev0),"Ubuntu 20, Ubuntu 22, Debian 11, Debian 12",100 - 200,3.11,"Spack environments, spack view","Environments, Module generation, spack containerize, spack external find, Externals in packages.yaml, spack develop, concretization: --reuse (default), concretization: --fresh (build everything fresh), concretizer:unify:true (concretize together), spack env track",Yes -- several,No,,"AMD, Intel, ARM, A64FX","NVIDIA Ampere, NVIDIA Hopper, NVIDIA Blackwell, AMD MI300X","gcc, NVHPC, LLVM, Fujitsu Compilers",Very Important,Slightly Important,Somewhat important,Somewhat important,Very Important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Very Important,Slightly Important,Somewhat important,Slightly Important,Slightly Important,Somewhat important,Critical,T-shirts,Not sure,No,No,"Documentation, GitHub Issues, GitHub Discussions, Source Code, ChatGPT / other LLMs",Monthly,Probably not,Bad,Excellent,Good,Excellent,Installing packages,"Installing dev env for my system software, change build option by switching spack env to eval my research system software ",,extermals and external pkg-config,Pip integration? Maybe ...,libudev,Keep going !!! And T-shirts,,,,,,,
4/9/2025 11:40:13,Scientist/Researcher,University research group,United States,"C, C++, Python, sh/bash/other shell script, Java","Computer Science, Performance Tools",Word of mouth,9,"Packages, Slack Discussions, Issues",develop (1.0.0dev0),"RHEL 8, Ubuntu 22, Ubuntu 24, Windows Subsystem for Linux (WSL)",100 - 200,3.12,"spack load, Spack environments, Lmod, Environment Modules (TCL modules), Containers","Environments, Chaining (upstreams), E4S build caches (https://e4s.io), build-env (debug a build), spack external find, Externals in packages.yaml, spack develop, spack test, spack load, spackbot (@spackbot fix style; @spackbot rebuild everything, etc.), E4S containers (https://e4s.io)",No,No,No,"AMD, Intel","NVIDIA T4, NVIDIA Volta, NVIDIA Ampere, NVIDIA Hopper, NVIDIA Blackwell, AMD MI100, AMD MI200/250X, AMD MI300A, AMD MI300X","gcc, Classic Intel Compilers, Intel OneAPI, NVHPC, LLVM, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA), CCE (Cray Compilers)",Critical,Somewhat important,Somewhat important,Very Important,Somewhat important,Somewhat important,Somewhat important,Very Important,Slightly Important,Somewhat important,Critical,Somewhat important,Slightly Important,Somewhat important,Somewhat important,Very Important,"Better automatic detection, handling, error/sanity checking and updating of externals, including compilers. Better and more precise error messages when externals do not behave as expected. A broken/missing external should not be an ambiguous error. (not sure if that was meant by better handling of system packages)",Not sure,No,Yes,"Documentation, Slack, Coworkers, GitHub Issues, spack help, Source Code, Weekly Telecons",Monthly,Probably not,Good,Excellent,Good,Good,Installed multiple openjdk versions side by side to test an application's version support.,"I mostly use spack to deploy and run specific packages we support (clone spack develop, spack install the application, run with it), and as the basis for large application test suites (the environment is provisioned by a container, the testsuite spack-load's packages as needed per test).",Quick and easy installation of applications with potentially very large dependency trees. An easy and reliable way to work around broken MPI installs provided by my OS.,Reliable external/compiler support. External resources aren't always stable and spack needs to be able to handle that.,,,,,,,,,,
4/9/2025 11:42:41,Build Engineer,Company,United States,"Python, sh/bash/other shell script","HPC / Simulation, System Administration, DevOps",Word of mouth,2,"Packages, Slack Discussions","0.22, 0.23","macOS 15 (Sequoia), RHEL 8, RHEL9, Rocky 8, SLES15, openSuSE","500-1,000","3.6, 3.13","spack load, Spack environments, Lmod, Environment Modules (TCL modules)","Environments, Module generation, spack containerize, Chaining (upstreams), Mirrors (spack mirror create / air gap support), Build caches (making binary packages), spack external find, Externals in packages.yaml, concretization: --reuse (default), concretization: --fresh (build everything fresh), concretizer:unify:true (concretize together), spack load",Yes -- several,No,Other script to wrap spack,"AMD, Intel",NVIDIA Ampere,"gcc, Classic Intel Compilers, Intel OneAPI, LLVM",Critical,Not Important,Slightly Important,Slightly Important,Very Important,Somewhat important,Somewhat important,Somewhat important,Not Important,Somewhat important,Somewhat important,Not Important,Not Important,Very Important,Critical,Slightly Important,,Not sure,Maybe,No,"Documentation, Slack, GitHub Discussions, ChatGPT / other LLMs",Daily,No,Excellent,Excellent,Good,Excellent,experimenting with bundles,building hpc software stacks for various projects and solvers,,so many commands,best practice guides,,thanks for all you do,,,,,,,
4/9/2025 11:54:56,Software Developer,"DOE/Office of Science Lab (e.g., ORNL/ANL/LBL)",United States,"C, C++, Python, Perl, sh/bash/other shell script, Javascript",High Energy Physics,Word of mouth,10,"Packages, Core Features, Documentation, Slack Discussions","0.21, 0.22, 0.23, 1.0.0-alpha* pre-releases, develop (1.0.0dev0)",AlmaLinux 9,"500-1,000",3.12,"spack load, Spack environments","Environments, Chaining (upstreams), Mirrors (spack mirror create / air gap support), Build caches (making binary packages), build-env (debug a build), spack external find, Externals in packages.yaml, Concretization preferences in packages.yaml, `require:` directive in packages.yaml, concretization: --reuse (default), concretization: --fresh (build everything fresh), concretizer:unify:true (concretize together), concretizer:unify:when_possible, Git versions, spack load, include_concrete",Yes -- several,My site has a front-end or extension to Spack,SpackDev (https://github.com/FNALssi/spack-dev),"AMD, Intel",No GPUs,gcc,Critical,Somewhat important,Slightly Important,Slightly Important,Very Important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,,Yes,Maybe,Yes,"Documentation, Slack, Coworkers, GitHub Issues, GitHub Discussions, Source Code",Monthly,Probably not,Excellent,Excellent,Excellent,Excellent,Build a package.,,,,,,,,,,,,,
4/9/2025 13:13:20,System Administrator,Private Research Lab,United States,"Fortran, C, C++, Python, Julia, Rust, sh/bash/other shell script","HPC / Simulation, System Administration, Quantum",Used at my site,4,"Packages, Slack Discussions, GitHub Discussions, Issues","0.23, custom fork, 0.23.1","RHEL 8, RHEL9","> 1,000","3.6, 3.13",Lmod,"Environments, Module generation, Mirrors (spack mirror create / air gap support), Build caches (making binary packages), Weekly develop snapshots on cache.spack.io, Public build caches at cache.spack.io / binaries.spack.io, build-env (debug a build), `require:` directive in packages.yaml, `prefer:` directive in packages.yaml, concretization: --reuse (default), concretization: --fresh (build everything fresh), concretizer:unify:true (concretize together), concretizer:unify:when_possible, Variant/flag propagation (++, ~~, ==), Git versions, spack load, spack diff (compare two specs), spack deconcretize",No,No,No,"AMD, Intel",NVIDIA Ampere,"gcc, Intel OneAPI, LLVM, nvcc (CUDA)",Critical,Slightly Important,Somewhat important,Somewhat important,Very Important,Critical,Slightly Important,Somewhat important,Not Important,Not Important,Somewhat important,Somewhat important,Somewhat important,Slightly Important,Slightly Important,Critical,"1) an option to get a clear explanation of why some dependences where pulled with the selected variants vs other options, rather than have to second guess the reasons; 2) a clear way to understand in what spec /hash1 and /hash2 differ, despite the first line of the human-readable spec (e.g. cmake@3.30.5%gcc@8.5.0~doc+ncurses+ownlibs~qtgui build_system=generic build_type=Release patches=dbc3892 arch=linux-rhel8-icelake) look identical; 3) a better way to build reusable lmod modules, rather than ""throw-away"" one (see more about it in a subsequent free-text field)",Yes,No,Yes,"Documentation, Slack, GitHub Issues, Source Code, Weekly Telecons",Daily,Probably,OK,Good,Good,Good,I install spack packages almost every day,"- I check if there is a new version of spack compared to the last one I used. If not, skip to the next point. If so, without touching any previously installed version of spack, I make a fresh install of spack (with a modified ""share/spack/setup-env.sh"" so that each version uses a different USER_CONFIG and CACHE). I do all the necessary set up for compilers, externals, caches, etc.
- I source ""share/spack/setup-env.sh"" to activate the most recent version of spack I have installed
- I decide a number of packages that are needed for a particular use case (typically a request by a user)
- I create a spack environment (or modify an existing one as appropriate) with said package(s), with the variants I need
- I spend more time than I wish to make sure that the packages at the previous bullet point pull in the appropriate dependencies and not unnecessary ones (or ones slightly different than what is already installed) and that spack does not refuses to install for some (typically hard to understand) incompatibility between requirements
- I run spack install, which usually fails (typically not spack's fault, but packages issue, yet spack could help more here)
- I then generate lmod modules and (with extreme pain) I compare those versions with previously installed ones
- I greatly modify said modules and move them from spack-specific location, to cluster-global one in the appropriate module tree


All of this would be *greatly* simplified if the features I requested in the free-field ""features NOT in the prior list would you like to see"" on page 3.","Despite all the pain points that I described in this survey, if I had to install thousands of packages by hand (and by hand tracking their interdependencies) I would probably not have been able to accomplish anything else, so that is working great.","They are the same that I specified in the free-field ""features NOT in the prior list would you like to see"" on page 3. Of these, the one that is the most painful (because I need to do it over-and-over) and probably easier to fix (because it's just how the module is created out of a template) is the namely generate modules in a more re-usable way. To explain that better, I don't advertise spack to my users, who use it only via loading lmod modules which inject spack-built software in their environment. Mostly because of new packages (or new versions of old packages), I feel I have to continuously install new versions of spack, which I do as described above. Then I generate modules, and I want them to be neatly organized with the ones generated by earlier versions of spack, so I can't simply point global lmod to spack-specific lmod directories, otherwise they will be sorted in a very messy way (i.e. by which version of spack they were built with, rather than what they are and where they should live in the compiler/mpi hierarchy). 

I cannot simply move the generated modules, at the very least because of the MODULEPATH changes, but also because I am paranoid and I want to inspect what I am doing beforehand. The fact that all the PATHs in the module are hardcoded, absolute ones make this task very hard. If spack could generate modules with a ""basepath"" pointing to the base installation PATH, and then all the append/prepend/setenv would do a pathJoin of such basepath plus the appropriate bin/lib/include etc, all this process would be greatly simplified. 

Now, separating packages from core spack will probably reduce the pressure on updating so often, so maybe that's an orthogonal way to ease this pain point.",I guess I expresses that already enough in the other fields.,"It's extremely rare than I encounter something missing, and they are typically obscure ones, not ""key"" ones","Earlier in my career (around the same time when spack was born) I started writing something similar to spack (and easy_build). I guess we were all having the same problem and finding our own solutions. My code served well the institution I was working at the time, but I failed to nurture it enough, advertising it etc, so we eventually outgrew it because by myself I could not improve it fast enough to keep up with our growing needs. At that point, we started using spack. It was a very steep learning curve, but I'm glad to have taken it, because spack has really reached a tipping point that is now an essential part of my job, almost as important as having an operating system or a scheduler: I can't think how we could daily use the cluster without it (like if we didn't have a OS or Slurm: sure we could go through many pains and still work, but oh boy!). It's easy to get lost in the discussions of ""this thing in spack doesn't work as I wish/need"" and missing the ""everything else works just great"". So a big THANK YOU for everything in spack that DOES work well, which is plenty!",,,,,,,
4/9/2025 13:31:04,Scientist/Researcher,University research group,United States,"C, C++, Python, R, sh/bash/other shell script","HPC / Simulation, Statistics / Data Analysis, Bioinformatics, Visualization, User Support, System Administration",Word of mouth,8,"Packages, Documentation, Slack Discussions, Issues, Spack User Meeting Talk, Spack Community Zoom Meetings","0.23, develop (1.0.0dev0)","macOS 15 (Sequoia), RHEL 6, RHEL 7, RHEL 8, Rocky 8, Ubuntu 18, Ubuntu 24, Debian 10, Debian 11, Gentoo",100 - 200,"3.9, 3.11","spack load, Spack environments, spack view","Environments, spack external find, Externals in packages.yaml, Distributed Builds (srun/mpirun spack install), spack develop, Variant/flag propagation (++, ~~, ==), Git versions, spack test, spack load",Yes -- just one,No,No,"AMD, Intel, ARM","NVIDIA Other, Intel Xe (Ponte Vecchio)","gcc, LLVM, armclang",Critical,Slightly Important,Slightly Important,Slightly Important,Slightly Important,Very Important,Very Important,Slightly Important,Slightly Important,Somewhat important,Very Important,Very Important,Not Important,Somewhat important,Very Important,Slightly Important,"Suggestions paired with error messages. Sort of like ubuntu will tell you what package to install if an executable does not exist, it would be nice if spack told you if a speck was ambiguous what available options would make the spec non-ambiguous (assuming there are not 100 options)",Not sure,"Yes, I'm presenting!",No,"Documentation, Slack, GitHub Issues, spack help, Source Code, Weekly Telecons",Monthly,Probably not,Good,Excellent,Excellent,Excellent,"I had to support my old research lab server with a spack error caused from some of the breaking changes in the upcoming spack 1.0 release; the server has a CRON job that pulls from the git develop branch at midnight, so for now I've switched to the 0.23 (0.23.1?) tag and had to downgrade the spack DB version by renaming the old and rebuilding the DB. So now at least they're back up and running as before.","Usual spack workflow is first to create an spack environement. For a particular SLURM job I broadly have different environments for different workflows. I also always have a ""login"" environment I setup on every cluster I work on to have the latest emacs, tmux, stow, etc. Otherwise when I'm helping users I create a branch for their PR or issue and play around with that to see the GitHub issue through.","I was able to install a package that required about 250 other packages - I had to add that package to spack. Previously, I did that using a singularity container. But spack is more sustainable from a software development, OS portability perspective, and simplicity of use perspective.",I think the package review process could have specific automated checks to not rely as much on manual review. It seems like there is a lot of esoteric knowledge tied up. A friend of mine in CS says the best code review is from automated tools but of course it takes a lot of work to set those up.,"Some sort of training course for HPC sysadmins? Also like other large community projects, a better explanation of what peoples roles are, the teams they are on, their responsibilities, how to join those teams, where those teams communicate, ways to help out with the project.",I haven't had trouble adding any packages I've needed. Usually problems are from poorly written software that would give any packager a headache.,"On a previous spack survey my comment ended up appearing on one of the spack highlight  pages that ""spack makes me enjoy coming into work everyday"". I am longer an HPC sysadmin who uses spack that consistently, but it's still one of my favorite projects and communities.",,,,,,,
4/9/2025 15:40:01,Computational Scientist,"DOE/NNSA Lab (e.g., LLNL/LANL/SNL)",United States,"C, Python","HPC / Simulation, DevOps",Used at my site,1,Packages,develop (1.0.0dev0),"macOS 15 (Sequoia), Debian 12, Cray EX",10 - 100,"3.9, 3.10","spack load, Spack environments","Environments, Externals in packages.yaml, Concretization preferences in packages.yaml",Yes -- just one,No,No,"AMD, Intel, ARM",No GPUs,"gcc, armclang",Critical,Not Important,Slightly Important,Slightly Important,Slightly Important,Critical,Somewhat important,Slightly Important,Not Important,Slightly Important,Not Important,Very Important,Not Important,Not Important,Not Important,Not Important,,Not sure,"Yes, I'm presenting!",Yes,"Documentation, Slack, Coworkers",Monthly,Probably,Good,Excellent,Good,Good,Created a Spack package,Created Spack package for BEE project at LANL,It has been extremely useful being able to install our on-prem application with Spack,Error messages are not helpful/obvious for first-time users.,Improve error message style/format.,NA,NA,,,,,,,
4/9/2025 18:50:00,HPC User / Analyst,"DOE/Office of Science Lab (e.g., ORNL/ANL/LBL)",United States,"Fortran, C, Python, Go, Perl, sh/bash/other shell script, Ruby, Lua, PHP","HPC / Simulation, Statistics / Data Analysis, AI/ML, Computer Science, High Energy Physics, Compiler Testing, Visualization, User Support, System Administration, DevOps",Used at my site,2,"Documentation, Slack Discussions, GitHub Discussions, Issues, Spack Community Zoom Meetings",develop (1.0.0dev0),"SLES15, Cray EX","500-1,000","3.10, 3.11, 3.12, 3.13","spack load, Spack environments, Lmod, spack view, Containers","Environments, Module generation, spack containerize, Chaining (upstreams), Stacks (matrices in environments), Mirrors (spack mirror create / air gap support), Build caches (making binary packages), OCI build caches (pushing packages to container registries), Public build caches at cache.spack.io / binaries.spack.io, E4S build caches (https://e4s.io), spack ci (GitLab pipeline generation -- yourself, not on our CI), spack-python (Python scripting), spack external find, Externals in packages.yaml, Concretization preferences in packages.yaml, spack develop, concretization: --reuse (default), concretizer:unify:true (concretize together), concretizer:unify:when_possible, Variant/flag propagation (++, ~~, ==), Git versions, spack test, spack load, E4S containers (https://e4s.io)",Yes -- just one,Yes,"No, but I'm planning on some helpers to automate some spack processes",AMD,NVIDIA Ampere,"gcc, Intel OneAPI, NVHPC, LLVM, nvcc (CUDA), CCE (Cray Compilers)",Critical,Critical,Not Important,Not Important,Critical,Somewhat important,Critical,Somewhat important,Slightly Important,Slightly Important,Very Important,Slightly Important,Not Important,Not Important,Slightly Important,Slightly Important,Verify packages in the packages.yaml actually exist,No,No,Yes,"Documentation, Slack, GitHub Issues, Source Code",Daily,Probably,Excellent,Good,Good,Excellent,Opened issue 50k ;),spack info ; spack spec ; add some externals ; spack install. Apply to a env or view as needed.,Building a climate stack for a number of climate users,"Finding packages to be externals that spack cannot find automatically (checking against rpms, names not the same, etc)",Anything that uses a GUI is a pain to build because most of the externals are not findable,Not that I know of,"Keep up the great work, thanks so much",,,,,,,
4/9/2025 19:50:51,DevOps/SRE,"DOE/NNSA Lab (e.g., LLNL/LANL/SNL)",United States,"C++, Python","HPC / Simulation, DevOps",Word of mouth,7,"Packages, Core Features, Documentation, Slack Discussions, GitHub Discussions, Issues, Tools/integrations, Spack User Meeting Talk","0.23, develop (1.0.0dev0)","macOS 14 (Sonoma), RHEL 8","> 1,000","3.6, 3.8, 3.9, 3.12","spack load, Spack environments, Environment Modules (TCL modules), spack build-env, spack view","Environments, Module generation, Chaining (upstreams), Mirrors (spack mirror create / air gap support), Build caches (making binary packages), Weekly develop snapshots on cache.spack.io, OCI build caches (pushing packages to container registries), Public build caches at cache.spack.io / binaries.spack.io, build-env (debug a build), spack-python (Python scripting), spack external find, Externals in packages.yaml, Concretization preferences in packages.yaml, `require:` directive in packages.yaml, `prefer:` directive in packages.yaml, Distributed Builds (srun/mpirun spack install), spack develop, concretization: --fresh (build everything fresh), concretizer:unify:true (concretize together), Variant/flag propagation (++, ~~, ==), Git versions, spack load, spackbot (@spackbot fix style; @spackbot rebuild everything, etc.), spack diff (compare two specs)",Yes -- several,No,spack manager (https://sandialabs.github.io/spack-manager/),"AMD, Intel, ARM","NVIDIA Ampere, NVIDIA Hopper, AMD MI300A","gcc, Intel OneAPI, LLVM, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA), CCE (Cray Compilers)",Very Important,Slightly Important,Not Important,Slightly Important,Very Important,Critical,Very Important,Very Important,Slightly Important,Very Important,Somewhat important,Very Important,Slightly Important,Critical,Critical,Critical,,Yes,"Yes, I'm presenting!",Yes,"Documentation, Slack, Coworkers, spack help, Source Code, Weekly Telecons, ChatGPT / other LLMs",Daily,Probably,OK,Excellent,Good,Good,Wrote an extension,It is a platform which I build devops infrastructure around,It is a platform which I build devops infrastructure around,"Needing to reconcretize often with `--force`, incremental reconcretization almost never works for me. Solver speed. Interactions with filesystems and general latency of commands when chaining calls to spack together.",Reduce sensitivity to filesystem latency; make it faster,,I'm spack-a-holic. Grateful for spack everyday.,,,,,,,
4/9/2025 20:45:46,Scientist/Researcher,University HPC/Computing Center,United States,Julia,"Statistics / Data Analysis, AI/ML",Used at my site,0,No,0.23,Rocky 8,100 - 200,3.11,Spack environments,"Environments, spack load",No,No,No,"AMD, Intel",NVIDIA Ampere,gcc,Slightly Important,Not Important,Not Important,Not Important,Not Important,Slightly Important,Slightly Important,Not Important,Not Important,Not Important,Not Important,Not Important,Not Important,Not Important,Slightly Important,Not Important,,Not sure,No,No,Documentation,Monthly,Probably not,OK,Good,OK,Good,load an environment,,,,,,,,,,,,,
4/10/2025 0:18:00,User Support Staff,University HPC/Computing Center,Germany,"Fortran, C, C++, Python, sh/bash/other shell script","HPC / Simulation, User Support",From the meetings in the Exascale Computing Project,0,Issues,e4s 24.11,AlmaLinux 9,10 - 100,3.11,Environment Modules (TCL modules),"Module generation, Build caches (making binary packages)",No,No,No,"AMD, Intel","NVIDIA Hopper, NVIDIA Blackwell","gcc, Intel OneAPI, NVHPC, nvcc (CUDA)",Somewhat important,Not Important,Not Important,Not Important,Very Important,Slightly Important,Very Important,Somewhat important,Not Important,Not Important,Not Important,Not Important,Not Important,Not Important,Not Important,Not Important,,Yes,No,No,"Documentation, Slack, Source Code",Yearly,Probably not,OK,OK,Good,Good,Installing a package.,"We have users with very different levels of Linux proficiency. The users with little Linux experience tend to come to us to ask for specific computational packages to be installed. I tend to try to install them with Spack first. I do a Spack install of the package for CPUs and then for GPUs. I also copy the module files to our regular module files locations. I edit the module files so they know where to find the Spack module files for the dependencies. One thing I need to be careful about is the microarchitecture, which is sapphirerapids but the assembler does not recognize the AVX512_VNNI instructions, so I have to force compilation for cascadelake instead. I have had trouble mixing package builds for multiple microarchitectures, so I am always going for the highest common denominator, which is cascadelake. ",The release of e4s-24.11. Many issues I had before have been resolved and things run much more smoothly.,I have users who want the latest greatest thing from particular simulation codes. These things are often not yet supported in Spack. Trying to add those additional libraries to a given package often seems to require a lot more than just making sure the library compiles with Spack and then telling the code package that needs it to just link that library. I tend to get stuck there because of the level of CMake knowledge and code specific knowledge required to figure this out. It doesn't help that applications code tend to do unconventional things in their build systems to integrate extra functionality. It would be really nice if developers could be convinced that extra functionality just comes in a library that gets compiled separately and linked to an application. That way the workflow for adding extra pieces would be clear.,"Possibly advertising. The more people use Spack the more it makes sense for code developers to make sure their stuff builds well with Spack, the more likely it is that developers will adopt conventional build strategies, the more sane everything gets for the rest of us.",No.,,,,,,,,
4/10/2025 0:52:39,Research Software Engineer (RSE),University HPC/Computing Center,Switzerland,"C++, Python",HPC / Simulation,Word of mouth,5,"Packages, Slack Discussions, Issues",develop (1.0.0dev0),"Cray EX, NixOS",100 - 200,3.12,spack build-env,"Environments, Chaining (upstreams), Build caches (making binary packages), Weekly develop snapshots on cache.spack.io, build-env (debug a build), spack-python (Python scripting), spack external find, Externals in packages.yaml, Concretization preferences in packages.yaml, `require:` directive in packages.yaml, `prefer:` directive in packages.yaml, spack develop, concretization: --reuse (default), concretization: --fresh (build everything fresh), concretizer:unify:true (concretize together), concretizer:unify:when_possible, Multiple build systems in one package, Variant/flag propagation (++, ~~, ==), Git versions, spack load, spackbot (@spackbot fix style; @spackbot rebuild everything, etc.)",Yes -- several,Yes,No,"AMD, ARM","NVIDIA Ampere, NVIDIA Hopper, AMD MI200/250X, AMD MI300A","gcc, NVHPC, LLVM, nvcc (CUDA)",Very Important,Slightly Important,Somewhat important,Very Important,Slightly Important,Somewhat important,Slightly Important,Very Important,Somewhat important,Slightly Important,Slightly Important,Slightly Important,Slightly Important,Slightly Important,Somewhat important,Very Important,,Yes,"Yes, I'm attending",No,"Documentation, Slack, Coworkers, GitHub Issues, Source Code",Weekly,Probably not,Good,Excellent,Good,Good,Update a package with spack checsum --latest --add-to-package,,,,,,,,,,,,,
4/10/2025 1:07:50,Software Developer,Company,Singapore,"Fortran, C, C++, Python, sh/bash/other shell script, Lua","HPC / Simulation, AI/ML, Compiler Testing, Profiling Tools",Linux Foundation / HPSF,4,"Packages, Documentation, Slack Discussions, Issues",develop (1.0.0dev0),"Ubuntu 20, Ubuntu 22, Ubuntu 24, SLES15, Windows Subsystem for Linux (WSL), Cray EX",200 - 500,"3.8, 3.10, 3.12","Spack environments, Lmod, Custom script or env vars","Environments, Module generation, Stacks (matrices in environments), spack external find, Externals in packages.yaml, Concretization preferences in packages.yaml, `require:` directive in packages.yaml, `prefer:` directive in packages.yaml, Distributed Builds (srun/mpirun spack install), concretization: --reuse (default), concretization: --fresh (build everything fresh), concretizer:unify:true (concretize together), concretizer:unify:when_possible, Variant/flag propagation (++, ~~, ==), spackbot (@spackbot fix style; @spackbot rebuild everything, etc.)",No,Yes,Other script to wrap spack,"AMD, ARM","AMD MI200/250X, AMD MI300A, AMD MI300X, No GPUs","gcc, LLVM, AMD ROCmCC (amdclang/hipcc), CCE (Cray Compilers), armclang",Critical,Not Important,Somewhat important,Very Important,Critical,Critical,Critical,Critical,Very Important,Somewhat important,Very Important,Critical,Very Important,Critical,Critical,Critical,,Yes,Maybe,No,"Documentation, Slack, Coworkers, GitHub Issues, spack help, Source Code",Weekly,Probably,Excellent,Excellent,Good,Excellent,Testing LLVM flang 20.1,"Clone Spack develop branch and additionally my fork if on a personal device. Run spack external find --all for both OS packages and GPU stack, then adjust as necessary.",Buliding my own compilers and MPI stacks for testing purposes,Waiting to concretize and build,Better diagnostic messages and smoother user experience in general,ROCm version pinning,"As soon as I have more time (and authorization from my higher-ups), I'd like to start maintaining Spack recipes for some of the ROCm components.",,,,,,,
4/10/2025 2:57:51,Research Software Engineer (RSE),Other Public Research Lab,Germany,"Fortran, C, Perl, sh/bash/other shell script","HPC / Simulation, Computer Science",Used at my site,6,"Slack Discussions, Issues","0.21, develop (1.0.0dev0), custom fork","RHEL 8, Debian 11, Debian 12",10 - 100,3.11,Environment Modules (TCL modules),"Chaining (upstreams), Externals in packages.yaml, Concretization preferences in packages.yaml",Yes -- just one,Yes,No,"AMD, Intel, ARM","NVIDIA Ampere, NVIDIA Other","gcc, Classic Intel Compilers, Intel OneAPI, NVHPC, NAG",Very Important,Not Important,Not Important,Not Important,Somewhat important,Very Important,Very Important,Very Important,Not Important,Not Important,Not Important,Not Important,Not Important,Somewhat important,Not Important,Not Important,,Not sure,No,No,"Documentation, Slack, GitHub Issues",Monthly,Probably,OK,OK,Good,OK,Installed some packages.,,,Finding out whether a spec will actually install what I intended.,,,,,,,,,,
4/10/2025 7:32:00,System Administrator,Company,United States,"Python, Perl, sh/bash/other shell script","HPC / Simulation, Computer Science, System Administration",Birds-of-a-feather (BOF) at conference,7,"Documentation, Issues, Tools/integrations",0.22,"RHEL 8, RHEL9, Rocky 8, Rocky 9",10 - 100,3.9,"Spack environments, Lmod","Module generation, Git versions, spack load",No,No,No,"AMD, Intel, RISC-V","NVIDIA Ampere, NVIDIA Hopper, NVIDIA Blackwell","gcc, Intel OneAPI, NVHPC, LLVM",Critical,Not Important,Slightly Important,Somewhat important,Somewhat important,Somewhat important,Critical,Somewhat important,Not Important,Not Important,Somewhat important,Somewhat important,Not Important,Somewhat important,Somewhat important,Slightly Important,"Better focus on a system-wide-admin-build-but-all-users-access-via-modules configuration and management. As an admin for a number of small-used-by-the-research-group-only type clusters (20-70 nodes), it can be an awful pain to get spack happy with me as the admin creating a install with all packages in /opt with module files that all users of the system can use WITHOUT them having access to muck around with things they shouldn't. The every-user-has-an-individual-install-of-their-applications is used by exactly ZERO percent of my end users.",Not sure,No,Yes,"Documentation, Mailing List, spack help, Source Code",Monthly,Probably not,OK,OK,OK,OK,Installed a package,"I'm using Spack a lot less these days. Nearly all the time now, I need a simple install into /opt with module files for all users. And it's been easier to extract the AMD compilers myself or simply use the OneAPI DNF repo. I have a ~dozen ""small"" clusters for different research groups that I help with and they generally need compilers and openmpi compiled and made available to all users through modules. I simply don't have the bandwidth to deal with Spack's oddities moving system to system.",I was having a heck of a time with AMD's HPL on a new cluster build a few months ago. Built it fairly quickly with Spack to do the test run. Then AMD fixed the issue and I went back to their download because it's easier to deploy and manage.,"Ideally, I have a Git repo I clone to every HPC, and I run my script out of that repo that sets up all the common applications I want/need into /opt for all users available with modules. Unfortunately, despite multiple attempts and lots of help from the community - I've never reached that goal. It might work for a time, but then something will change and I'll inevitably waste a day or two before giving up and just doing it manually.",You should see the list of packages I have to exclude from Spack trying to build when they exist on Rocky 9 already. The scan for system packages is not very good. ,Not that I can think of now,"I don't want to be a discouragement. Clearly Spack is working great for a lot of people. It just seems that Spack is going down a path that isn't the very-simple path that I'm on. My setup is really quite simple and while in theory I'd love to have it managed by Spack, it seems our directions are diverging. And that's ok. :-)",,,,,,,
4/10/2025 8:22:33,DevOps/SRE,Other Public Research Lab,United States,"Fortran, C, Python, Go, Perl, sh/bash/other shell script","HPC / Simulation, Statistics / Data Analysis, AI/ML, Computer Science, System Administration, DevOps",Word of mouth,5,"GitHub Discussions, Issues","0.19, 0.21, 0.22, 0.23","RHEL 8, RHEL9, CentOS 7, CentOS 8, Rocky 9, Ubuntu 20, Ubuntu 22",100 - 200,"3.9, 3.11","spack load, Lmod, Environment Modules (TCL modules)","Chaining (upstreams), Mirrors (spack mirror create / air gap support), Build caches (making binary packages), spack external find, spack load",No,Yes,No,"AMD, Intel, ARM","NVIDIA Volta, NVIDIA Ampere, NVIDIA Hopper, AMD MI200/250X, AMD MI300A, AMD MI300X","gcc, Classic Intel Compilers, Intel OneAPI, NVHPC, LLVM, nvcc (CUDA)",Very Important,Somewhat important,Critical,Somewhat important,Somewhat important,Very Important,Critical,Very Important,Slightly Important,Very Important,Slightly Important,Slightly Important,Critical,Very Important,Somewhat important,Very Important,"""Best Practices"" (of which there are many) - how to structure your install, how to upgrade across spack versions, tips-and-tricks/common pitfalls - once a spack install is created it's ""hard to upgrade"" or get the users to ""move to something new"" so starting on the right foot is very helpful.",Yes,No,Yes,"Documentation, Slack, GitHub Issues, GitHub Discussions, Source Code",Weekly,Probably,Good,Excellent,Excellent,Excellent,Installing a NetCDF & compiler matrix,"Developers ask for ""software to be installed"", and usually don't know/don't bother giving us the options, versions, etc. So being able to iterate on ""is this the right version/flags"" is helpful.","Repeatability, ""living documentation"" (what was installed, what dependencies, what versions, what flags, etc.).","Upgrading from older versions to newer (or newer repos). Users get attached to the current install, especially with modules that include the hash in the name.","On-ramps for _developers_ / researchers to use the tool (chaining and installing your own repos, or environments, etc etc ) - not just expect ""someone else to install it and deal with it forever"". Cultural change on their end, but a walkthrough, example ""how $developer solved their problem"" might help",None at the moment.,"Great software and community, thank you!!!",,,,,,,
4/10/2025 8:25:53,System Administrator,University HPC/Computing Center,United States,Python,HPC / Simulation,Search,1,No,0.22,Ubuntu 22,10 - 100,3.1,Environment Modules (TCL modules),,No,No,No,"AMD, Intel",NVIDIA Other,"gcc, Intel OneAPI, nvcc (CUDA)",Slightly Important,Not Important,Not Important,Not Important,Not Important,Not Important,Somewhat important,Not Important,Not Important,Not Important,Not Important,Not Important,Not Important,Critical,Somewhat important,Somewhat important,,Not sure,No,No,"Documentation, Slack, spack help",Yearly,No,Excellent,Excellent,Excellent,Excellent,installing packages,Math Dept HPC servers used by researchers needing various packages/versions. ,,,,,,,,,,,,
4/10/2025 13:25:54,Data Scientist,"DOE/NNSA Lab (e.g., LLNL/LANL/SNL)",United States,Bash,"Statistics / Data Analysis, Bioinformatics, User Support",Word of mouth,3,No,"0.23, 1.0.0-alpha* pre-releases, develop (1.0.0dev0), custom fork","macOS 10.15 (Catalina), RHEL9, Rocky 8, Ubuntu 24, SLES15, Cray XD",200 - 500,"3.10, 3.11, 3.13","spack load, Custom script or env vars","Mirrors (spack mirror create / air gap support), Build caches (making binary packages), OCI build caches (pushing packages to container registries), Public build caches at cache.spack.io / binaries.spack.io, build-env (debug a build), spack external find, Externals in packages.yaml, Variant/flag propagation (++, ~~, ==)",Yes -- just one,No,No,"AMD, Intel, ARM",No GPUs,"gcc, LLVM",Very Important,Slightly Important,Somewhat important,Somewhat important,Slightly Important,Very Important,Somewhat important,Slightly Important,Not Important,Slightly Important,Slightly Important,Not Important,Slightly Important,Slightly Important,Very Important,Very Important,,Not sure,No,No,"Slack, GitHub Issues, GitHub Discussions, Source Code",Weekly,Probably not,OK,OK,Good,Good,Creating and updating packages,Develop and maintain software for my group,Reproducible builds across multiple platforms,In the process of updating and developing packages it is not hard to break spack.,I find GitHub issues and slack much more effective than the docs for answering my questions.  I think the docs could benefit from many more examples and an extensive troubleshooting guide.  It’s a shame that so much good info and advice in slack doesn’t get saved in the docs. ,,I have created and/or updated a large number of packages.  I would like to contribute back to the project but fighting with git and PRs is enough of an obstacle that I haven’t made the effort.  I wish there was an easier way to contribute.,,,,,,,
4/10/2025 16:26:10,Research Software Engineer (RSE),"DOE/Office of Science Lab (e.g., ORNL/ANL/LBL)",United States,C++,"HPC / Simulation, Computer Science",Search,2,No,"0.23, develop (1.0.0dev0)","macOS 15 (Sequoia), AlmaLinux 9","500-1,000","3.10, 3.11, 3.12","spack load, Spack environments","Environments, Module generation",No,No,No,"AMD, ARM",NVIDIA Ampere,"gcc, nvcc (CUDA), CCE (Cray Compilers), armclang",Somewhat important,Not Important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Very Important,Somewhat important,Somewhat important,Slightly Important,Very Important,Slightly Important,Slightly Important,Very Important,Somewhat important,,Yes,No,No,Documentation,Monthly,No,Good,Good,Good,Good,Create an environment to install dependencies of a project I work on,,,,,,,,,,,,,
4/10/2025 21:57:01,HPC User / Analyst,Company,India,"Fortran, C, C++, Python","HPC / Simulation, Statistics / Data Analysis, AI/ML, Bioinformatics",Used at my site,2,"Packages, Spack User Meeting Talk",develop (1.0.0dev0),"RHEL 8, RHEL9, Rocky 8, Rocky 9",100 - 200,"3.9, 3.10","spack load, spack view, Containers","Environments, spack containerize, Build caches (making binary packages), Externals in packages.yaml, spack load",Yes -- just one,,No,AMD,"AMD MI100, AMD MI200/250X, AMD MI300A, AMD MI300X","gcc, Intel OneAPI, LLVM, aocc",Very Important,Slightly Important,Somewhat important,Very Important,Critical,Very Important,Very Important,Critical,Somewhat important,Somewhat important,Slightly Important,Slightly Important,Very Important,Very Important,Somewhat important,Slightly Important,,,No,No,"Documentation, Slack, GitHub Issues, GitHub Discussions, Source Code, Weekly Telecons, ChatGPT / other LLMs",Weekly,Probably not,OK,Good,Good,Good,Installing a package and enhancing the support for aocc compiler and aocl libraries.,"My primary use case is to make sure application in spack builds and runs optimally with AMD CPU software toolchain (AOCC, AOCL).",User telecon meetings and slack channel is very helpful.,,,,,,,,,,,
4/10/2025 23:31:17,User Support Staff,Company,India,"Fortran, C, C++, sh/bash/other shell script","HPC / Simulation, Visualization, User Support",Tutorial,2,Documentation,"0.22, 0.23","CentOS 8, AlmaLinux 9, Ubuntu 24, Windows 11","500-1,000","3.10, 3.12","spack load, Spack environments, Lmod, Environment Modules (TCL modules), spack build-env, spack view, Containers, Custom script or env vars","Environments, Module generation, spack containerize, Mirrors (spack mirror create / air gap support), build-env (debug a build), spack external find, Externals in packages.yaml, Concretization preferences in packages.yaml, Multiple build systems in one package, Variant/flag propagation (++, ~~, ==), spack test, spack load, spack diff (compare two specs), spack env track",Yes -- just one,Yes,spack manager (https://sandialabs.github.io/spack-manager/),"AMD, Intel, IBM Power, ARM, RISC-V, IBM Z / s390","NVIDIA T4, NVIDIA Volta, NVIDIA Ampere, NVIDIA Hopper, NVIDIA Blackwell, NVIDIA Other, AMD MI100, AMD MI200/250X, AMD MI300A, AMD MI300X, Intel Xe (Ponte Vecchio), Intel Gaudi","gcc, Classic Intel Compilers, Intel OneAPI, NVHPC, LLVM, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA), IBM XL, NAG",Very Important,Very Important,Slightly Important,Somewhat important,Critical,Critical,Critical,Critical,Somewhat important,Very Important,Very Important,Very Important,Critical,Critical,Critical,Somewhat important,give (amd gpu )rocm support to every hpc applicaion,Yes,Maybe,Yes,"Documentation, Slack, GitHub Issues, GitHub Discussions, Source Code, ChatGPT / other LLMs",Monthly,Probably,Good,Good,Good,Excellent,most of the hpc applications like quantum espresso not supported  by rocm (amd gpu ) support .,,,,,,,,,,,,,
4/10/2025 23:58:57,Scientist/Researcher,Other Public Research Lab,Japan,"C++, Python",HPC / Simulation,Word of mouth,5,Packages,0.23,"RHEL 8, CentOS 8, Ubuntu 24",200 - 500,"3.8, 3.9, 3.10, 3.11, 3.12, 3.13",spack load,"Chaining (upstreams), Mirrors (spack mirror create / air gap support), spack external find, Externals in packages.yaml, spack load",No,My site has a front-end or extension to Spack,No,"AMD, Intel, ARM","NVIDIA Hopper, AMD MI200/250X","gcc, Intel OneAPI, NVHPC, LLVM, Fujitsu Compilers",Slightly Important,Not Important,Not Important,Not Important,Very Important,Very Important,Somewhat important,Very Important,Not Important,Slightly Important,Somewhat important,Not Important,Not Important,Very Important,Critical,Very Important,,Yes,No,Yes,"Documentation, Coworkers, GitHub Issues",Monthly,Probably not,Good,Good,Good,Good,installing likwid with several compilers,,,"that it uses my home directory by default, it took a long time to figure out how I can sensibly share spack installations with others",,,,,,,,,,
4/11/2025 4:27:26,Research Software Engineer (RSE),University HPC/Computing Center,France,"Fortran, C, C++, Python","HPC / Simulation, AI/ML, Computer Science, User Support",Word of mouth,3,"Packages, Slack Discussions, Issues","0.23, 1.0.0-alpha* pre-releases","RHEL 8, RHEL9, Fedora, Cray EX","> 1,000","3.6, 3.11, 3.12","Spack environments, Lmod, Environment Modules (TCL modules), spack view, Custom script or env vars","Environments, Module generation, Mirrors (spack mirror create / air gap support), Build caches (making binary packages), Public build caches at cache.spack.io / binaries.spack.io, Concretization preferences in packages.yaml, `require:` directive in packages.yaml, concretization: --reuse (default), concretization: --fresh (build everything fresh), concretizer:unify:true (concretize together), concretizer:unify:when_possible, Variant/flag propagation (++, ~~, ==)",Yes -- several,Yes,No,AMD,"NVIDIA Ampere, AMD MI200/250X, AMD MI300A","gcc, Classic Intel Compilers, Intel OneAPI, NVHPC, LLVM, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA), CCE (Cray Compilers)",Slightly Important,Not Important,Not Important,Slightly Important,Slightly Important,Very Important,Somewhat important,Critical,Not Important,Slightly Important,Not Important,Not Important,Not Important,Critical,Critical,Somewhat important,"Better module generation (better support for tcl module read using lmod, notably, for hidden modules)",No,"Yes, I'm presenting!",No,"Documentation, Slack, Coworkers, Source Code",Monthly,Probably not,Good,OK,OK,OK,installing mumps,"Create a set of coherent tool. Build them. Expose them using modules.
spack spec; spack info; spack install",Avoid redundant installation hurdles,"Badly designed packages, slow moving time when no maintainer for a package, lack of ""variant combination robustness"" (lots of untested combination is obviously unavoidable though)",More robust packages,"Simply, take a distribution such as fedora, and import everything.",,,,,,,,
4/11/2025 9:14:19,Software Developer,Other Public Research Lab,United States,"Fortran, C, Python, sh/bash/other shell script","HPC / Simulation, numerical weather prediction",Used at my site,3,"Packages, Core Features, Slack Discussions, Issues, Tools/integrations, Spack Community Zoom Meetings","develop (1.0.0dev0), custom fork","Rocky 8, Rocky 9, Ubuntu 22, Ubuntu 24",100 - 200,"3.8, 3.9, 3.10, 3.11, 3.12","spack load, Spack environments, Lmod, Environment Modules (TCL modules), spack build-env, spack view, Containers, Custom script or env vars","Environments, Module generation, spack containerize, Chaining (upstreams), Stacks (matrices in environments), Mirrors (spack mirror create / air gap support), Build caches (making binary packages), OCI build caches (pushing packages to container registries), build-env (debug a build), spack external find, Externals in packages.yaml, Concretization preferences in packages.yaml, `require:` directive in packages.yaml, `prefer:` directive in packages.yaml, Distributed Builds (srun/mpirun spack install), spack develop, concretization: --reuse (default), concretization: --fresh (build everything fresh), concretizer:unify:true (concretize together), concretizer:unify:when_possible, spack load, spackbot (@spackbot fix style; @spackbot rebuild everything, etc.)",Yes -- several,My site has a front-end or extension to Spack,spack-stack (https://github.com/JCSDA/spack-stack),"AMD, Intel",not sure,"gcc, Classic Intel Compilers, Intel OneAPI",Slightly Important,Not Important,Not Important,Not Important,Slightly Important,Somewhat important,Very Important,Slightly Important,Somewhat important,Critical,Not Important,Somewhat important,Not Important,Not Important,Slightly Important,Somewhat important,"UPDATE DOCUMENTATION; test-only variants and resources; easier compiler selection (esp. excluding specs when finding); make env chaining for end users easier (""conda create --clone"" analog); enable caching of Lmod/TCL module files",Not sure,No,No,"Documentation, Slack, Coworkers, GitHub Issues, Source Code, Weekly Telecons, ChatGPT / other LLMs",Weekly,Probably not,Bad,Excellent,Good,Good,created a Python venv from Spack-installed Python & modules,spack-stack maintainer; we use Spack for package testing in CI as well as model application CI for providing dependencies,spack develop; env chaining,"Inconsistent ability to specify compiler(s) for an environment. Being able to inclusively/exclusively filter specs, including by version, for ""spack compiler find"" or now ""spack external find"" would go a long way here, as well as something like ""packages:all:conflicts:['^unwantedcompiler@1.2.3']"".",I think a coordinated effort to update the documentation would be fantastic (and with LLMs it will be a breeze! :) ),no,"Keep up the great work. I feel like half the time when I'm about to request a new feature in Spack, it's already there. Apart from some exceptions mentioned in my response, I feel like the Spack team is very sensitive and responsive to the use cases of its users.",,,,,,,
4/11/2025 9:33:23,System Administrator,Company,United States,"Python, Perl, sh/bash/other shell script","AI/ML, User Support, System Administration",Used at my site,5,No,0.23,"RHEL 8, Ubuntu 20, Ubuntu 22","> 1,000","3.9, 3.10","Lmod, Containers",Module generation,No,No,No,"AMD, Intel, ARM","NVIDIA Hopper, NVIDIA Blackwell",gcc,Somewhat important,Somewhat important,Somewhat important,Very Important,Somewhat important,Very Important,Somewhat important,Very Important,Very Important,Very Important,Very Important,Slightly Important,Slightly Important,Somewhat important,Critical,Very Important,,Yes,No,Yes,Documentation,Monthly,Probably not,Good,OK,Good,Good,installing packages and building modules,,,,,,,,,,,,,
4/13/2025 23:29:37,Software Developer,Company,France,"Fortran, C, C++, Python, sh/bash/other shell script","HPC / Simulation, Computer Science, Compiler Testing",Used at my site,4,No,"0.23, 1.0.0-alpha* pre-releases, develop (1.0.0dev0), custom fork","RHEL 7, RHEL 8, RHEL9, CentOS 7, CentOS 8, Rocky 8, Rocky 9, Ubuntu 20, Ubuntu 22, Ubuntu 24, Debian 11, Debian 12, Arch, Amazon Linux, SLES15, openSuSE, Fedora, Alpine, Windows Subsystem for Linux (WSL)",10 - 100,"3.6, 3.7, 3.8, 3.9, 3.10, 3.11, 3.12","spack load, Lmod, Environment Modules (TCL modules)","Environments, Module generation, spack containerize, Chaining (upstreams), Stacks (matrices in environments), Mirrors (spack mirror create / air gap support), Build caches (making binary packages), spack external find, Externals in packages.yaml, Concretization preferences in packages.yaml, spack load",,No,No,"AMD, Intel, ARM, RISC-V","NVIDIA Ampere, NVIDIA Hopper, NVIDIA Blackwell, NVIDIA Other, AMD MI200/250X, AMD MI300A, AMD MI300X, Intel Xe (Ponte Vecchio)","gcc, Classic Intel Compilers, Intel OneAPI, NVHPC, LLVM, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA), armclang, cannot disclose",Slightly Important,Not Important,Not Important,Not Important,Somewhat important,Somewhat important,Very Important,Somewhat important,Not Important,Not Important,Not Important,Not Important,Not Important,Very Important,Slightly Important,Not Important,,Yes,No,Yes,"Documentation, Slack, Coworkers, GitHub Issues, Source Code",Weekly,Probably not,OK,Good,OK,OK,build a software stack for a Python+cuda application,"no usual usecase, can use spack from installing a missing tool to build a full application for debugging",container generation for cloud deployment,"Concretizer decisions when mixing compilers (e.g., gcc for python packages, nvhpc for some GPU stuff : spack will try to build python things with nvhpc ; or rebuild gcc runtime, etc.)",Concretizer :),N/A,,,,,,,,
4/14/2025 5:17:16,Computational Scientist,ELI-NP,Romania,"C++, Python, Julia",HPC / Simulation,Word of mouth,5,Issues,0.23,Ubuntu 24,100 - 200,3.12,Environment Modules (TCL modules),"Environments, Module generation, spack external find, Externals in packages.yaml, Concretization preferences in packages.yaml, concretization: --reuse (default), concretizer:unify:true (concretize together), concretizer:unify:when_possible",No,No,No,Intel,NVIDIA Hopper,"gcc, nvcc (CUDA)",Very Important,Somewhat important,Somewhat important,Somewhat important,Slightly Important,Slightly Important,Slightly Important,Critical,Slightly Important,Not Important,Not Important,Slightly Important,Critical,Somewhat important,Somewhat important,Very Important,Improved documentation,Yes,No,No,"Documentation, Slack, GitHub Issues, Source Code",Weekly,Probably,OK,Good,Good,Excellent,"I installed gcc 11.2 on Ubuntu 24.04, which comes with gcc 13.3 by default.",I normally use it to install PIC codes such as WarpX and PIConGPU and their dependencies. I also use it to install older compilers on newer systems.,The environment feature was very helpful when dealing with many packages.,"The fact that it seems very hard to use Spack together with normal ""compilation by hand"" and module systems. You either build everything via Spack or everything by hand, it seems.
Also, some strange interaction with the module system: https://github.com/spack/spack/issues/50036 ",Make it possible to build the whole chain down to glibc. Add more packages (and maintainers to the packages that lack a maintainer). ,"Ideally I would like to be able to use Spack instead of conda, because they don't play nice, so there are a lot of python packages that are missing. ","Keep up the good work, Spack has come a long way in the few years, it's impressive!",,,,,,,
4/14/2025 5:52:51,User Support Staff,University research group,United Kingdom,"Fortran, C, C++, Python, sh/bash/other shell script","HPC / Simulation, AI/ML, Computer Science, Visualization",Word of mouth,3,"Slack Discussions, GitHub Discussions",0.23,"macOS 15 (Sequoia), RHEL 8, RHEL9, CentOS 7, Rocky 9, Windows Subsystem for Linux (WSL)","> 1,000",3.9,"spack load, Lmod, Environment Modules (TCL modules)","Environments, Module generation, spack containerize, Stacks (matrices in environments), spack external find, Externals in packages.yaml, `require:` directive in packages.yaml, concretizer:unify:when_possible",Yes -- just one,No,,"AMD, Intel, IBM Power, ARM","NVIDIA Volta, NVIDIA Ampere","gcc, Classic Intel Compilers, Intel OneAPI",Somewhat important,Not Important,Not Important,Not Important,Very Important,Not Important,Somewhat important,Somewhat important,Not Important,Not Important,Not Important,Not Important,Not Important,Slightly Important,Somewhat important,Somewhat important,,Yes,No,Yes,"Documentation, Slack",Weekly,Probably not,Good,Excellent,OK,Good,Installing a full scientific software stack on a stock Apple laptop.,"The main reason I use Spack is to provide reproducible software stacks to researchers, where they lack the skills to do it easily themselves.  Spack sits really nicely in a gap where it's able to do advanced builds for experts, but also quite often makes simple build easy for novices too.",The Slack community.,"Balancing the host system with Spack.  It can be very confusing using Spack on a system with a minimal set of packages installed on the host, and true dependencies aren't always as obvious as they could be.  A missing libquadmath-devel package on the host can lead to lots of very curious errors that aren't clearly exposed to the user",I'm really looking forward to you rejigging how compilers are managed by Spack.,,,,,,,,,
4/14/2025 6:29:39,Computational Scientist,Other Public Research Lab,Germany,Python,"HPC / Simulation, User Support, System Administration, DevOps",Used at my site,3,"Packages, Issues","0.19, 0.23, develop (1.0.0dev0)","Debian 11, Debian 12","500-1,000","3.9, 3.11",Lmod,"Environments, Module generation, Stacks (matrices in environments), Mirrors (spack mirror create / air gap support), Build caches (making binary packages), spack external find, Externals in packages.yaml, Concretization preferences in packages.yaml, concretizer:unify:when_possible, Multiple build systems in one package, Variant/flag propagation (++, ~~, ==), spack load, spack diff (compare two specs)",Yes -- just one,No,Other script to wrap spack,"AMD, Intel, IBM Power, ARM","NVIDIA Volta, NVIDIA Other","gcc, Classic Intel Compilers, Intel OneAPI, nvcc (CUDA)",Very Important,Slightly Important,Not Important,Not Important,Somewhat important,Slightly Important,Very Important,Very Important,Not Important,Slightly Important,Slightly Important,Not Important,Very Important,Somewhat important,Slightly Important,Not Important,Support for non-virtuals in lmod hierarchy,Not sure,No,No,"Documentation, Coworkers, GitHub Issues, Source Code",Monthly,Probably not,OK,OK,Good,Good,"Install a set of ~50 packages (some in multiple variants, not counting dependencies) in an environment with as much unification as possible.",We use Spack to provide the software stack on the local HPC. We use one environment per compiler version and collect all user-requested packages in these environments. Many packages are installed with multiple compilers and compiler versions.,All required packages are already available and support for gcc and Intel is generally good.,"- sometimes cryptic concretizer output (has improved over time), in an environment of ~150 packages (including dependencies) hard to debug
- confusing/misleading concretizer output when requesting a compiler that has not yet been installed (e.g. `spack spec zlib%gcc@14.2`, with gcc@14.2 not installed)
- support for compilers in Lmod modules limited: all compilers have the same `family`, which causes problems when using one compiler to install others, e.g. (without versions) intel-oneapi-compilers%gcc will result in unusable modules because loading intel will unload gcc (currently patched manually, I was planning to report this but did not manage to yet)
- missing support for non-virtual packages in the lmod hierarchy (in particular CUDA) requires additional work to add suitable module name suffixes (all hashes are removed in the module names because they are confusing for users)
- imbalance between system gcc and spack-installed gcc (see next point)
- writing package.py files for slightly more complicated things is a bit difficult because (i) I did not manage to get editor/lsp support for these and (ii) it is sometimes confusing what is/isn't available after the `from spack.package import *` and the documentation is not too helpful to clarify these questions (reading the source code sometimes is the only option).
- better `external` support/auto-detection for anything requiring direct kernel compatibility/interaction, e.g. knem, would be nice","Allow installing GCC again in the version provided by the system and subsequently allow picking one of the two e.g. with the /hash notation (or for my usecase it would also be fine to subsequently always use the spack-installed gcc, with the one exception being the lmod `core_compilers`, where I would like to use the system compiler *only*).

Motivation: I use the standard ""compiler -> MPI -> package"" lmod hierarchy for the entire software stack and the users can request desired/required compiler versions. The system compiler provided by Debian is quite new so one of the requested compilers happens to be the same version as the system compiler version. Currently the packages installed with that compiler version show up directly in the top-level, for any other compiler version the users first have to load the desired compiler and subsequently get access to the other packages. For consistency it would be nice if the top-level lmod/Core would only contain compilers and not any other packages. In addition, hiding compiler dependencies or other non-userfacing software installed with the system compiler is extra difficult, a simple include: gcc; exclude: %gcc@<system-version> does no longer work.

Note: this problem only arose recently when upgrading to a new Debian version and currently has been circumvented by dropping the packages with the system gcc version (instead using a newer minor GCC version, in agreement with the affected group of users). It will hit us again after the next Debian upgrade.",No,"- From what I saw so far, the changed compiler handling and associated display of specs with dependencies makes it considerably more difficult to figure out which packages has been installed with which compiler (e.g. when mixing gcc and intel for dependencies).
- The separation between Github Issues, Github discussion and Slack is confusing. I am never really sure where to best ask questions.
- Related to the point before: past discussion on Slack is more or less impossible to browse (and at least in the past was lost after some time, haven't checked recently).
- A recording of the upcoming Spack user meeting (at least some plenary talks about upcoming features, overall plans, etc.) would be nice. (For time reasons I am unable to attend). A live stream could be a compromise but times in Europe will not be great.
- Lastly, I'd like to thank you for the work on Spack, which is a very useful tool.",,,,,,,
4/14/2025 7:37:42,Research Software Engineer (RSE),"DOE/NNSA Lab (e.g., LLNL/LANL/SNL)",United States,Python,"HPC / Simulation, Statistics / Data Analysis, Bioinformatics",Word of mouth,2,No,develop (1.0.0dev0),RHEL9,100 - 200,"3.9, 3.11, 3.13",Spack environments,Environments,No,No,No,Intel,AMD MI300A,"gcc, LLVM, AMD ROCmCC (amdclang/hipcc)",Very Important,Not Important,Very Important,Not Important,Somewhat important,Somewhat important,Very Important,Somewhat important,Not Important,Not Important,Not Important,Not Important,Not Important,Not Important,Very Important,Not Important,,Not sure,No,No,"Documentation, Slack, Coworkers",Monthly,Probably,Good,Excellent,Good,Good,Installing a package in an environment,,,,,,,,,,,,,
4/14/2025 11:31:54,Computational Scientist,"DOE/NNSA Lab (e.g., LLNL/LANL/SNL)",United States,"Fortran, C, C++, Python, Rust","HPC / Simulation, AI/ML, High Energy Physics",Used at my site,9,"Packages, Issues","0.21, 0.22, 0.23, develop (1.0.0dev0)","RHEL 8, Cray EX, BlueOS, toss",200 - 500,"3.8, 3.9",Spack environments,"Environments, Mirrors (spack mirror create / air gap support), Build caches (making binary packages), build-env (debug a build), spack external find, Distributed Builds (srun/mpirun spack install), spack develop, concretizer:unify:true (concretize together)",Yes -- several,Yes,No,"AMD, Intel, ARM","NVIDIA Hopper, AMD MI300A, AMD MI300X","gcc, Intel OneAPI, NVHPC, LLVM, AMD ROCmCC (amdclang/hipcc), IBM XL, CCE (Cray Compilers)",Critical,Not Important,Not Important,Not Important,Very Important,Very Important,Very Important,Very Important,Not Important,Not Important,Not Important,Somewhat important,Not Important,Very Important,Very Important,Critical,"Better configuration for views from command line, better compiler as package disambiguation (ccache vs default install).",No,No,No,"Documentation, Slack, Local Teams",Monthly,No,OK,Good,Good,Good,Upgraded tools to new v1.0 spec.,"I try to use the command line as much as possible, leaving spack as a default install. I then build environments installed externally for each OS/compiler. The script is fully automated.",Multiple compiler environments to compare performance.,"Unknown options, lack of clear environment configuration. There should be transition documentation",Better documentation for environment best practices. More specific error messages.,No,Keep up the good work,,,,,,,
4/14/2025 11:53:13,DevOps/SRE,"DOE/NNSA Lab (e.g., LLNL/LANL/SNL)",United States,"C, Python, Go, sh/bash/other shell script, Common Lisp, Zig","HPC / Simulation, Computer Science, DevOps",Tutorial,7,"Packages, Core Features, Documentation, Slack Discussions, GitHub Discussions, Issues, Tools/integrations",develop (1.0.0dev0),"macOS 15 (Sequoia), RHEL 8, RHEL9, Debian 12","> 1,000","3.12, 3.13","spack load, Spack environments","Environments, Chaining (upstreams), Mirrors (spack mirror create / air gap support), Build caches (making binary packages), spack ci (GitLab pipeline generation -- yourself, not on our CI), spack-python (Python scripting), spack external find, Externals in packages.yaml, Concretization preferences in packages.yaml, spack develop, concretization: --reuse (default), concretization: --fresh (build everything fresh), concretizer:unify:true (concretize together), concretizer:unify:when_possible, Multiple build systems in one package, Variant/flag propagation (++, ~~, ==), Git versions, spack diff (compare two specs)",Yes -- several,No,No,"AMD, Intel, ARM","NVIDIA Hopper, NVIDIA Blackwell, AMD MI300A",gcc,Critical,Slightly Important,Somewhat important,Very Important,Somewhat important,Critical,Critical,Very Important,Critical,Slightly Important,Not Important,Critical,Very Important,Slightly Important,Critical,Not Important,"Better CLI UI/UX, ""spack update"", ""spack upgrade""",Yes,"Yes, I'm presenting!",Yes,"Documentation, Slack, Coworkers, ChatGPT / other LLMs",Weekly,Probably,Bad,Excellent,Excellent,Excellent,Updating a package,Similar to Python virtual environments I use Spack to manage my development environments / dependencies for multiple projects.,,Updating Spack itself and packages in environments,Improve the UI/UX of the CLI tool to be more like brew/uv,,,,,,,,,
4/14/2025 14:55:24,Computational Scientist,University HPC/Computing Center,Sweden,"C++, sh/bash/other shell script","HPC / Simulation, Computer Science",Twitter/Mastodon/Bluesky,3,"Packages, Issues",0.23,"CentOS 7, Ubuntu 22, Ubuntu 24, SLES15, Cray EX",100 - 200,"2.7, 3.6, 3.10, 3.12","spack load, Lmod, Environment Modules (TCL modules)","Module generation, Public build caches at cache.spack.io / binaries.spack.io, spack external find, Cray PE support (spack external read-cray-manifest), Externals in packages.yaml, spack load",Yes -- just one,No,,"AMD, Intel, ARM","NVIDIA Ampere, NVIDIA Hopper, NVIDIA Blackwell, AMD MI200/250X, AMD MI300A, No GPUs","gcc, NVHPC, LLVM, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA), CCE (Cray Compilers)",Very Important,Somewhat important,Slightly Important,Slightly Important,Somewhat important,Somewhat important,Very Important,Critical,Not Important,Somewhat important,Somewhat important,Not Important,Not Important,Somewhat important,Very Important,Slightly Important,,Yes,No,No,"Documentation, Slack, Coworkers, ChatGPT / other LLMs",Monthly,Probably not,Good,Excellent,OK,Excellent,installing packages,,,"weird concretization issues, in particular during development/modification of spack packages",,,,,,,,,,
4/16/2025 20:11:56,Scientist/Researcher,University research group,Cape Verde,"C++, Python, sh/bash/other shell script",High Energy Physics,Presentation,5,"Packages, Core Features, Documentation, Slack Discussions, Issues, Spack User Meeting Talk","0.23, 1.0.0-alpha* pre-releases, develop (1.0.0dev0)","Ubuntu 24, Debian 12","> 1,000","3.11, 3.12, 3.13","Spack environments, Containers","Environments, spack containerize, Stacks (matrices in environments), Mirrors (spack mirror create / air gap support), Build caches (making binary packages), OCI build caches (pushing packages to container registries), Public build caches at cache.spack.io / binaries.spack.io, spack ci (GitLab pipeline generation -- yourself, not on our CI), spack-python (Python scripting), spack external find, Externals in packages.yaml, Concretization preferences in packages.yaml, `require:` directive in packages.yaml, `prefer:` directive in packages.yaml, spack develop, concretization: --reuse (default), concretization: --fresh (build everything fresh), concretizer:unify:true (concretize together), concretizer:unify:when_possible, Multiple build systems in one package, Git versions, spackbot (@spackbot fix style; @spackbot rebuild everything, etc.), include_concrete, spack deconcretize",Yes -- several,Yes,No,"Intel, ARM",No GPUs,"gcc, Intel OneAPI, LLVM",Somewhat important,Not Important,Slightly Important,Slightly Important,Not Important,Somewhat important,Slightly Important,Slightly Important,Very Important,Not Important,Slightly Important,Very Important,Not Important,Not Important,Slightly Important,Very Important,,Yes,"Yes, I'm presenting!",No,"Documentation, Slack, GitHub Issues, spack help, Source Code",Daily,No,Excellent,Excellent,OK,Good,Reconcretize a development environment with develop specs to avoid a failing shared library resolution,"Large environment, hundred roots, 15 develop specs, mostly for development.",HEP CI stack,Slow PR review and merging,Larger community and more automation in PR review,More automatic python package inclusion,,,,,,,,
4/16/2025 20:19:12,Research Software Engineer (RSE),University research group,Australia,"Fortran, C, Python",HPC / Simulation,Word of mouth,2,"Packages, Issues",0.22,"Rocky 8, Debian 12, SLES15",100 - 200,3.6,"spack load, Environment Modules (TCL modules)","Environments, Module generation, spack containerize, Chaining (upstreams), Externals in packages.yaml, Concretization preferences in packages.yaml, spack develop, concretization: --reuse (default), concretization: --fresh (build everything fresh), concretizer:unify:true (concretize together), Git versions, spack load",Yes -- just one,Yes,No,"AMD, Intel",No GPUs,"gcc, Classic Intel Compilers, Intel OneAPI, AMD ROCmCC (amdclang/hipcc)",Very Important,Not Important,Not Important,Not Important,Critical,Very Important,Not Important,Not Important,Not Important,Very Important,Not Important,Not Important,Not Important,Not Important,Somewhat important,Not Important,Fix stale git_repos,Yes,No,No,"Documentation, Slack, GitHub Issues, Source Code, Weekly Telecons",Daily,Probably not,Good,Good,Good,Good,Trying to match only a part of a GitVersion object's string representation. i.e. the RHS of the equals sign.,Use Spack to build climate models. We write the Spack Package Recipes (SPRs) for the models.,Monthly Telcon run by Peter during Australian business hours,"Spack develop, with when(), stale git_repos, shared Spack instance",Shared Spack instance,,Thanks for developing Spack!,,,,,,,
4/16/2025 20:30:40,DevOps/SRE,University HPC/Computing Center,Australia,"Python, sh/bash/other shell script",DevOps,Used at my site,2,"Slack Discussions, Issues, Spack Community Zoom Meetings","0.20, 0.22, 1.0.0-alpha* pre-releases, custom fork","Ubuntu 22, Ubuntu 24","500-1,000",3.11,"Spack environments, Environment Modules (TCL modules), Containers, Custom script or env vars","Environments, Module generation, Chaining (upstreams), Stacks (matrices in environments), Mirrors (spack mirror create / air gap support), Build caches (making binary packages), spack-python (Python scripting), Concretization preferences in packages.yaml, `require:` directive in packages.yaml, concretization: --fresh (build everything fresh), concretizer:unify:true (concretize together), concretizer:unify:when_possible, Git versions, spack load",Yes -- just one,Yes,,Intel,No GPUs,"gcc, Classic Intel Compilers, Intel OneAPI",Very Important,Not Important,Slightly Important,Slightly Important,Slightly Important,Slightly Important,Slightly Important,Slightly Important,Critical,Somewhat important,Slightly Important,Not Important,Not Important,Not Important,Not Important,Not Important,Incorporate git commit metadata for @git.TAG and @git.BRANCH refs,Yes,No,No,"Documentation, Mailing List, Coworkers, GitHub Discussions, Source Code, Weekly Telecons",Weekly,Probably not,Bad,Excellent,Excellent,Excellent,Interrogated installed packages info via `spack python`,We use spack as a core component of our climate model build CD. ,Provenance,"For @git.BRANCH versions, not having the git_repos folder being updated .",Better support for `@git.REF` versioning,,Spack has been pretty awesome to use! Thanks!,,,,,,,
4/16/2025 20:37:41,Scientist/Researcher,"DOE/NNSA Lab (e.g., LLNL/LANL/SNL)",United States,"C, C++, Python, sh/bash/other shell script","HPC / Simulation, AI/ML, Computer Science, Bioinformatics",Used at my site,3,"Packages, Slack Discussions, GitHub Discussions","0.18, 0.19, 0.20, 0.21, 0.22, 0.23","RHEL 7, RHEL 8","> 1,000","3.9, 3.10, 3.11, 3.12","spack load, Spack environments, spack view","Environments, Mirrors (spack mirror create / air gap support), Build caches (making binary packages), spack external find, spack load",Yes -- several,No,No,"AMD, Intel, IBM Power","NVIDIA Volta, NVIDIA Ampere, NVIDIA Hopper, NVIDIA Blackwell, AMD MI200/250X, AMD MI300A, AMD MI300X","gcc, Classic Intel Compilers, AMD ROCmCC (amdclang/hipcc)",Critical,Not Important,Not Important,Not Important,Very Important,Critical,Somewhat important,Critical,Not Important,Not Important,Not Important,Not Important,Not Important,Not Important,Critical,Very Important,Get rid of ~/.spack ...,Yes,No,Yes,"Documentation, Slack, Coworkers",Weekly,"Yes, definitely!",Good,Excellent,OK,Good,modyfing py-torch to for the 100th time and run spack clean -a because of some weird error messages,,The Slack,Performance (concretize is so slow) and cryptic error messages,,,,,,,,,,
4/16/2025 21:18:14,Software Developer,Company,Canada,"C, C++, Python, HIP","HPC / Simulation, AI/ML",Word of mouth,3,"Packages, Core Features, Issues",0.23,"Ubuntu 24, Debian 12",10 - 100,"3.11, 3.12, 3.13",spack load,"Module generation, spack external find, Externals in packages.yaml, Concretization preferences in packages.yaml, spack develop, concretization: --reuse (default), concretization: --fresh (build everything fresh), concretizer:unify:true (concretize together), Variant/flag propagation (++, ~~, ==), Git versions, spack test, spack load",Yes -- just one,No,No,AMD,"NVIDIA Other, AMD MI100, AMD MI200/250X, AMD MI300A, AMD MI300X","gcc, LLVM, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA)",Very Important,Not Important,Somewhat important,Very Important,Somewhat important,Somewhat important,Very Important,Very Important,Slightly Important,Slightly Important,Very Important,Somewhat important,Not Important,Not Important,Somewhat important,Not Important,,Not sure,No,No,"Documentation, Slack, GitHub Issues, Source Code",Monthly,No,Excellent,Excellent,Good,Excellent,Installed an old version of python,"I like being able to build specific versions of packages, and build for specific AMD GPUs","It's way easier to install python stuff than with conda, and the licence is better ",It would be nice if things could actually use the ROCm packages that Spack creates,It would be nice if Spack could find ROCm packages in /usr,,,,,,,,,
4/16/2025 22:01:50,System Administrator,University HPC/Computing Center,Germany,"Fortran, Python, sh/bash/other shell script","HPC / Simulation, AI/ML, Bioinformatics, System Administration",Word of mouth,5,"GitHub Discussions, Issues","0.18, 0.19, 0.23","AlmaLinux 8, AlmaLinux 9, Ubuntu 20, Ubuntu 22, Ubuntu 24",100 - 200,"3.6, 3.11",Environment Modules (TCL modules),"Module generation, Chaining (upstreams), spack external find, Externals in packages.yaml, Concretization preferences in packages.yaml",Yes -- just one,Yes,No,"AMD, Intel, ARM","NVIDIA Volta, NVIDIA Ampere, NVIDIA Hopper, NVIDIA Blackwell, AMD MI200/250X, AMD MI300A, AMD MI300X","gcc, Classic Intel Compilers, Intel OneAPI, NVHPC, LLVM, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA)",Very Important,Not Important,Slightly Important,Slightly Important,Somewhat important,Very Important,Very Important,Somewhat important,Not Important,Slightly Important,Slightly Important,Slightly Important,Not Important,Not Important,Somewhat important,Somewhat important,,Not sure,No,No,"Documentation, GitHub Issues, ChatGPT / other LLMs",Monthly,Probably not,OK,Good,OK,OK,-,spack install; add selected generated modules to our module tree,easier and consistent installation across clusters,build failures of complex packages,,,,,,,,,,
4/16/2025 23:49:00,System Administrator,Cloud Provider,United Kingdom,"Fortran, C, C++, Python, Rust, sh/bash/other shell script","HPC / Simulation, AI/ML, System Administration",Search,5,"Packages, Issues","0.22, 0.23, 1.0.0-alpha* pre-releases","CentOS 7, CentOS 8, AlmaLinux 8, AlmaLinux 9, Ubuntu 20, Ubuntu 22, Ubuntu 24, Windows Subsystem for Linux (WSL), Azure Linux",100 - 200,"3.6, 3.7, 3.8","spack load, Lmod, Containers","Module generation, Chaining (upstreams), Build caches (making binary packages), Public build caches at cache.spack.io / binaries.spack.io, spack external find, Externals in packages.yaml, Concretization preferences in packages.yaml, `require:` directive in packages.yaml, `prefer:` directive in packages.yaml, Distributed Builds (srun/mpirun spack install), spack load",Yes -- several,Yes,,AMD,"NVIDIA Blackwell, NVIDIA Other, AMD MI200/250X, AMD MI300X","gcc, Classic Intel Compilers, Intel OneAPI, NVHPC, LLVM, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA)",Very Important,Very Important,Somewhat important,Somewhat important,Very Important,Critical,Very Important,Somewhat important,Very Important,Slightly Important,Slightly Important,Slightly Important,Critical,Somewhat important,Critical,Somewhat important,hide/mask inconsequential packages,Yes,"Yes, I'm attending",No,"Documentation, Coworkers, GitHub Issues, Source Code",Weekly,Probably,OK,OK,Good,Excellent,adding support for a new os,We use it to create repeatable customer and testing environments ,stability,We often back off to building environments by hand when slack is too time consuming ,figure out why it’s such a time vampire sometimes vs manual install ,We generally just build our own if missing,I’d like a better way to distribute a fixed environment that doesn’t involve installing packages,,,,,,,
4/17/2025 1:19:45,Scientist/Researcher,Other Public Research Lab,Italy,"C++, Python, MATLAB",HPC / Simulation,Adoption in the Qlustar Linux distribution,2,"No, Issues",0.22,Ubuntu 22,1 - 10,"3.6, 3.7, 3.12",spack load,"Environments, concretization: --fresh (build everything fresh), spack load",No,No,No,"AMD, Intel","NVIDIA Volta, NVIDIA Ampere",gcc,Critical,Slightly Important,Somewhat important,Very Important,Somewhat important,Somewhat important,Critical,Very Important,Somewhat important,Somewhat important,Very Important,Slightly Important,Very Important,Somewhat important,Somewhat important,Slightly Important,Better management of unsuccessful compilations,Yes,No,No,"Documentation, Mailing List, GitHub Discussions, spack help",Monthly,Probably not,OK,Bad,OK,Good,Install custom version of OpenFOAM package,I use Spack as the standard installation of programs under Qlustar Linux distribution for HPC cluster,Integration with the cluster management,Missed indication of unsuccessful compilations. Difficulty to restart compilation from scratch.,Documentation about the architecture of Spack integration with the OS,No,"As a former user of tools like configure&make, I like the Spack approach a lot!",,,,,,,
4/17/2025 2:58:12,Research Software Engineer (RSE),University HPC/Computing Center,United Kingdom,"Fortran, C++",HPC / Simulation,Used at my site,4,"Slack Discussions, Issues","0.23, develop (1.0.0dev0)","Rocky 8, Rocky 9",100 - 200,"3.6, 3.9","Lmod, Environment Modules (TCL modules)","Environments, Module generation, Chaining (upstreams), Stacks (matrices in environments), spack external find, Externals in packages.yaml, `require:` directive in packages.yaml, spack develop, concretizer:unify:true (concretize together), concretizer:unify:when_possible, spack diff (compare two specs), spack deconcretize",No,No,No,"AMD, Intel","NVIDIA Ampere, AMD MI300X, Intel Xe (Ponte Vecchio)","gcc, Classic Intel Compilers, Intel OneAPI, NVHPC, nvcc (CUDA)",Critical,Very Important,Slightly Important,Slightly Important,Somewhat important,Somewhat important,Very Important,Somewhat important,Slightly Important,Slightly Important,Not Important,Slightly Important,Somewhat important,Somewhat important,Not Important,Very Important,,Yes,"Yes, I'm attending",Yes,"Documentation, Coworkers",Weekly,Probably not,Good,Good,Good,Excellent,"I copied an environment, modified it, concretized and installed it.",I use Spack to build dependence for HPC codes. I typically don't use Spack to build the main code itself.,Environments and spack develop workflow.,Cryptic error messages when concretization fails.,Carry on as you have been!,,,,,,,,,
4/17/2025 6:06:23,Scientist/Researcher,"DOE/NNSA Lab (e.g., LLNL/LANL/SNL)",United States,C++,HPC / Simulation,Word of mouth,8,"Packages, Slack Discussions, Issues",0.23,"macOS 15 (Sequoia), RHEL 8",10 - 100,3.9,Spack environments,"Environments, Build caches (making binary packages), E4S build caches (https://e4s.io), spack develop, spack test, E4S containers (https://e4s.io)",No,No,spack manager (https://sandialabs.github.io/spack-manager/),"AMD, Intel",AMD MI300A,"gcc, Intel OneAPI",Somewhat important,Not Important,Not Important,Very Important,Critical,Somewhat important,Very Important,Critical,Critical,Very Important,Somewhat important,Somewhat important,Slightly Important,Slightly Important,Slightly Important,Somewhat important,,No,"Yes, I'm attending",Yes,Slack,Monthly,No,Excellent,Excellent,OK,Good,Package install,,,,,,,,,,,,,
4/17/2025 6:07:06,Computational Scientist,"DOE/NNSA Lab (e.g., LLNL/LANL/SNL)",United States,"C++, Python","HPC / Simulation, Computer Science, High Energy Physics",Used at my site,6,Issues,0.23,"macOS 14 (Sonoma), macOS 15 (Sequoia), RHEL 8, RHEL9, Ubuntu 24",100 - 200,"3.9, 3.12, 3.13","spack load, Spack environments, Lmod, Environment Modules (TCL modules), Containers","Environments, Module generation, Mirrors (spack mirror create / air gap support), Build caches (making binary packages), Distributed Builds (srun/mpirun spack install), concretization: --fresh (build everything fresh), concretizer:unify:true (concretize together), concretizer:unify:when_possible, Variant/flag propagation (++, ~~, ==), spack load",Yes -- several,No,No,"AMD, Intel, ARM","NVIDIA Volta, NVIDIA Ampere, NVIDIA Hopper, NVIDIA Blackwell, AMD MI200/250X, AMD MI300A, AMD MI300X, Intel Xe (Ponte Vecchio)","gcc, Intel OneAPI, LLVM, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA)",Critical,Not Important,Not Important,Not Important,Critical,Somewhat important,Critical,Critical,Slightly Important,Very Important,Slightly Important,Somewhat important,Somewhat important,Not Important,Somewhat important,Not Important,"More extensive documentation. Current documentation is great for general use, but any minor modifications/corner cases are very difficult to figure out.",Yes,"Yes, I'm attending",Yes,"Documentation, Coworkers, Email",Monthly,No,OK,Good,Bad,OK,Build an entire TPL stack from compiler up for cuda.,Build the compiler and TPL stack for an NNSA application.,Simplified building of compilers.,"1. Static library build support. 2. Getting spack to find externally installed software - for example, forcing spack to find the mpi installed in nvidia's hpc sdk. 3. Documentation is difficult to find on all the options to manually point to a specific installation, especially when in non-standard directories.",Better support for finding external software.,,,,,,,,,
4/17/2025 6:15:40,Research Software Engineer (RSE),"DOE/NNSA Lab (e.g., LLNL/LANL/SNL)",United States,C++,HPC / Simulation,Presentation,3,"Packages, Core Features, Slack Discussions, Issues","0.20, 0.22, develop (1.0.0dev0), custom fork","RHEL 8, RHEL9, Cray EX, Cray XD",100 - 200,"3.6, 3.7, 3.8, 3.9, 3.10, 3.11, 3.12, 3.13","spack load, Spack environments, Lmod, Environment Modules (TCL modules), spack build-env","Environments, Module generation, Chaining (upstreams), Mirrors (spack mirror create / air gap support), Build caches (making binary packages), build-env (debug a build), spack-python (Python scripting), spack external find, Externals in packages.yaml, Concretization preferences in packages.yaml, `require:` directive in packages.yaml, `prefer:` directive in packages.yaml, spack develop, concretization: --fresh (build everything fresh), concretizer:unify:true (concretize together), concretizer:unify:when_possible, Variant/flag propagation (++, ~~, ==), Git versions, spack load, spackbot (@spackbot fix style; @spackbot rebuild everything, etc.), spack diff (compare two specs)",Yes -- several,Yes,Other script to wrap spack,"AMD, Intel, ARM","NVIDIA Volta, NVIDIA Ampere, NVIDIA Hopper, NVIDIA Blackwell, AMD MI300A, NextSilicon","gcc, Intel OneAPI, LLVM, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA), CCE (Cray Compilers)",Critical,Not Important,Not Important,Not Important,Very Important,Critical,Somewhat important,Very Important,Not Important,Critical,Very Important,Not Important,Not Important,Slightly Important,Critical,Somewhat important,,No,"Yes, I'm attending",No,"Documentation, Slack, Coworkers, GitHub Issues, Source Code",Weekly,Probably not,Good,Good,OK,Good,Used spack build-env to develop an application that we use spack to build.,Developing large HPC applications with deep dependency graphs and using spack to manage the whole build process for both end-user installations and developer workflows.,,"* Performance for developer workflows. The depfile build helps when modifying multiple packages but is not very robust for incremental builds, and not yet having a version of ninja with jobserver support doesn't help. There also appears to be a lot of overhead in setting up the build environment and re-running cmake each time I do an incremental build even when it is not necessary. Concretization is also painfully slow.
* Setting up external packages correctly when setting up spack environments for a new platform is frustrating. spack external find often either doesn't find many packages, or finds them but gets the spec wrong in subtle ways that don't show themselves until trying to install a package that depends on the external appears to hang because spack was unable to find some libraries for the external to set up the dependent packages build environment and then decided to recurse all of /usr which often includes multi-PB network filesystems looking for it.",,,,,,,,,,
4/17/2025 6:27:02,HPC User / Analyst,University HPC/Computing Center,Canada,"Python, Go, sh/bash/other shell script","HPC / Simulation, User Support, System Administration",Search,0,Issues,0.23,Rocky 9,10 - 100,3.9,Lmod,"Environments, Module generation, Stacks (matrices in environments), spack external find, Externals in packages.yaml, Concretization preferences in packages.yaml, `require:` directive in packages.yaml, concretization: --reuse (default)",Yes -- just one,No,No,AMD,NVIDIA Hopper,"gcc, Intel OneAPI, NVHPC, LLVM, nvcc (CUDA)",Very Important,Somewhat important,Not Important,Not Important,Very Important,Very Important,Very Important,Critical,Not Important,Somewhat important,Somewhat important,Not Important,Not Important,Not Important,Very Important,Critical,Better Lmod support,Not sure,No,No,"Documentation, Slack, GitHub Issues, GitHub Discussions, Source Code",Daily,Probably not,Excellent,Excellent,Good,Good,"Creating a custom module template to set CPATH, LIBRARY_PATH, & LD_LIBRARY_PATH.",Managing a central HPC software stack for a Zen5 + Infiniband + H100 GPU cluster.,"Just getting started with spack, so probably the documentation/tutorials, which are excellent.",,"Virtual cuda would be nice, see https://github.com/spack/spack/issues/19365 and https://github.com/spack/spack/pull/30748",,,,,,,,,
4/17/2025 7:25:23,Software Developer,Cloud Provider,United States,"Fortran, C, C++, Python, sh/bash/other shell script","HPC / Simulation, Computer Science, User Support, System Administration","I don't remember, but it's been a long time.",10,"Packages, Core Features, Slack Discussions, Issues, Spack User Meeting Talk",0.23,"Rocky 8, Ubuntu 22, Ubuntu 24, Debian 12","> 1,000","3.10, 3.11, 3.12, 3.13","spack load, Spack environments","Environments, Chaining (upstreams), Mirrors (spack mirror create / air gap support), Build caches (making binary packages), spack external find, Externals in packages.yaml, Concretization preferences in packages.yaml, Distributed Builds (srun/mpirun spack install), concretizer:unify:true (concretize together), Multiple build systems in one package, Variant/flag propagation (++, ~~, ==), spack load, spackbot (@spackbot fix style; @spackbot rebuild everything, etc.)",Yes -- several,No,No,"AMD, Intel, ARM","NVIDIA T4, NVIDIA Volta, NVIDIA Ampere, NVIDIA Hopper, NVIDIA Blackwell, NVIDIA Other","gcc, Classic Intel Compilers, Intel OneAPI, NVHPC, LLVM, nvcc (CUDA), armclang",Very Important,Critical,Somewhat important,Slightly Important,Very Important,Somewhat important,Very Important,Very Important,Somewhat important,Somewhat important,Not Important,Somewhat important,Very Important,Very Important,Somewhat important,Critical,Modularized spack infrastructure (allow spack infrastructure to be split out into separate repos),No,"Yes, I'm presenting!",Yes,"Documentation, Slack, GitHub Issues, GitHub Discussions, spack help, Source Code",Weekly,Probably not,Excellent,Excellent,Good,Excellent,Installed a large-ish set of software packages.,Install packges and work through some performance analysis workflows of the software,Buildcaches have made it very easy to migrate builds between various machines. Building out concrete specs (and using environments) has made it very easy to share a software stack with others and debug issues with the underlying software packages.,Probably when you run into packages that execute some instruction as part of a build (when cross-compiling).,"For me personally, make cross-compilation easier / better.","No, but it would probably be good to have a nice way to get new package PRs merged. Currently they take a while once submitted and might sit for months before they are merged. This discourages external folks from contributing packages, and makes it far more likely that you will have separate package repositories for various organizations.",,,,,,,,
4/17/2025 7:43:19,User Support Staff,University HPC/Computing Center,United States,"Fortran, C, C++, Python, R, sh/bash/other shell script","HPC / Simulation, Statistics / Data Analysis, AI/ML, User Support",Word of mouth,3,"Packages, Issues","0.23, 1.0.0-alpha* pre-releases, develop (1.0.0dev0)",CentOS 7,"500-1,000","3.9, 3.12, 3.13","spack load, Spack environments, Lmod","Environments, Module generation, spack containerize, build-env (debug a build), `require:` directive in packages.yaml, `prefer:` directive in packages.yaml, Distributed Builds (srun/mpirun spack install), concretization: --fresh (build everything fresh), concretizer:unify:when_possible, spack load, There are so many wonderful things here that I did not even know existed, let alone how to use them...",Yes -- several,No,No,"AMD, Intel, ARM","NVIDIA T4, NVIDIA Ampere, NVIDIA Hopper, AMD MI300A","gcc, NVHPC, LLVM, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA)",Somewhat important,Not Important,Somewhat important,Somewhat important,Very Important,Slightly Important,Somewhat important,Somewhat important,Somewhat important,Slightly Important,Slightly Important,Slightly Important,Very Important,Somewhat important,Somewhat important,Somewhat important,,Not sure,Maybe,Yes,"Documentation, Slack, GitHub Issues",Daily,Probably not,Good,Excellent,Good,Good,"Building SW stacks/installing packages, sometimes writing or modifying a package script.","Mostly, I install SW for Earth Science folks. Looking into writing package.py recipes for difficult installs.",Install GFDL and other climate community SW.,Python incompatibility -- can Spack package its own Python? Bad CMake and Configure scripts.,Keep doing what you are doing!,,Love and appreciate your work!,,,,,,,
4/17/2025 7:47:49,Scientist/Researcher,University research group,Canada,"C, Python, Rust","HPC / Simulation, Statistics / Data Analysis, AI/ML, Computer Science",Search,0,No,0.23,"macOS 15 (Sequoia), Rocky 8","500-1,000",3.11,"spack load, Spack environments, Lmod","Environments, Module generation, Mirrors (spack mirror create / air gap support), Git versions",Yes -- just one,Yes,No,"Intel, ARM",NVIDIA Volta,"gcc, Intel OneAPI, NVHPC, nvcc (CUDA)",Critical,Not Important,Not Important,Not Important,Critical,Critical,Somewhat important,Critical,Slightly Important,Not Important,Not Important,Not Important,Not Important,Not Important,Critical,Somewhat important,,Yes,No,No,"Documentation, Slack, GitHub Issues",Monthly,No,Good,Good,Good,Excellent,Reinstalled parallelio with netcdf and openmpi support,Providing module system for a research group at a University in Canada,"Could provide modules so stupid ""researchers"" could do their bare minimum jobs.",Nothing really,Commercialize the whole thing,,Thanks for the hard work,,,,,,,
4/17/2025 7:51:34,Scientist/Researcher,"DOE/Office of Science Lab (e.g., ORNL/ANL/LBL)",United States,"C++, Python, Julia, Rust, R, Typescript","HPC / Simulation, Statistics / Data Analysis, AI/ML, Computer Science, Web applications",Presentation,5,"Packages, Core Features, Slack Discussions, Issues, Spack User Meeting Talk, Spack Community Zoom Meetings","1.0.0-alpha* pre-releases, develop (1.0.0dev0)","RHEL9, Centos Stream, Rocky 9, AlmaLinux 9, Ubuntu 24, Fedora, Windows Subsystem for Linux (WSL), Cray EX","500-1,000","3.6, 3.8, 3.9, 3.10, 3.11, 3.12, 3.13","spack load, Spack environments, Containers","Environments, spack containerize, Stacks (matrices in environments), Build caches (making binary packages), Weekly develop snapshots on cache.spack.io, OCI build caches (pushing packages to container registries), Public build caches at cache.spack.io / binaries.spack.io, Externals in packages.yaml, Concretization preferences in packages.yaml, `require:` directive in packages.yaml, `prefer:` directive in packages.yaml, Distributed Builds (srun/mpirun spack install), spack develop, concretization: --reuse (default), concretization: --fresh (build everything fresh), concretizer:unify:true (concretize together), concretizer:unify:when_possible, Multiple build systems in one package, Variant/flag propagation (++, ~~, ==), Scalable binding link model (config:shared_linking:bind:true), Git versions, spack load, spackbot (@spackbot fix style; @spackbot rebuild everything, etc.), Splicing, spack env track, reuse specialization (https://spack.readthedocs.io/en/latest/build_settings.html#reuse-already-installed-packages)",Yes -- several,Yes,a customized setup-env.sh,"AMD, Intel","NVIDIA Volta, NVIDIA Ampere, NVIDIA Hopper, NVIDIA Blackwell, AMD MI300X, Intel Xe (Ponte Vecchio), Cerebras","gcc, Intel OneAPI, LLVM, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA), CCE (Cray Compilers)",Very Important,Somewhat important,Very Important,Critical,Somewhat important,Very Important,Very Important,Very Important,Very Important,Critical,Very Important,Very Important,Critical,Critical,Critical,Not Important,I want the packages in the build cache to actually work consistently and to make spack less likely to rebuild expensive things like LLVM -- I don't care about Pavilion2 etc...,Yes,"Yes, I'm presenting!",Yes,"Documentation, Slack, GitHub Issues, Source Code",Weekly,No,Good,Excellent,Excellent,Excellent,"Yesterday I updated all my packages to work with 1.0 including some modifications to adapt to how compilers as dependencies work, and I added a new variant to a package to support its second top level cmake file. ","I use spack to develop, maintain, and distribute ~50 packages to our users. ",The concretizer and spack develop,"Buildcaches are very hard to use as a user for various reasons (broken packages, missing packages downloads, etc)",Make sure packages from the build cache work every time and keep it that way. ,Not sure,,,,,,,,
4/17/2025 8:03:11,Research Software Engineer (RSE),"DOE/NNSA Lab (e.g., LLNL/LANL/SNL)",United States,"C, C++, Python","HPC / Simulation, Computer Science, DevOps",Used at my site,3,"Packages, Slack Discussions, Issues, Spack User Meeting Talk",develop (1.0.0dev0),"macOS 15 (Sequoia), RHEL 8, RHEL9, Rocky 8, Rocky 9, AlmaLinux 8, AlmaLinux 9, Ubuntu 22, Cray EX","> 1,000","3.6, 3.8","Spack environments, spack build-env, Custom script or env vars","Environments, Chaining (upstreams), Mirrors (spack mirror create / air gap support), build-env (debug a build), spack-python (Python scripting), Externals in packages.yaml, Concretization preferences in packages.yaml, `require:` directive in packages.yaml, `prefer:` directive in packages.yaml, Distributed Builds (srun/mpirun spack install), spack develop, concretization: --reuse (default), concretization: --fresh (build everything fresh), concretizer:unify:true (concretize together), concretizer:unify:when_possible, Git versions, spackbot (@spackbot fix style; @spackbot rebuild everything, etc.), spack diff (compare two specs)",Yes -- several,No,Other script to wrap spack,"AMD, Intel","NVIDIA Volta, NVIDIA Ampere, NVIDIA Hopper, NVIDIA Blackwell, AMD MI200/250X, AMD MI300A","gcc, Intel OneAPI, NVHPC, LLVM, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA), CCE (Cray Compilers)",Critical,Not Important,Somewhat important,Somewhat important,Critical,Somewhat important,Slightly Important,Critical,Not Important,Critical,Somewhat important,Not Important,Not Important,Very Important,Very Important,Slightly Important,Recursive includes in Spack environments to allow building and combining templates.,Yes,"Yes, I'm presenting!",No,"Documentation, Slack, GitHub Issues, Source Code, ChatGPT / other LLMs",Weekly,Probably not,Good,Excellent,OK,Good,Writing / updating packages,Driving continuous integration and developer workflows for multiple code projects on multiple TriLab systems. Chained Spack installs with driver scripts to facilitate.,It’s existence.,"Missing recursive includes for Spack. Problems with patches to builtin packages from other packages in another Spack repo, forcing us to duplicate entire packages locally. Similar issue with patches and inherited packages for modification. Complicated and fragile ML stacks, but that’s not Spack’s fault.",Make that v1.0.0 release good.,None,Keep it up!,,,,,,,
4/17/2025 8:29:57,Manager,University HPC/Computing Center,United States,"Fortran, R, sh/bash/other shell script","HPC / Simulation, Web applications, User Support, System Administration",Used at my site,8,Slack Discussions,0.22,"macOS 15 (Sequoia), RHEL 8, RHEL9, openSuSE",10 - 100,3.9,"spack load, Spack environments, Lmod","Environments, Module generation, Chaining (upstreams), Stacks (matrices in environments), Build caches (making binary packages), build-env (debug a build), Externals in packages.yaml, Concretization preferences in packages.yaml, concretization: --reuse (default), concretization: --fresh (build everything fresh), Variant/flag propagation (++, ~~, ==), spack load",Yes -- just one,No,No,"AMD, Intel, ARM","NVIDIA Ampere, NVIDIA Hopper, NVIDIA Blackwell","gcc, Intel OneAPI, NVHPC, nvcc (CUDA)",Critical,Somewhat important,Somewhat important,Somewhat important,Very Important,Critical,Somewhat important,Very Important,Somewhat important,Somewhat important,Somewhat important,Slightly Important,Somewhat important,Critical,Critical,Critical,,,No,Yes,"Documentation, Slack",Monthly,Probably not,Excellent,Excellent,Excellent,Excellent,"Tried installing on AFS, some packages are hard t o install. AFS issue not spack",I don't use spack much since I transitioned to management. Earlier I used to build the entire software stack for our center using in environments using spack stack matrices,,,,Better support to install various commercial packages,,,,,,,,
4/17/2025 9:22:55,Software Developer,Cloud Provider,United States,"C++, Python, Go, sh/bash/other shell script",HPC / Simulation,Used at my site,1,"Packages, archspec",0.23,"macOS 15 (Sequoia), Rocky 8, Ubuntu 24, Debian 12","> 1,000","3.7, 3.13",Spack environments,"Environments, Chaining (upstreams), Mirrors (spack mirror create / air gap support), Build caches (making binary packages), Externals in packages.yaml, concretization: --reuse (default), concretizer:unify:true (concretize together)",Yes -- just one,No,Ramble,"AMD, Intel, ARM","NVIDIA Hopper, NVIDIA Blackwell","gcc, Intel OneAPI, aocc",Somewhat important,Not Important,Somewhat important,Very Important,Very Important,Somewhat important,Slightly Important,Somewhat important,Not Important,Not Important,Not Important,Very Important,Not Important,Very Important,Very Important,Not Important,,Yes,No,No,"Documentation, Coworkers, Source Code",Weekly,Probably not,Good,Excellent,Good,Good,Add Spack packages (to our own repo) for supporting ISV apps (Powerflow in this case),,,,,,,,,,,,,
4/17/2025 9:50:09,Research Software Engineer (RSE),"DOE/NNSA Lab (e.g., LLNL/LANL/SNL)",United States,"Python, Perl, R, sh/bash/other shell script","HPC / Simulation, Statistics / Data Analysis, Bioinformatics",Presentation,5,No,i have no idea; i just clone a refresh every now and then,TOSS,1 - 10,3.9,"spack load, Custom script or env vars","Module generation, spack containerize, Public build caches at cache.spack.io / binaries.spack.io, build-env (debug a build), Externals in packages.yaml, Variant/flag propagation (++, ~~, ==), spack load",No,No,No,"AMD, ARM, RISC-V","AMD MI100, AMD MI200/250X, AMD MI300A, AMD MI300X","gcc, AMD ROCmCC (amdclang/hipcc)",Very Important,Slightly Important,Very Important,Somewhat important,Very Important,Very Important,Very Important,Critical,Not Important,Very Important,Very Important,Somewhat important,Somewhat important,Very Important,Somewhat important,Somewhat important,,Yes,No,No,"Documentation, Coworkers, Source Code, Email, internal chat",Yearly,Probably,OK,OK,OK,Good,installed packages (libraries) to support outdated binaries,install dependencies for custom simulation and other bioinformatics workflows. I try spack install X; spack load X; or use LD_LIBRARY_PATH and similar hacks to get dependent tools to work.,docs on configuring externals.,"having a build fail after minutes hours of compile, due to some obscure error in a dependency.","an example workflow, tutorial, documentation, or course on how to practically build tools so that they are found or can be used across different systems and by users in a group without having to modify batch scripts/glue code/workflows. (avoiding ""if $hostname == foo; then ..."" and without users' custom dependencies or home dirs and other paths breaking installs for others)",up to date spec for Amber (https://ambermd.org/GetAmber.php),keep up the good work,,,,,,,
4/17/2025 9:50:22,System Administrator,University HPC/Computing Center,Chile,"Python, sh/bash/other shell script",System Administration,openhpc,1,No,"0.22, 0.23, 1.0.0-alpha* pre-releases",Rocky 9,10 - 100,3.9,Custom script or env vars,spack load,No,No,No,"AMD, Intel","NVIDIA Ampere, NVIDIA Hopper, AMD MI200/250X, No GPUs","gcc, LLVM, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA)",Very Important,Not Important,Not Important,Not Important,Not Important,Very Important,Very Important,Very Important,Not Important,Not Important,Not Important,Not Important,Not Important,Not Important,Not Important,Not Important,,Not sure,No,No,Documentation,Monthly,No,Good,OK,Bad,OK,install packages,,,,,,,,,,,,,
4/17/2025 10:04:41,System Administrator,University HPC/Computing Center,United States,"C, C++, Python, Perl, sh/bash/other shell script, Scheme, Common Lisp, INTERCAL","HPC / Simulation, User Support, System Administration, DevOps",Search,7,"Packages, Slack Discussions, GitHub Discussions, Issues",1.0.0-alpha* pre-releases,Rocky 9,"> 1,000",3.9,"spack load, Lmod","Module generation, Chaining (upstreams), spack-python (Python scripting), spack external find, Concretization preferences in packages.yaml, `require:` directive in packages.yaml, `prefer:` directive in packages.yaml, concretization: --reuse (default), concretization: --fresh (build everything fresh), Multiple build systems in one package, Variant/flag propagation (++, ~~, ==), spack load, spackbot (@spackbot fix style; @spackbot rebuild everything, etc.), spack diff (compare two specs)",No,No,No,"Intel, ARM","NVIDIA Volta, NVIDIA Ampere, NVIDIA Hopper","gcc, nvcc (CUDA)",Very Important,Not Important,Slightly Important,Somewhat important,Critical,Critical,Very Important,Very Important,Somewhat important,Very Important,Slightly Important,Critical,Somewhat important,Somewhat important,Very Important,Not Important,,Not sure,No,Yes,"Documentation, Slack, Coworkers, GitHub Issues, GitHub Discussions, spack help",Weekly,Probably not,Good,Excellent,OK,Good,Force spack to use a given installation every time MPI was called for.,I install packages for scientists as they request them.  Spack helps with that a lot.,,,,,,,,,,,,
4/17/2025 11:01:05,Research Software Engineer (RSE),University research group,United States,"C++, Python",hpc/radio astronomy data processing,Search,6,"Packages, Slack Discussions, Issues",develop (1.0.0dev0),"RHEL 8, Ubuntu 22",10 - 100,3.1,"spack load, Spack environments","Environments, build-env (debug a build), spack external find, `require:` directive in packages.yaml, `prefer:` directive in packages.yaml, spack develop, concretization: --reuse (default), concretization: --fresh (build everything fresh), concretizer:unify:true (concretize together), spack test, spack load, spack diff (compare two specs)",Yes -- just one,No,spack manager (https://sandialabs.github.io/spack-manager/),Intel,"NVIDIA Ampere, NVIDIA Hopper, NVIDIA Blackwell","gcc, LLVM, nvcc (CUDA)",Very Important,Not Important,Slightly Important,Slightly Important,Somewhat important,Somewhat important,Slightly Important,Somewhat important,Not Important,Somewhat important,Very Important,Slightly Important,Not Important,Slightly Important,Slightly Important,Very Important,,Yes,No,Yes,"Documentation, Slack, Source Code",Monthly,No,Good,Excellent,Good,Excellent,installing packages,"develop software using spack environements, sometimes spack-manager","environments for development and testing with new compilers, etc.","rebuilds don't always work for develop packages in environments, some changes don't trigger the config stage (CMake)","add support for c++ standards as dependencies (e.g, c++17,20,etc)",no,"Spack has made my development experience, working on multiple packages, on multiple machines, with multiple compilers (inc. ~cuda, +cuda) much more sane and relaxed.",,,,,,,
4/17/2025 11:23:11,Scientist/Researcher,University research group,Germany,"Python, sh/bash/other shell script","AI/ML, Earth and Climate",Word of mouth,9,"Packages, Core Features, Documentation, Slack Discussions, GitHub Discussions, Issues, Tools/integrations",develop (1.0.0dev0),macOS 15 (Sequoia),"> 1,000",3.13,"spack load, Spack environments","Environments, spack external find, Externals in packages.yaml, Concretization preferences in packages.yaml, `require:` directive in packages.yaml, `prefer:` directive in packages.yaml, concretization: --reuse (default), concretization: --fresh (build everything fresh), concretizer:unify:true (concretize together), concretizer:unify:when_possible, Multiple build systems in one package, Variant/flag propagation (++, ~~, ==), spack test, spack load, spackbot (@spackbot fix style; @spackbot rebuild everything, etc.)",No,No,No,"AMD, Intel, ARM, Apple M2","NVIDIA Ampere, NVIDIA Hopper, Apple MPS","gcc, LLVM, Apple Clang",Very Important,Not Important,Not Important,Not Important,Not Important,Slightly Important,Slightly Important,Somewhat important,Not Important,Not Important,Slightly Important,Very Important,Not Important,Not Important,Slightly Important,Somewhat important,Public binary cache used by default,Yes,No,No,"Documentation, Slack, GitHub Issues, GitHub Discussions, spack help, Source Code",Weekly,No,Excellent,Excellent,Excellent,Excellent,Debugging PyTorch builds with Xcode 16.3,Spack Environment for PyTorch packages I need for research,Ability to build from source and customize builds,"Concretization error messages, macOS CI + Bazel",Expanded package testing in CI,,,,,,,,,
4/17/2025 12:18:42,Manager,University HPC/Computing Center,France,"Python, sh/bash/other shell script",HPC / Simulation,Birds-of-a-feather (BOF) at conference,8,"Packages, Documentation, Tools/integrations",develop (1.0.0dev0),Fedora,10 - 100,3.12,Environment Modules (TCL modules),Module generation,No,No,,"AMD, ARM",NVIDIA Hopper,"gcc, NVHPC, LLVM",Somewhat important,Very Important,Somewhat important,Slightly Important,Slightly Important,Very Important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Very Important,,Yes,No,No,Slack,Yearly,Probably not,Good,Good,Good,Good,installing a package,,,,,,,,,,,,,
4/17/2025 12:34:37,DevOps/SRE,"DOE/NNSA Lab (e.g., LLNL/LANL/SNL)",United States,Python,"HPC / Simulation, DevOps",Word of mouth,6,No,"0.20, 0.23, develop (1.0.0dev0)",RHEL 8,100 - 200,"3.12, 3.13","spack load, Spack environments, spack view, Custom script or env vars","Environments, Mirrors (spack mirror create / air gap support), Build caches (making binary packages), OCI build caches (pushing packages to container registries), spack-python (Python scripting), spack external find, spack develop",No,No,spack manager (https://sandialabs.github.io/spack-manager/),Intel,"NVIDIA Ampere, NVIDIA Hopper","gcc, Intel OneAPI, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA)",Somewhat important,Not Important,Not Important,Not Important,Somewhat important,Very Important,Somewhat important,Somewhat important,Not Important,Critical,Very Important,Somewhat important,Not Important,Somewhat important,Critical,Somewhat important,UX of the CLI for Spack,No,No,Yes,"Documentation, Coworkers, GitHub Issues, GitHub Discussions, spack help, Source Code",Weekly,Probably,Good,OK,OK,Bad,Installing packages across many platforms.,Typically my use case involves installing a built-in Spack package across many platforms and using it for the primary development workflow to support dependencies. Using environments to access installed executables.,The ability to install a chain of dependencies for a build and target specific compilers.,The CLI for Spack is unintuitive especially for developing code.,Make the Spack CLI more manageable and consider how it would be used in other package mangers.,I would say all the packages I care about are present in Spack already.,N/A,,,,,,,
4/17/2025 14:17:07,Scientist/Researcher,Environment Canada,Canada,"Fortran, C, C++, Python, R","HPC / Simulation, Statistics / Data Analysis, AI/ML, Visualization",Podcast,1,"Packages, Documentation, Slack Discussions, GitHub Discussions, Issues",develop (1.0.0dev0),"macOS 14 (Sonoma), macOS 15 (Sequoia), RHEL9, Ubuntu 22, Ubuntu 24, Windows Subsystem for Linux (WSL)","> 1,000",3.6,"spack load, Spack environments, Lmod, spack build-env, Containers","Environments, Module generation, spack containerize, Stacks (matrices in environments), build-env (debug a build), Externals in packages.yaml, Concretization preferences in packages.yaml, `require:` directive in packages.yaml, `prefer:` directive in packages.yaml, concretization: --reuse (default), concretization: --fresh (build everything fresh), concretizer:unify:true (concretize together), Variant/flag propagation (++, ~~, ==), Git versions, spack load, spackbot (@spackbot fix style; @spackbot rebuild everything, etc.), Splicing",Yes -- just one,No,,"AMD, Intel, ARM",Not sure,"gcc, Intel OneAPI, LLVM",Very Important,Not Important,Somewhat important,Somewhat important,Very Important,Very Important,Very Important,Somewhat important,Somewhat important,Very Important,Slightly Important,Somewhat important,Not Important,Slightly Important,Somewhat important,Very Important,Better automatic determination of package requirements for R and Python code. Some of that exists for python. The way conda-forge opens tickets that a new version is available and could they merge it for you would be really nice,Yes,No,No,"Documentation, Slack, GitHub Issues, GitHub Discussions",Weekly,Probably not,Good,Excellent,Good,Excellent,fixing py-xarray and py-netcdf4 so I could build an analysis env,I'm a researcher who uses python c++ and r for hpc simulations and analysis. I'm a bit weird in that I don't really have much technical support so I have to do this all myself,The slack channel ,"Concretizer output is difficult to understand when it fails. It is still sometimes unclear why it choses to rebuild instead of reusing package. Some errors or ""I need X"" are not in the docs and without the slack I would have been lost","Better examples in the docs around some common patterns, such as building MPI, marking it as external, and ensuring everything built is built against it.",,Super impressed with the project. Game changer. So much better than easy_build or conan. Looking forward to the cxxstd modelling,,,,,,,
4/17/2025 16:32:59,Research Software Engineer (RSE),"DOE/NNSA Lab (e.g., LLNL/LANL/SNL)",United States,"C++, Python, MATLAB","HPC / Simulation, Statistics / Data Analysis, High Energy Physics, User Support",Used at my site,1,No,develop (1.0.0dev0),RHEL 8,10 - 100,3.12,Spack environments,"Environments, Module generation, Build caches (making binary packages), Weekly develop snapshots on cache.spack.io, spack external find, concretization: --fresh (build everything fresh), Multiple build systems in one package, spack/setup-env.sh",Yes -- just one,No,spack manager (https://sandialabs.github.io/spack-manager/),"AMD, Intel, ARM","NVIDIA Volta, NVIDIA Hopper, AMD MI300A","gcc, Intel OneAPI, LLVM, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA)",Very Important,Not Important,Slightly Important,Slightly Important,Somewhat important,Slightly Important,Somewhat important,Critical,Not Important,Somewhat important,Not Important,Critical,Not Important,Slightly Important,Somewhat important,Slightly Important,,Yes,No,No,I just try random things until something works.  Sometimes coworkers can be helpful,Never,Probably not,OK,OK,Excellent,Excellent,build and install,required for my job,"AMD M1300s,  peace with DevOps",DevOps is learning while they go.,,,,,,,,,,
4/17/2025 18:52:26,Software Developer,Company,Germany,"C, C++, Python, sh/bash/other shell script, Javascript, Java","Statistics / Data Analysis, AI/ML, Computer Science, Web applications, Visualization, User Support, System Administration, DevOps",Search,1,"Slack Discussions, Issues",develop (1.0.0dev0),"Ubuntu 22, Ubuntu 24, Alpine, Windows Subsystem for Linux (WSL), Windows 10, Windows 11",10 - 100,"3.9, 3.10, 3.11, 3.12, 3.13","Spack environments, spack build-env, spack view","Environments, spack containerize, Mirrors (spack mirror create / air gap support), Build caches (making binary packages), Weekly develop snapshots on cache.spack.io, OCI build caches (pushing packages to container registries), Public build caches at cache.spack.io / binaries.spack.io, E4S build caches (https://e4s.io), build-env (debug a build), spack ci (GitLab pipeline generation -- yourself, not on our CI), spack external find, spack develop, concretizer:unify:true (concretize together), Multiple build systems in one package, Variant/flag propagation (++, ~~, ==), spack env track, spack deconcretize",Yes -- several,My site has a front-end or extension to Spack,Other script to wrap spack,"AMD, Intel","NVIDIA T4, NVIDIA Volta, NVIDIA Ampere, NVIDIA Hopper, NVIDIA Blackwell, NVIDIA Other, AMD MI100, AMD MI200/250X, AMD MI300A, AMD MI300X, No GPUs","gcc, LLVM, MSVC, Emscripten",Very Important,Not Important,Very Important,Very Important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Critical,Critical,Very Important,Very Important,Very Important,Critical,Very Important,Critical,select repos by providing git urls and allow to set them (and their order) for environments,Not sure,No,No,"Documentation, Slack, GitHub Issues, spack help, Source Code, ChatGPT / other LLMs",Weekly,No,OK,Good,Good,Good,Writing/fixing package.py's for own or 3rd party projects (not yet in spack's builtin repo),Software development,environments,"spack repos in same git repo as spack core; when using spack develop, at some point the src. folder gets cluttered with files generated by spack.","separate spack repo from spack core; automatically register used spack repo's (with git url's, i.e., also custom ones) in environments (*.yaml); cross-compilaton; emscripten support",,"Besides the critics, I'd consider spack as one of the most promising package managers right now.",,,,,,,
4/17/2025 23:10:56,Research Software Engineer (RSE),Other Public Research Lab,Germany,"C++, Python, sh/bash/other shell script","HPC / Simulation, Web applications, User Support, System Administration",Used at my site,0,Slack Discussions,"1.0.0-alpha* pre-releases, custom fork",Debian 12,"500-1,000",3.11,"Spack environments, Environment Modules (TCL modules)","Environments, Module generation, Build caches (making binary packages), Concretization preferences in packages.yaml, `require:` directive in packages.yaml, `prefer:` directive in packages.yaml, concretization: --fresh (build everything fresh), concretizer:unify:true (concretize together), concretizer:unify:when_possible",Yes -- just one,No,No,"AMD, Intel, IBM Power","NVIDIA Volta, NVIDIA Ampere, AMD MI300X","gcc, Intel OneAPI, LLVM",Critical,Slightly Important,Not Important,Not Important,Very Important,Somewhat important,Very Important,Somewhat important,Not Important,Slightly Important,Slightly Important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,"2-step environment setup: Install these compilers, then build this environment solely with those compilers",Not sure,No,No,"Documentation, Slack, Coworkers, Source Code",Monthly,Probably not,Good,Good,OK,Good,Made an environment for building and running a benchmark on our HPC,"Broadly we use Spack to build several environments with different ""toolchains"" that our users load as environment modules. Spack helps us with version pinning and managing different flags, etc...

Personally, when I go for spack, I want from it what one would get from a container. I want to build an environment with a set of dependencies that's explicitly listed and make my work reproducible","Can't think of any specifics, though overall it's a good idea and helpful in general","When the concretiser breaks and complains it can be REALLY hard to figure out what it's causing the problem. We try to unify concretisation as making sure we can point to a specific build we request and control is important but sometimes it just says ""can't do it, lol"" and it's a bit of a nightmare figuring out why it doesn't like X package

Mentioned before but Spack environments really need some sort of 2-step approach to come into their own. One of the key things you'd want is a compiler. A lot of our environments are ""toolchains"" built with such and such compiler. But since we have to set the compilers externally beforehand, it's a bit of a mess. There needs to be a ""base setup"" of some sort, where you install compilers (primarily) and then you can tell the rest of the environment definition that you want the packages built with that

That said, sometimes the requirement to build with a specific compiler or use a specific provider is just not respected and, once again, tracking those down is a pain. It makes unification kind of mandatory if you want to have any sort of reasonable idea of what's going on under the hood",I'd say that the concretisation error output is the most important one. Having that be better to follow opens the door to actually troubleshooting weirdness,"Nothing comes to mind. Instead, though, I've run into a few where it just won't build and I have to abandon spack altogether","It's easy to feel down and sound negative with this amount of complaints and whatnot but I feel it's important to stress that Spack is good. The problem Spack is trying to solve is a really hard one and a lot of the evidence is in how many attempts we've given at it. From modules to containers to runtimes to python environments etc... Software management and build reproducibility is where all of the rough edges come to meet and have tea, especially when you're building dozens of things from source. So just keep in mind that while friction is unavoidable, the work that's been put into Spack already is pretty incredible and, personally, am very optimistic about the main pain points of Spack being things that can be smoothed out. Spack is well on its way to being a peerless solution to the problem it's trying to tackle",,,,,,,
4/18/2025 8:13:01,DevOps/SRE,"DOE/Office of Science Lab (e.g., ORNL/ANL/LBL)",United States,"C, C++, Python, Perl, sh/bash/other shell script, Javascript, Ruby","High Energy Physics, Web applications, User Support, DevOps",Word of mouth,6,"Packages, Slack Discussions, Issues, Extensions","0.19, 0.22, 1.0.0-alpha* pre-releases","RHEL 7, RHEL9, CentOS 7, AlmaLinux 9",200 - 500,"3.6, 3.9","spack load, Spack environments","Environments, Chaining (upstreams), Stacks (matrices in environments), Mirrors (spack mirror create / air gap support), Build caches (making binary packages), spack-python (Python scripting), spack external find, Externals in packages.yaml, Concretization preferences in packages.yaml, `require:` directive in packages.yaml, `prefer:` directive in packages.yaml, spack develop, concretization: --reuse (default), concretizer:unify:true (concretize together), concretizer:unify:when_possible, Variant/flag propagation (++, ~~, ==), Git versions, spack test, spack load, spack diff (compare two specs), include_concrete",Yes -- several,My site has a front-end or extension to Spack,fermi-spack-tools,"AMD, Intel","NVIDIA Ampere, Intel Xe (Ponte Vecchio)","gcc, LLVM, nvcc (CUDA)",Very Important,Slightly Important,Slightly Important,Slightly Important,Slightly Important,Somewhat important,Very Important,Somewhat important,Slightly Important,Somewhat important,Slightly Important,Very Important,Not Important,Somewhat important,Not Important,Not Important,,Yes,No,Yes,"Documentation, Slack, Coworkers, Source Code",Weekly,Probably not,Good,Excellent,Good,Good,Built binary cache images of new data management package versions and installed in CVMFS for Fermilab experiments.,"Aside from packaging and distributing tools for our experimenters, I am also collaborating with experiments to assist them in getting their own code stacks built under Spack.",It has helped us organize and distribute new software releases for our experimenters.,"Differences in concretization across Spack releases, differences in recipe interface across releases, Needing to write scripts to automate Spack instance setup (installing multiple recipe repositories, standardized configs (i.e. packages.yaml), chaining upstreams, etc.) ","I'll give you three:
1) Make concretizer able to smoothly reuse specified, existing dependency subtrees of installed packages; even when those subtrees were built with an older version of spack, and would perhaps not be found by current concretizer and/or recipe versions, as it does with, say externals packages.
2) Make future changes to recipe interface backwards compatible.
3) Don't write things in $HOME/.spack such that switching spack instances confuses Spack
","Not so much any particular package, more it should be the case that if ""pip install"" can install it and all its dependencies, ""spack create"" should be able to make recipes for it and any needed dependencies automatically, maybe with a --recursive flag; ditto for Ruby and ""gem install""... ",Thanks for all your hard work in building and maintaining this package manager!,,,,,,,
4/18/2025 12:30:22,HPC User / Analyst,University research group,United States,"Python, R, sh/bash/other shell script","Statistics / Data Analysis, AI/ML, Computer Science, Bioinformatics",Used at my site,4,No,0.17,Rocky 8,"> 1,000",3.8,spack load,spack load,Yes -- several,No,No,"AMD, Intel",No GPUs,gcc,Critical,Not Important,Very Important,Critical,Critical,Critical,Critical,Not Important,Not Important,Not Important,Not Important,Not Important,Not Important,Not Important,Critical,Not Important,,Not sure,No,No,"Slack, Coworkers",Weekly,Probably,Good,Good,Good,Good,installing package using spack,,,,,,,,,,,,,
4/18/2025 12:47:44,Research Software Engineer (RSE),University research group,United States,"Python, Rust, R, sh/bash/other shell script, Javascript","Statistics / Data Analysis, Bioinformatics",Used at my site,2,Issues,0.23,Rocky 9,10 - 100,"3.11, 3.12, 3.13",spack load,spack load,No,No,No,Intel,NVIDIA T4,gcc,Very Important,Not Important,Very Important,Very Important,Very Important,Slightly Important,Very Important,Slightly Important,Slightly Important,Slightly Important,Slightly Important,Slightly Important,Slightly Important,Slightly Important,Very Important,Slightly Important,,Yes,No,No,"Documentation, GitHub Issues, ChatGPT / other LLMs",Monthly,Probably not,Good,Good,Good,Excellent,update versions in the local spack recipe,"We use spack on our university HPC. I use it as a package manager (don't take advantage of all the other features, at least yet)","Much, much easier package management than what we had before",singularityce dependency problems,"build time can be long -- if that could be parallelized or shortened, that would be fantastic.",,thank you for spack!,,,,,,,
4/18/2025 18:14:29,User Support Staff,University HPC/Computing Center,United States,"Fortran, C, sh/bash/other shell script",User Support,Search,8,Issues,"0.22, 0.23",Rocky 8,100 - 200,"3.8, 3.11",Lmod,"Environments, Module generation, build-env (debug a build), Variant/flag propagation (++, ~~, ==), spack load, E4S containers (https://e4s.io)",Yes -- just one,Yes,No,"AMD, Intel","NVIDIA T4, NVIDIA Volta, NVIDIA Ampere, NVIDIA Hopper, NVIDIA Blackwell, NVIDIA Other, AMD MI300X","gcc, Classic Intel Compilers, Intel OneAPI, NVHPC, LLVM, nvcc (CUDA)",Very Important,Slightly Important,Slightly Important,Slightly Important,Very Important,Very Important,Very Important,Very Important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Very Important,Somewhat important,,Yes,No,Yes,"Documentation, Mailing List, GitHub Issues, GitHub Discussions, spack help, Source Code, plain old Google search",Monthly,Probably not,Good,Good,Good,Good,"Pulling Spack from GitHub and building HPL from scratch (compiler, MPI) on a new testing machine. Much easier than building all that stuff manually. Then spack load hpl to run it.","On our HPC systems, spack list, spack info, spack spec -I, spack install, spack module lmod refresh",Just saving time in building packages.,Still not sure if builds with the new Spack/package version will work the same as the old one. That still makes me wary to automate stack builds.,"Not sure, probably the predictability of the success of the build, but, I understand this is very hard and needs coordination with the package recipe maintainers.","I am sure there are some as there's always something we need to install manually, but, these are more of fringe packages.","Thanks for a great product, it has helped us tremendously.",,,,,,,
4/21/2025 8:00:51,Scientist/Researcher,University research group,United States,"C++, Python, sh/bash/other shell script","HPC / Simulation, Statistics / Data Analysis, High Energy Physics",Used at my site,2,"Packages, Slack Discussions, GitHub Discussions","0.22, 0.23, develop (1.0.0dev0)",AlmaLinux 9,"> 1,000","3.9, 3.11","spack load, Spack environments, spack view","Environments, Chaining (upstreams), Stacks (matrices in environments), Mirrors (spack mirror create / air gap support), Build caches (making binary packages), Externals in packages.yaml, Concretization preferences in packages.yaml, `require:` directive in packages.yaml, `prefer:` directive in packages.yaml, concretization: --fresh (build everything fresh), concretizer:unify:true (concretize together), Multiple build systems in one package, spack load, include_concrete",Yes -- several,My site has a front-end or extension to Spack,No,Intel,NVIDIA Ampere,"gcc, Intel OneAPI, LLVM, nvcc (CUDA)",Very Important,Not Important,Not Important,Not Important,Critical,Somewhat important,Somewhat important,Somewhat important,Very Important,Somewhat important,Slightly Important,Somewhat important,Slightly Important,Slightly Important,Somewhat important,Critical,,Yes,"Yes, I'm attending",Yes,"Documentation, Slack",Weekly,Probably not,Good,Good,OK,Good,Build a full software stack for a HEP experiment and publish it to CVMFS via buildcache.,"I manage computing for neutrino physics experiments, which involves publishing computing ","The ability to unify traditional c++ based experiment software ecosystems with modern CUDA-based ML python packages, thanks to spack's excellent infrastructure for handling the installation of python packages.","The time-consuming process of writing robust package recipes that reliably compile, and the lack of support for monorepo packages.",Add the ability to develop multiple packages in a spack environment that are derived from a single monorepo source.,,,,,,,,,
4/21/2025 11:03:38,Research Software Engineer (RSE),"DOE/NNSA Lab (e.g., LLNL/LANL/SNL)",United States,"C++, Python","HPC / Simulation, High Energy Physics, DevOps",Used at my site,9,"Packages, Core Features, Slack Discussions, Issues, Tools/integrations, Spack User Meeting Talk",develop (1.0.0dev0),"macOS 14 (Sonoma), macOS 15 (Sequoia), RHEL 8, Ubuntu 24, TOSS4, BlueOS, TOSS4_cray","500-1,000","3.9, 3.11","spack view, Custom script or env vars, ","Environments, Mirrors (spack mirror create / air gap support), Build caches (making binary packages), Weekly develop snapshots on cache.spack.io, spack ci (GitLab pipeline generation -- yourself, not on our CI), spack external find, `require:` directive in packages.yaml, spack develop, concretization: --fresh (build everything fresh), Multiple build systems in one package, Variant/flag propagation (++, ~~, ==), spackbot (@spackbot fix style; @spackbot rebuild everything, etc.)",Yes -- several,No,Other script to wrap spack,"AMD, Intel, IBM Power, mac processor","NVIDIA Volta, NVIDIA Hopper, AMD MI200/250X, AMD MI300X","gcc, Intel OneAPI, LLVM, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA), CCE (Cray Compilers)",Very Important,Not Important,Somewhat important,Not Important,Somewhat important,Somewhat important,Critical,Very Important,Somewhat important,Critical,Slightly Important,Very Important,Not Important,Slightly Important,Slightly Important,Somewhat important,,No,"Yes, I'm presenting!",Yes,"Documentation, Slack, Coworkers, GitHub Issues, Weekly Telecons, ChatGPT / other LLMs",Weekly,No,OK,Good,Good,Good,"convert old project to new TPL build using Spack, including creating new Spack package recipes",support multiple projects with spack,Spack CI and the Spack team,"Currently, Spack CI breaking and blocking my team for weeks at a time, defaulting to the wrong external with multiple compiler options","error messages, unified compilers from a package up the tree",,Thank you for the increased help this year! I have definitely felt more supported this year.,,,,,,,
4/22/2025 1:55:27,User Support Staff,University HPC/Computing Center,France,Python,"HPC / Simulation, Statistics / Data Analysis, Visualization, User Support",Search,5,"Packages, Slack Discussions","0.23, develop (1.0.0dev0)",RHEL 8,"> 1,000",3.6,"Spack environments, Lmod","Environments, Module generation, Chaining (upstreams), Stacks (matrices in environments), Mirrors (spack mirror create / air gap support), Build caches (making binary packages), spack ci (GitLab pipeline generation -- yourself, not on our CI), Externals in packages.yaml, Concretization preferences in packages.yaml, `require:` directive in packages.yaml, concretization: --fresh (build everything fresh), Variant/flag propagation (++, ~~, ==), Git versions",Yes -- just one,No,,"AMD, RISC-V","NVIDIA Hopper, NVIDIA Blackwell, NVIDIA Other, AMD MI200/250X, AMD MI300A, AMD MI300X","gcc, Classic Intel Compilers, LLVM, AMD ROCmCC (amdclang/hipcc)",Very Important,Slightly Important,Not Important,Not Important,Somewhat important,Very Important,Not Important,Very Important,Not Important,Not Important,Somewhat important,Slightly Important,Somewhat important,Somewhat important,Somewhat important,Critical,,Yes,No,Yes,"Documentation, Slack, GitHub Issues",Yearly,No,Good,Excellent,OK,Good,NAMD 3.0.1 Installation ,,build stacks,,,,,,,,,,,
4/22/2025 3:09:05,Research Software Engineer (RSE),Other Public Research Lab,United Kingdom,"C++, Python, SYCL","HPC / Simulation, Computer Science, High Energy Physics",Word of mouth,4,"Slack Discussions, Issues",0.23,"macOS 15 (Sequoia), Ubuntu 24, Windows Subsystem for Linux (WSL)",100 - 200,"3.12, 3.13","spack load, Spack environments, Environment Modules (TCL modules)","Environments, Module generation, Externals in packages.yaml, Distributed Builds (srun/mpirun spack install), spack develop, Multiple build systems in one package, spack load",Yes -- just one,No,No,"AMD, Intel, ARM","NVIDIA Ampere, NVIDIA Hopper, NVIDIA Blackwell, NVIDIA Other, AMD MI300X, Intel Xe (Ponte Vecchio)","gcc, Intel OneAPI, NVHPC, LLVM, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA), CCE (Cray Compilers), armclang",Somewhat important,Somewhat important,Somewhat important,Slightly Important,Somewhat important,Not Important,Not Important,Critical,Very Important,Somewhat important,Not Important,Not Important,Not Important,Not Important,Somewhat important,Not Important,"GPU arch specification for entire build, preferably in a way which is composable with OpenMP offload or SYCL.",Yes,No,No,"Documentation, Slack, Coworkers, GitHub Issues, Source Code",Monthly,Probably not,OK,OK,Good,Good,Build our development environment.,We develop multiple SYCL libraries. Hence build and test with multiple SYCL implementations and have to build all our dependencies. Then we need a way for our downstream users to build and install everything in a sane way.,,"Dependency type specification (build, link, run) does not let me simply specify that a package is simply installed. All of these three options will try to be helpful and load the package, either by including it in env vars at build time or run time, and I want none of these.
I simply want to specify that package A requires package B to be installed (and be able to get the install path to B in my package.py). I do not want B to be loaded by spack at any time. 

Working with submodules which specify the version of a dependency. i.e. I end up with many installs of foo@working-<compiler>-<hash>.",better support for specifying gpu/sycl configuration for a build.,,"Thanks for Spack, it saves me vast amounts of time and frustration.",,,,,,,
4/22/2025 11:16:34,Research Software Engineer (RSE),University HPC/Computing Center,United States,"Fortran, C++, Python, Rust, sh/bash/other shell script, Ruby","HPC / Simulation, User Support, System Administration",Used at my site,0,No,"1.0.0-alpha* pre-releases, develop (1.0.0dev0)","RHEL 7, RHEL9",10 - 100,3.9,"Spack environments, Lmod","Environments, Module generation, Build caches (making binary packages), spack external find, Externals in packages.yaml, Concretization preferences in packages.yaml, concretization: --reuse (default), concretization: --fresh (build everything fresh), concretizer:unify:true (concretize together), concretizer:unify:when_possible",No,No,spack manager (https://sandialabs.github.io/spack-manager/),"AMD, Intel","NVIDIA Ampere, NVIDIA Hopper, NVIDIA Blackwell, AMD MI200/250X","gcc, Classic Intel Compilers, Intel OneAPI, NVHPC, LLVM, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA)",Very Important,Slightly Important,Slightly Important,Slightly Important,Slightly Important,Slightly Important,Somewhat important,Somewhat important,Slightly Important,Slightly Important,Slightly Important,Slightly Important,Not Important,Not Important,Somewhat important,Slightly Important,SBOM generation,Yes,No,No,"Documentation, GitHub Issues, GitHub Discussions, spack help, Source Code",Weekly,Probably not,Good,Excellent,Good,Good,Create an environment,Creating environments or adding packages to environments for HPC users to load with lmod,,,,,,,,,,,,
4/22/2025 11:50:01,Research Software Engineer (RSE),University HPC/Computing Center,United States,"C, C++, Python, sh/bash/other shell script","HPC / Simulation, Statistics / Data Analysis, AI/ML, Computer Science, Bioinformatics, High Energy Physics, Visualization, User Support, System Administration, DevOps",Used at my site,3,"Packages, Slack Discussions","1.0.0-alpha* pre-releases, develop (1.0.0dev0)",RHEL9,200 - 500,3.9,"Spack environments, Lmod","Environments, Module generation, Stacks (matrices in environments), spack external find, Externals in packages.yaml, Concretization preferences in packages.yaml, `require:` directive in packages.yaml, `prefer:` directive in packages.yaml, concretization: --reuse (default), concretizer:unify:when_possible, Variant/flag propagation (++, ~~, ==), spack diff (compare two specs)",No,Yes,No,"AMD, Intel, ARM","NVIDIA Ampere, NVIDIA Hopper, NVIDIA Blackwell","gcc, Classic Intel Compilers, Intel OneAPI, NVHPC, LLVM, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA)",Slightly Important,Not Important,Not Important,Not Important,Very Important,Slightly Important,Very Important,Slightly Important,Not Important,Not Important,Not Important,Not Important,Somewhat important,Somewhat important,Slightly Important,Somewhat important,SBOM generation,Not sure,"Yes, I'm attending",No,"Documentation, Slack, GitHub Issues, spack help, Source Code",Monthly,No,Good,Excellent,OK,Good,I installed some new packages in an existing environment at our site for our users (I'm an HPC sysadmin),"I'm an HPC sysadmin, and we create/deploy Spack stacks when doing major updates.  On an ongoing basis, we also install/deploy addition packages in existing environments",Ease of building and deploying a large software stack,"I have problems re-using specs.  Here's a very common situation.  If I've built an environment with package A that depends on package B, and later I want to add a package C to that same environment that depends on package B, but I don't want to install a new spec for package B, then I don't know how to make that reliably happen.  For example, when package B is an MPI library, I don't want to install multiple specs of the same MPI library.  ",SBOM support.  This would make Spack a really great solution for some of our university's secure software initiatives.   ,HPC-X with Slurm support,Thanks for building both a great product and a great community!,,,,,,,
4/22/2025 17:54:38,Scientist/Researcher,University research group,United States,C++,"HPC / Simulation, AI/ML, Computer Science",Presentation,2,No,develop (1.0.0dev0),"macOS 10.15 (Catalina), Debian 12, Cray EX",1 - 10,3.11,Spack environments,"Environments, Cray PE support (spack external read-cray-manifest), Externals in packages.yaml, `require:` directive in packages.yaml, `prefer:` directive in packages.yaml",No,Yes,No,"AMD, Intel, ARM, RISC-V","NVIDIA Ampere, NVIDIA Other","gcc, LLVM",Critical,Not Important,Not Important,Not Important,Very Important,Critical,Somewhat important,Not Important,Not Important,Not Important,Not Important,Not Important,Critical,Critical,Not Important,Not Important,,No,No,No,Slack,Monthly,No,Bad,Good,OK,OK,Tried to install gcc-14 toolchain and dependencies on a Cray EX.,I'm mostly trying to get most recent compiler toolchains installed on platforms I don't own.,,"Things never really seem to work as easily as I'd expect. Like I'd like to say something like ""spack install gcc gdb cmake libtool ..."" and just have it work, but it *never* works. There's constantly some sort of concretizer problem or it claims to have installed but the binaries are not in my path or all sorts of other challenges.",Better documentation for users and perhaps simplified CLI workflows for common things. Perhaps containerized sets that just work and have been tested in a bunch of common settings (common includes Cray EX).,,,,,,,,,
4/22/2025 20:27:36,System Administrator,Other Public Research Lab,Japan,Fortran,HPC / Simulation,Used at my site,3,Issues,"0.19, 0.21, 0.23, 1.0.0-alpha* pre-releases",RHEL 8,100 - 200,"3.11, 3.13",spack load,"Module generation, spack containerize, Chaining (upstreams), Externals in packages.yaml, `require:` directive in packages.yaml, concretization: --reuse (default), Multiple build systems in one package, spack load, spack diff (compare two specs)",Yes -- just one,Yes,No,ARM,"AMD MI300A, AMD MI300X","gcc, LLVM, Fujitsu Compilers",Critical,Not Important,Not Important,Not Important,Critical,Somewhat important,Critical,Somewhat important,Slightly Important,Slightly Important,Somewhat important,Somewhat important,Not Important,Critical,Critical,Very Important,Better handling ~/.spack/cache,Yes,"Yes, I'm presenting!",No,"Documentation, Mailing List, Coworkers, GitHub Issues, GitHub Discussions, ChatGPT / other LLMs",Weekly,"Yes, definitely!",Bad,Excellent,Good,Good,Preparing/testing for the upcoming Spack-v1.00 update,spack load,"Many things, but I cannot remember what is the most.","Since Meson probably does not support our system, I could not update py-numpy or py-scipy.",Stable v1.00,,,,,,,,,
4/23/2025 7:35:05,Scientist/Researcher,Other Public Research Lab,United States,"C, C++, Rust","Statistics / Data Analysis, Visualization",Used at my site,4,No,0.23,"RHEL 8, RHEL9, CentOS 7",10 - 100,"3.10, 3.11, 3.12",spack load,spack develop,No,Yes,No,"AMD, Intel","NVIDIA Ampere, NVIDIA Hopper, NVIDIA Blackwell, NVIDIA Other","gcc, LLVM, nvcc (CUDA)",Very Important,Slightly Important,Somewhat important,Somewhat important,Somewhat important,Critical,Very Important,Very Important,Somewhat important,Somewhat important,Slightly Important,Slightly Important,Slightly Important,Somewhat important,Critical,Somewhat important,,Not sure,No,No,"Documentation, Trial and error",Yearly,Probably not,Bad,OK,Bad,Bad,Attempting to install a set of packages,Typically reach for Spack for HPC-related software; workflow is typically starting with a fresh Spack install as they usually get broken after a while,Has made it easier to grab some esoteric software,"Horrible performance
- install takes a while
- takes forever to compute the packages needed to install
- build is not fast (though in many cases that's down to bad build scripts in packages)
- loading packages takes a while","Performance, of course. Longer term...see below",N/A,"I think it's time to rethink Spack. What is it about Spack that can be better than, say, nix? What languages can be used instead of python to make this shine? Instead of just duplicating old and busted approaches to environment management, can you change the idioms? Can you make the workflow as fast and as easy as virtual-envs or cargo? Can you avoid using git as the primary way to distributed your codebase?

I think Spack has a place in HPC (and can consider more things than nix or other similar package managers can), and it does deliver certain packages when it works...but it rarely works and rarely works well. I've even moved on to custom scripting and rebuilding my own horrible package manager to get around the slowness and breakage with Spack's workflow",,,,,,,
4/23/2025 8:05:42,System Administrator,Nonprofit,United Kingdom,"C, Python, sh/bash/other shell script",HPC / Simulation,Used at my site,4,Issues,0.23,Rocky 8,10 - 100,3.1,Environment Modules (TCL modules),Module generation,Yes -- just one,Yes,No,"AMD, Intel","NVIDIA Volta, NVIDIA Ampere, NVIDIA Hopper",gcc,Very Important,Somewhat important,Slightly Important,Slightly Important,Not Important,Very Important,Very Important,Very Important,Slightly Important,Slightly Important,Not Important,Slightly Important,Not Important,Very Important,Very Important,Slightly Important,,Not sure,No,No,Documentation,Monthly,Probably,OK,OK,Good,Good,Installing Cuda,,,Lack of maintainers for some packages,Better error messages,,,,,,,,,
4/23/2025 8:52:27,Research Software Engineer (RSE),"DOE/NNSA Lab (e.g., LLNL/LANL/SNL)",United States,"C++, Python, Rust, sh/bash/other shell script","HPC / Simulation, DevOps",Used at my site,2,"No, Slack Discussions","0.22, 0.23","macOS 15 (Sequoia), RHEL 8, RHEL9, CentOS 7, CentOS 8, Rocky 8, Rocky 9, Ubuntu 20, Ubuntu 22, Ubuntu 24","500-1,000","2.7, 3.13","Spack environments, Containers",Environments,No,Yes,No,"AMD, Intel","AMD MI300A, AMD MI300X","gcc, Intel OneAPI, LLVM, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA), CCE (Cray Compilers)",Very Important,Not Important,Slightly Important,Slightly Important,Very Important,Somewhat important,Critical,Critical,Very Important,Somewhat important,Slightly Important,Slightly Important,Slightly Important,Very Important,Very Important,Somewhat important,,Yes,No,Yes,"Documentation, Slack, Coworkers",Monthly,Probably,Good,Good,OK,OK,Used to install dependencies in a container,,,,,,,,,,,,,
4/23/2025 8:58:54,DevOps/SRE,"DOE/NNSA Lab (e.g., LLNL/LANL/SNL)",United States,"Fortran, C, C++, Python, Lua","HPC / Simulation, Computer Science, User Support, System Administration, DevOps",Word of mouth,8,"Packages, Core Features, Slack Discussions, GitHub Discussions, Issues","0.23, 1.0.0-alpha* pre-releases, develop (1.0.0dev0)","macOS 14 (Sonoma), macOS 15 (Sequoia), RHEL 7, RHEL 8, RHEL9, Rocky 8, Rocky 9","> 1,000","3.11, 3.12, 3.13","spack load, Spack environments, Lmod, Environment Modules (TCL modules), Containers","Environments, Module generation, Build caches (making binary packages), spack external find, Externals in packages.yaml, Concretization preferences in packages.yaml, concretizer:unify:true (concretize together), concretizer:unify:when_possible, Variant/flag propagation (++, ~~, ==), Git versions, spack load",Yes -- just one,No,No,"AMD, Intel, IBM Power, ARM, RISC-V","NVIDIA Volta, NVIDIA Ampere, NVIDIA Hopper, NVIDIA Other, AMD MI100, AMD MI200/250X, AMD MI300A, No GPUs, Cerebras, NextSilicon","gcc, Intel OneAPI, NVHPC, LLVM, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA)",Somewhat important,Not Important,Not Important,Not Important,Somewhat important,Slightly Important,Not Important,Somewhat important,Not Important,Not Important,Very Important,Somewhat important,Somewhat important,Somewhat important,Very Important,Critical,,Yes,"Yes, I'm attending",Yes,"Documentation, Slack, Coworkers, GitHub Issues, GitHub Discussions, spack help, Weekly Telecons",Weekly,Probably not,Good,Good,OK,Good,I use spack to deploy toolchains across many machines with varying architectures,I use spack in containers to build out toolchains and then users can build on those containers or I use them to deploy to a shared network space,,,,,,,,,,,,
4/23/2025 8:59:26,Software Developer,"DOE/NNSA Lab (e.g., LLNL/LANL/SNL)",United States,"Fortran, C, C++, Python, sh/bash/other shell script, Lua","HPC / Simulation, Statistics / Data Analysis, AI/ML, Computer Science, High Energy Physics, Web applications, DevOps",Word of mouth,1,No,0.23,"RHEL 8, Ubuntu 24, SLES15",10 - 100,"3.9, 3.10, 3.11, 3.12, 3.13","spack load, Spack environments, Lmod, Environment Modules (TCL modules), spack view","Module generation, Stacks (matrices in environments), Build caches (making binary packages)",Yes -- just one,No,No,"AMD, Intel, ARM","NVIDIA Blackwell, NVIDIA Other, AMD MI300A, AMD MI300X","gcc, Intel OneAPI, NVHPC, LLVM, nvcc (CUDA)",Very Important,Very Important,Slightly Important,Very Important,Critical,Critical,Critical,Critical,Somewhat important,Very Important,Very Important,Critical,Critical,Critical,Critical,Critical,,Not sure,No,Yes,"Documentation, Coworkers, Email",Weekly,Probably not,Good,Good,OK,OK,Built an application and its TPLs.,I use Spack for my own projects and building others'. ,Pulling in external projects with ease.,Lack of portability in produced binaries. It seems to be in the way more often than not with development activities.,Improve the portability story and containers.,,This is a difficult undertaking. The community appreciates your work in supporting it.,,,,,,,
4/23/2025 9:00:39,Research Software Engineer (RSE),"DOE/NNSA Lab (e.g., LLNL/LANL/SNL)",United States,"C, C++, Python",HPC / Simulation,Used at my site,3,"Packages, Issues",develop (1.0.0dev0),"RHEL 8, RHEL9, Debian 12","500-1,000","3.8, 3.11, 3.12","spack load, Spack environments, Lmod, Containers","Environments, Module generation, spack containerize, spack external find",Yes -- several,My site has a front-end or extension to Spack,No,"AMD, Intel, IBM Power","NVIDIA Volta, NVIDIA Ampere, NVIDIA Hopper, AMD MI200/250X, AMD MI300A","gcc, Intel OneAPI, AMD ROCmCC (amdclang/hipcc)",Critical,Not Important,Slightly Important,Slightly Important,Slightly Important,Critical,Critical,Very Important,Very Important,Slightly Important,Slightly Important,Slightly Important,Slightly Important,Slightly Important,Slightly Important,Critical,,No,"Yes, I'm attending",No,"Documentation, Coworkers",Monthly,Probably not,Bad,OK,Bad,Bad,installing packages,,,Installation issues due to opaque usage of certificates.,,,,,,,,,,
4/23/2025 9:02:12,Computational Scientist,"DOE/NNSA Lab (e.g., LLNL/LANL/SNL)",United States,C++,"HPC / Simulation, Computer Science",Presentation,2,Packages,"don't know, varies","macOS 14 (Sonoma), macOS 15 (Sequoia), RHEL 8, RHEL9",100 - 200,"3.11, 3.12",Environment Modules (TCL modules),"Module generation, Variant/flag propagation (++, ~~, ==)",No,No,No,"AMD, Intel, IBM Power, ARM","NVIDIA Volta, NVIDIA Ampere, NVIDIA Hopper, AMD MI200/250X, AMD MI300A, Intel Xe (Ponte Vecchio), NextSilicon","gcc, Intel OneAPI, NVHPC, LLVM, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA)",Somewhat important,Not Important,Slightly Important,Slightly Important,Somewhat important,Slightly Important,Very Important,Very Important,Not Important,Not Important,Slightly Important,Slightly Important,Not Important,Somewhat important,Slightly Important,Very Important,,Yes,Maybe,No,"Documentation, Slack",Yearly,Probably not,OK,Good,Good,Good,Installing compiler stacks,,,,,,,,,,,,,
4/23/2025 9:14:25,Scientist/Researcher,"DOE/NNSA Lab (e.g., LLNL/LANL/SNL)",United States,"C++, Python, sh/bash/other shell script","HPC / Simulation, User Support, DevOps",Used at my site,0,No,0.23,RHEL 8,10 - 100,"3.6, 3.8, 3.11, 3.12","Lmod, Environment Modules (TCL modules)","Environments, Module generation, Mirrors (spack mirror create / air gap support), Build caches (making binary packages), spack external find, spack develop, concretization: --reuse (default), concretization: --fresh (build everything fresh), concretizer:unify:true (concretize together), Git versions",Yes -- just one,No,No,"AMD, Intel",No GPUs,"gcc, Intel OneAPI, CCE (Cray Compilers)",Very Important,Not Important,Not Important,Not Important,Not Important,Not Important,Very Important,Not Important,Not Important,Not Important,Not Important,Not Important,Not Important,Not Important,Somewhat important,Slightly Important,,Yes,No,Yes,"Documentation, Coworkers",Weekly,Probably not,Good,OK,OK,Good,Wrote packages for our internal code bases and environments for platforms,,,"A lot of user level config makes testing ""clean"" workflows hard. I end up blowing away ~/.spack and my entire spack install often just to make sure our workflows work for users who are coming fresh into it.",,,,,,,,,,
4/23/2025 9:14:36,Software Developer,"DOE/NNSA Lab (e.g., LLNL/LANL/SNL)",United States,"Fortran, C, C++, Python, Perl, R, C#","HPC / Simulation, DevOps",Word of mouth,0,No,None at this time,RHEL9,1 - 10,3.5,Spack environments,,No,No,No,"AMD, Intel, ARM","NVIDIA Volta, NVIDIA Ampere, NVIDIA Hopper, NVIDIA Blackwell, AMD MI100","gcc, Intel OneAPI, LLVM, nvcc (CUDA), CCE (Cray Compilers)",Critical,Not Important,Not Important,Critical,Critical,Critical,Critical,Critical,Not Important,Critical,Critical,Critical,Not Important,Not Important,Critical,Not Important,,Not sure,No,No,"Documentation, Slack, Coworkers",Never,Probably not,OK,OK,OK,OK,Installing modules,,,,,,,,,,,,,
4/23/2025 9:28:09,DevOps/SRE,"DOE/NNSA Lab (e.g., LLNL/LANL/SNL)",United States,"C++, Python","HPC / Simulation, Statistics / Data Analysis, User Support, DevOps",Word of mouth,2,No,0.21,"macOS 14 (Sonoma), macOS 15 (Sequoia)",10 - 100,3.9,Lmod,"Module generation, concretizer:unify:when_possible, Variant/flag propagation (++, ~~, ==), dirty flag in config.yaml",No,No,No,ARM,No GPUs,"gcc, LLVM",Somewhat important,Not Important,Slightly Important,Slightly Important,Slightly Important,Somewhat important,Slightly Important,Not Important,Slightly Important,Not Important,Not Important,Not Important,Not Important,Somewhat important,Somewhat important,Not Important,,Not sure,No,Yes,"Documentation, Coworkers",Yearly,No,OK,Good,Good,Good,"Installing packages. We use spack to build toolchains for a CI/CD node. We don't need to touch it unless something major changes on the node or we need to update the version of something, so it's typically many months between my uses of spack."," We use spack to build toolchains for a CI/CD node. I clone spack, set up an environment and a spack.yaml with the packages we need, set up modules.yaml (we prefer to use LMOD for consistency with other build nodes), and build them.",The ability to get a fully consistent toolchain + libraries without much fuss.,"One library we build, py-h5py, requires libxcrypt, but can't find crypt.h even with the libxcrypt packages installed. We have to manually set our include paths both when building py-h5py and when building our software.",,,,,,,,,,
4/23/2025 9:32:39,HPC User / Analyst,"DOE/NNSA Lab (e.g., LLNL/LANL/SNL)",United States,"Fortran, C++, Python, sh/bash/other shell script","HPC / Simulation, High Energy Physics, Compiler Testing, User Support",Word of mouth,7,No,,macOS 15 (Sequoia),1 - 10,3.1,"spack load, Environment Modules (TCL modules)","Environments, spack load",No,No,No,Intel,M3,"gcc, Classic Intel Compilers, Intel OneAPI",Somewhat important,Not Important,Somewhat important,Somewhat important,Somewhat important,Very Important,Very Important,Very Important,Slightly Important,Somewhat important,Slightly Important,Slightly Important,Somewhat important,Somewhat important,Somewhat important,Slightly Important,,Not sure,Maybe,No,Documentation,Monthly,Probably,Excellent,Good,Good,Good,I mostly just use it to install compiler packages and do compiler compatibility testing in a modular environment,,,,,,,,,,,,,
4/23/2025 9:34:32,DevOps/SRE,"DOE/NNSA Lab (e.g., LLNL/LANL/SNL)",United States,"C, C++, Python",HPC / Simulation,Used at my site,3,No,0.22,"macOS 15 (Sequoia), RHEL 8, Ubuntu 24, SLES15, ","> 1,000","3.10, 3.11, 3.12","Spack environments, Containers","Environments, Module generation, Chaining (upstreams), Mirrors (spack mirror create / air gap support), spack-python (Python scripting), Externals in packages.yaml, Concretization preferences in packages.yaml, `require:` directive in packages.yaml, Distributed Builds (srun/mpirun spack install), spack develop, Variant/flag propagation (++, ~~, ==)",Yes -- several,No,No,"AMD, Intel, ARM",NVIDIA Other,"gcc, armclang",Very Important,Not Important,Slightly Important,Slightly Important,Somewhat important,Not Important,Somewhat important,Not Important,Not Important,Somewhat important,Not Important,Not Important,Not Important,Not Important,Somewhat important,Not Important,,Not sure,No,No,"Documentation, Slack, spack help, ChatGPT / other LLMs, Someone who knows more about it than I do!",Weekly,Probably,Bad,OK,Good,Good,Installed our code/Using it for nightly build tests,"I use it, along with a custom spack python extension, to build a large multi-physics code.",Automated configuration management,Figuring out what went wrong when there are problems.  Very arcane and frequently infuriating hierarchy of configuration files.  Y'all need to have ONE place where this stuff is stored and forget the hierarchy -- and NEVER put configurations in a user home directory.  There should NEVER be a .spack in my home directory.,"Clean up and simplify the configuration settings hierarchy.  Make each spack installation a completely independent and self-contained instance (i.e., don't put anything in my home directory).  

Have some professional technical writers edit, expand, and clarify your documentation. ",,"Spack has great potential and has come a long way since its inception.  It now a very useful tool, but still has some significant pain points and rough edges that need to be fixed.  I believe I covered those above.",,,,,,,
4/23/2025 9:34:46,Scientist/Researcher,Other Public Research Lab,United States,"C++, Python, sh/bash/other shell script, MATLAB, Lua","HPC / Simulation, Computer Science, Visualization, User Support, DevOps",Grad school ,8,"Packages, Spack User Meeting Talk","0.23, develop (1.0.0dev0)","macOS 11 (Big Sur), RHEL 8, Rocky 8, Cray EX","> 1,000","3.9, 3.10, 3.11","spack load, Spack environments, Lmod, Environment Modules (TCL modules), spack build-env, spack view","Environments, Module generation, Stacks (matrices in environments), Mirrors (spack mirror create / air gap support), spack ci (GitLab pipeline generation -- yourself, not on our CI), spack external find, spack develop, spack load",Yes -- just one,No,spack manager (https://sandialabs.github.io/spack-manager/),"AMD, Intel, ARM","NVIDIA Hopper, AMD MI200/250X","gcc, Classic Intel Compilers, Intel OneAPI, NVHPC",Somewhat important,Somewhat important,Somewhat important,Somewhat important,Critical,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Critical,Critical,Somewhat important,Critical,Somewhat important,Somewhat important,Somewhat important,,Not sure,No,Yes,"Documentation, Slack, Coworkers, GitHub Issues, ChatGPT / other LLMs",Weekly,Probably not,OK,Good,Good,Good,Deploy module stack on HPC clusters ,,make installation of software less complex ,,,,"more tutorials, maybe hosted through a video format. more advertisement for tutorials ",,,,,,,
4/23/2025 9:50:48,Scientist/Researcher,"DOE/NNSA Lab (e.g., LLNL/LANL/SNL)",United States,"Python, Rust, Racket, Haskell, Rocq","Computer Science, Visualization, Formal Methods",Used at my site,0,No,,"RHEL9, Debian 12",1 - 10,3.11,,,No,No,No,"AMD, Intel, RISC-V",No GPUs,"gcc, LLVM, CompCert",Slightly Important,Not Important,Critical,Critical,Somewhat important,Not Important,Critical,Not Important,Not Important,Somewhat important,Somewhat important,Critical,Not Important,Somewhat important,Somewhat important,Not Important,"integration with existing language-specific package managers (Python's pip, Rust's cargo, Racket's raco, OCaml's opam, Haskell's cabal/stack, etc., etc., etc.) to make more packages available faster",Yes,No,No,"Documentation, GitHub Issues, GitHub Discussions",Weekly,No,OK,OK,Bad,OK,browse the package list to determine whether it has what I need,"I have settled on containers as the most reliable way to distribute software, but that seems excessive, and I'd rather use a general-purpose cross-platform ""universal"" package manager instead.",,,make more packages available,"GHC (Haskell compiler), Hackage/Stackage (Haskell package repositories), cvc5 (SMT solver)","What I want more than anything else is a reliable language-independent cross-platform package manager that integrates well enough with existing package managers that I don't immediately give up a large swath of the packages that I use, or have to port each one (along with its dependencies...), or hack together a hybrid solution where some packages come from the ""real"" package manager and some others come from one of a collection of ""side"" package managers.  Conda isn't it, Nix/Guix aren't it, and I don't think Spack is it yet, but I'd be thrilled if it got there.",,,,,,,
4/23/2025 9:56:12,System Administrator,"DOE/NNSA Lab (e.g., LLNL/LANL/SNL)",United States,"C, Python","HPC / Simulation, AI/ML, Computer Science, System Administration",Word of mouth,4,No,"0.10, 0.11, 1.0.0-alpha* pre-releases","macOS 15 (Sequoia), RHEL 8",200 - 500,"3.6, 3.9","spack build-env, Containers","Environments, Module generation, spack containerize, build-env (debug a build)",Yes -- several,No,spack manager (https://sandialabs.github.io/spack-manager/),"AMD, Intel, ARM",AMD MI300A,"gcc, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA), armclang",Very Important,Very Important,Very Important,Somewhat important,Somewhat important,Somewhat important,Critical,Critical,Very Important,Very Important,Somewhat important,Critical,Critical,Critical,Critical,Somewhat important,,Yes,No,Yes,"Documentation, Slack, Coworkers",Monthly,Probably,OK,Good,Bad,OK,Installing a package,,,,better build set-ups,,,,,,,,,
4/23/2025 10:07:54,Computational Scientist,"DOE/NNSA Lab (e.g., LLNL/LANL/SNL)",United States,"C++, Python","HPC / Simulation, AI/ML",Used at my site,8,Slack Discussions,I have no idea.  Nor do I know how to check,"RHEL 8, RHEL9",10 - 100,3.6,"Lmod, Custom script or env vars",spack develop,Yes -- several,My site has a front-end or extension to Spack,No,Intel,No GPUs,gcc,Slightly Important,Not Important,Not Important,Not Important,Not Important,Slightly Important,Not Important,Not Important,Not Important,Critical,Not Important,Not Important,Not Important,Not Important,Not Important,Not Important,"Adopting SNL's ""spack make"" as a real feature",Yes,No,No,"Slack, Coworkers",Never,No,OK,OK,Horrible,Bad,Tried to build code with it,spack develop / spack concretize / spack make,spack concretize -fU,Spack pathologically tries to rebuild system packages.,,,,,,,,,,
4/23/2025 10:13:03,DevOps/SRE,"DOE/NNSA Lab (e.g., LLNL/LANL/SNL)",United States,"C, C++",HPC / Simulation,Word of mouth,3,Packages,"0.23, develop (1.0.0dev0)","macOS 15 (Sequoia), RHEL 8, RHEL9, CentOS 7, CentOS 8, Debian 10, Alpine","> 1,000","3.9, 3.10, 3.11","spack load, Spack environments, Lmod, Environment Modules (TCL modules), spack view","Environments, Module generation, Mirrors (spack mirror create / air gap support), Build caches (making binary packages), spack external find, concretizer:unify:when_possible",Yes -- several,No,No,"AMD, Intel","NVIDIA Volta, NVIDIA Ampere, NVIDIA Hopper, NVIDIA Blackwell, AMD MI200/250X, AMD MI300A, AMD MI300X","gcc, Intel OneAPI, LLVM, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA)",Critical,Not Important,Slightly Important,Slightly Important,Very Important,Critical,Somewhat important,Very Important,Slightly Important,Somewhat important,Somewhat important,Not Important,Very Important,Very Important,Very Important,Critical,The feature in progress to drop parent package constraints when inheriting from other packages.,Yes,No,No,"Documentation, Slack, Coworkers, ChatGPT / other LLMs",Weekly,Probably,Good,Excellent,Good,Excellent,Setup a build environment (compilers + toolchain + libraries etc.) for developers.,Third party software management for developers.,Scaling third party software which we provide to developers.,Long turnaround times only to run into build errors for individual packages.,Separate the package.py repo from the spack base repo.,,Spack is a great project and it's headed in the right direction.,,,,,,,
4/23/2025 11:07:30,Scientist/Researcher,"DOE/NNSA Lab (e.g., LLNL/LANL/SNL)",United States,"C, C++, Python","HPC / Simulation, Computer Science",Word of mouth,3,Packages,0.23,"macOS 15 (Sequoia), Rocky 9",10 - 100,"3.12, 3.13",spack load,"spack external find, spack test, spack load, Extending packages to use forked repos",Yes -- just one,No,No,"AMD, Intel, Nvidia Grace","NVIDIA Hopper, NVIDIA Blackwell, AMD MI300A","gcc, LLVM",Slightly Important,Not Important,Not Important,Not Important,Not Important,Slightly Important,Slightly Important,Very Important,Slightly Important,Not Important,Not Important,Not Important,Not Important,Critical,Very Important,Very Important,,Not sure,Maybe,No,"Documentation, Slack, ChatGPT / other LLMs",Weekly,Probably,Excellent,Excellent,Good,Good,Created a new package,"My main use case it extending spack packages to use forked version of benchmarks that I have added functionality to, such as profiling markers",Ability to extend packages,Mysteriously failing to build some system package I've never heard of,Harden Spack's compatibility so that unexpected build errors don't happen,Helix text editor,I was often frustrated by Spack in the past but have found it an invaluable tool for distributing forked versions of benchmarks. This will be very useful for the reproducibility of my work and the usability of the SST simulator,,,,,,,
4/23/2025 11:12:52,Scientist/Researcher,"DOE/NNSA Lab (e.g., LLNL/LANL/SNL)",United States,"C, C++, Python, sh/bash/other shell script, Javascript, Ruby","HPC / Simulation, AI/ML, Web applications, Visualization, System Administration, DevOps",Used at my site,6,"Core Features, Issues","0.21, 0.22, develop (1.0.0dev0)","macOS 14 (Sonoma), macOS 15 (Sequoia), RHEL 8, RHEL9, Rocky 8, Rocky 9, Ubuntu 18, Ubuntu 20, Ubuntu 22, Ubuntu 24, Amazon Linux, Fedora, Alpine, Cray EX",100 - 200,"3.11, 3.12","spack load, Spack environments, Lmod, Environment Modules (TCL modules), Containers","Environments, Module generation, spack containerize, Mirrors (spack mirror create / air gap support), Build caches (making binary packages), Cray PE support (spack external read-cray-manifest), Externals in packages.yaml, spack develop, concretization: --reuse (default), concretization: --fresh (build everything fresh), concretizer:unify:true (concretize together), concretizer:unify:when_possible",Yes -- several,My site has a front-end or extension to Spack,Other script to wrap spack,"AMD, Intel, ARM, RISC-V","NVIDIA Ampere, NVIDIA Hopper, NVIDIA Blackwell, AMD MI200/250X, AMD MI300A, AMD MI300X, Intel Xe (Ponte Vecchio), SambaNova, Cerebras, NextSilicon","gcc, Intel OneAPI, NVHPC, LLVM, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA), CCE (Cray Compilers), armclang",Very Important,Very Important,Somewhat important,Somewhat important,Very Important,Very Important,Very Important,Very Important,Somewhat important,Very Important,Somewhat important,Very Important,Somewhat important,Critical,Very Important,Somewhat important,base system installs with possibility for users to customize,Yes,No,Yes,"Documentation, Coworkers, GitHub Issues, Source Code",Weekly,Probably not,Good,Good,Good,Good,building a software stack,Scripting around Spack to build a software stack.,Building software,"Spack is complicated, like git. Concretizer when building a full stack often builds multiple versions of same package. Fiddly to get right, figure out what options needed, etc.",Officially add support for RISC-V,"vLLM, Linux","Response to DOE PRs has been very slow (multi-year in some cases). Accept or reject, but don't leave in limbo.",,,,,,,
4/23/2025 11:40:09,Research Software Engineer (RSE),"DOE/NNSA Lab (e.g., LLNL/LANL/SNL)",United States,"C, C++, Python, Java, MATLAB","HPC / Simulation, AI/ML, Computer Science, DevOps",Word of mouth,5,"Packages, Core Features, Issues","0.23, develop (1.0.0dev0)","macOS 14 (Sonoma), macOS 15 (Sequoia), RHEL 7, RHEL 8",200 - 500,"3.9, 3.10, 3.11, 3.12","spack load, Spack environments, Lmod, Environment Modules (TCL modules), spack build-env","Environments, Module generation, E4S build caches (https://e4s.io), build-env (debug a build), Externals in packages.yaml, spack develop, spack load, E4S containers (https://e4s.io)",Yes -- just one,No,No,"AMD, Intel, ARM","NVIDIA T4, NVIDIA Volta, NVIDIA Ampere","gcc, LLVM, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA)",Very Important,Somewhat important,Slightly Important,Slightly Important,Somewhat important,Critical,Somewhat important,Somewhat important,Slightly Important,Somewhat important,Somewhat important,Slightly Important,Very Important,Very Important,Somewhat important,Somewhat important,,Yes,No,Yes,"Documentation, Slack, Coworkers, GitHub Issues, GitHub Discussions",Weekly,Probably,Good,Good,Good,Good,Updated a user package repository that had fallen out of sync with the builtin package repository. It would be great if a package could rely on the builtin and just append extra variants.,I build software and then share it with users on a LAN through either spack load or module load. I also use spack develop with environments as a developer workflow.,It is the only solution I have for building Xyce on Trilinos on Suite-Sparse on OpenBlas with Python for building and distributing my Xyce-PyMi software.,My pain points at Sandia are mostly proxy related.,,None come to mind.,"I think the project is heading in the right direction and gaining adoption. I'm noticing recently that cloning spack is 200Mb, which is becoming problematic.",,,,,,,
4/23/2025 12:43:16,Scientist/Researcher,"DOE/NNSA Lab (e.g., LLNL/LANL/SNL)",United States,"C++, Python, Julia","HPC / Simulation, AI/ML",Used at my site,3,No,0.23,"macOS 15 (Sequoia), RHEL 8, Debian 12, Arch, Windows Subsystem for Linux (WSL)","500-1,000",3.13,Spack environments,"Environments, Build caches (making binary packages), build-env (debug a build), Distributed Builds (srun/mpirun spack install), concretization: --fresh (build everything fresh)",Yes -- several,My site has a front-end or extension to Spack,Other script to wrap spack,"AMD, Intel, ARM","NVIDIA Volta, NVIDIA Ampere, NVIDIA Hopper, NVIDIA Blackwell, AMD MI200/250X, AMD MI300A, AMD MI300X","gcc, Intel OneAPI, LLVM, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA)",Very Important,Slightly Important,Slightly Important,Not Important,Very Important,Critical,Critical,Slightly Important,Slightly Important,Somewhat important,Not Important,Critical,Slightly Important,Slightly Important,Critical,Slightly Important,,Not sure,No,No,"Documentation, Coworkers",Monthly,Probably,Bad,Bad,OK,OK,Installed Exawind solver stack where Spack makes all dependencies,"Always using develop, typically build environment with TPLs and develop package",Bit easier to move to new hardware,Super slow and difficult to get to use system packages the way you want.,Performance pass would be the most important thing.,,,,,,,,,
4/23/2025 12:53:48,Computational Scientist,"DOE/NNSA Lab (e.g., LLNL/LANL/SNL)",United States,C++,HPC / Simulation,Used at my site,2,No,custom fork,RHEL 8,1 - 10,3.9,Custom script or env vars,"Environments, Module generation, Mirrors (spack mirror create / air gap support), Build caches (making binary packages), build-env (debug a build), spack develop, spack load",Yes -- several,Yes,No,"AMD, Intel, IBM Power","NVIDIA Volta, NVIDIA Hopper, NVIDIA Blackwell, AMD MI300X","gcc, Intel OneAPI, LLVM, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA), CCE (Cray Compilers)",Critical,Not Important,Not Important,Not Important,Not Important,Very Important,Somewhat important,Somewhat important,Not Important,Not Important,Not Important,Not Important,Not Important,Not Important,Somewhat important,Not Important,Better reliability.  Two people following the same build recipe often get different results,No,No,No,"Documentation, Local spack developer",Monthly,Probably not,Bad,Bad,OK,Horrible,Installing a package,Building a CFD code with lots of dependencies,Very little,"Spack is extremely unreliable.  Two people sitting next to each other following the same build recipe get different results (one build works, one build fails).  The behavior of spack is opaque to non-developers, making it impossible to figure out why a build failed.",,,I would not recommend anyone use spack unless they plan to become a spack developer. ,,,,,,,
4/23/2025 14:22:34,Computational Scientist,"DOE/NNSA Lab (e.g., LLNL/LANL/SNL)",United States,"Fortran, C, C++, Python",HPC / Simulation,Word of mouth,8,"Packages, Core Features, Documentation, Slack Discussions, GitHub Discussions, Issues","0.20, 0.21, 0.22","macOS 13 (Ventura), macOS 14 (Sonoma), macOS 15 (Sequoia), RHEL 8, CentOS 8, Rocky 9, AlmaLinux 9, Ubuntu 22, Ubuntu 24","> 1,000","3.11, 3.12, 3.13","Lmod, Environment Modules (TCL modules), Custom script or env vars","Environments, Module generation, Chaining (upstreams), Mirrors (spack mirror create / air gap support), `prefer:` directive in packages.yaml, spack develop, concretization: --fresh (build everything fresh)",Yes -- several,My site has a front-end or extension to Spack,No,"AMD, Intel, ARM","NVIDIA T4, NVIDIA Volta, NVIDIA Ampere, NVIDIA Hopper, NVIDIA Blackwell, NVIDIA Other, AMD MI100, AMD MI200/250X, AMD MI300A, AMD MI300X","gcc, LLVM, nvcc (CUDA), armclang",Somewhat important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Very Important,Very Important,Somewhat important,Somewhat important,Critical,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Critical,,Not sure,No,Yes,"Documentation, Slack, Coworkers, GitHub Issues, GitHub Discussions, Source Code",Weekly,Probably not,Good,Good,Good,Excellent,development of local packages,`git clone <package>; spack develop -p <dir> <package@version>; spack add <package>; spack install`,spack develop and extending spack via entry points,rebuilding packages that should rebuild on other changes to my environment ,less rebuilds,no,,,,,,,,
4/23/2025 18:02:04,Research Software Engineer (RSE),"DOE/NNSA Lab (e.g., LLNL/LANL/SNL)",United States,"Fortran, C++, Python, sh/bash/other shell script","HPC / Simulation, Computer Science, Quantum",Word of mouth,2,"Packages, Issues","0.21, 0.22, 0.23","RHEL 8, RHEL9, CentOS 8, Fedora",100 - 200,"3.9, 3.10, 3.11, 3.12, 3.13","spack load, Spack environments, spack build-env","Environments, Mirrors (spack mirror create / air gap support), build-env (debug a build), spack external find, Externals in packages.yaml, spack develop, spack load",Yes -- just one,Yes,No,"AMD, Intel, ARM, RISC-V","NVIDIA Hopper, NVIDIA Blackwell, AMD MI200/250X, AMD MI300A, AMD MI300X, Intel Xe (Ponte Vecchio)","gcc, Intel OneAPI, NVHPC, LLVM, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA), Fujitsu Compilers, armclang",Critical,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,,Yes,"Yes, I'm attending",No,"Documentation, Coworkers",Monthly,No,OK,OK,OK,OK,None,,,,,,,,,,,,,
4/23/2025 18:05:01,Computational Scientist,"DOE/NNSA Lab (e.g., LLNL/LANL/SNL)",United States,"C++, Python, sh/bash/other shell script, CMake","HPC / Simulation, DevOps",Don't remember.  It was a long time ago.,5,No,develop (1.0.0dev0),RHEL 8,1 - 10,3.6,Environment Modules (TCL modules),"Environments, Module generation, build-env (debug a build), spack external find, Externals in packages.yaml, concretization: --reuse (default), Git versions",Yes -- several,Yes,No,"AMD, Intel, ARM","NVIDIA Volta, AMD MI100","gcc, Intel OneAPI, LLVM, nvcc (CUDA)",Critical,Not Important,Not Important,Not Important,Somewhat important,Somewhat important,Very Important,Very Important,Not Important,Very Important,Very Important,Very Important,Not Important,Not Important,Somewhat important,Very Important,Allow reconfigure with CMake from scratch in a package build dir with no spack commands at all.,Yes,No,Yes,"Documentation, Slack, Coworkers, GitHub Issues, GitHub Discussions, spack help, Source Code, ChatGPT / other LLMs",Weekly,No,OK,OK,OK,OK,Tried to figure out where the nightly builds are going to and to determine what versions of LLVM are being tested.,Build packages locally with my own branches of LLVM.,,"Too complex, bad error messages.",Better package development and package testing support.,,,,,,,,,
4/23/2025 18:26:18,Research Software Engineer (RSE),"DOE/Office of Science Lab (e.g., ORNL/ANL/LBL)",United States,C,"HPC / Simulation, Computer Science",Presentation,2,No,develop (1.0.0dev0),"Ubuntu 22, Ubuntu 24",10 - 100,3.1,Custom script or env vars,,Yes -- just one,No,No,"AMD, Intel, ARM","NVIDIA Hopper, NVIDIA Blackwell, AMD MI300X, Intel Xe (Ponte Vecchio)","gcc, Intel OneAPI, LLVM",Slightly Important,Very Important,Not Important,Not Important,Not Important,Very Important,Slightly Important,Slightly Important,Slightly Important,Slightly Important,Somewhat important,Somewhat important,Not Important,Somewhat important,Somewhat important,Very Important,,Not sure,No,No,"Documentation, Slack, GitHub Issues, Source Code",Monthly,Probably not,Good,Good,Good,OK,Installing packages,"Spack install missing tools and dependency, then link/alias locations.",Saves time installing dependencies.,Growing complexity.,A core spack option that resists feature creep.,Not yet,,,,,,,,
4/23/2025 19:37:29,Research Software Engineer (RSE),Company,United States,"C, C++, Python, Rust, sh/bash/other shell script","HPC / Simulation, Statistics / Data Analysis, Computer Science, Compiler Testing, Visualization",Used at my site,4,"Packages, Core Features, Documentation, Slack Discussions, GitHub Discussions, Issues, Tools/integrations, Spack User Meeting Talk, Spack Community Zoom Meetings","develop (1.0.0dev0), custom fork","RHEL 8, RHEL9, Ubuntu 20, Ubuntu 24, SLES15, Fedora, Windows Subsystem for Linux (WSL), Cray EX, Cray XD","> 1,000","3.7, 3.8, 3.9, 3.10","spack load, Lmod, spack build-env","Environments, Module generation, spack containerize, Chaining (upstreams), Stacks (matrices in environments), Mirrors (spack mirror create / air gap support), Build caches (making binary packages), Public build caches at cache.spack.io / binaries.spack.io, build-env (debug a build), spack ci (GitLab pipeline generation -- yourself, not on our CI), spack-python (Python scripting), spack external find, Externals in packages.yaml, Concretization preferences in packages.yaml, `require:` directive in packages.yaml, `prefer:` directive in packages.yaml, spack develop, concretization: --reuse (default), concretization: --fresh (build everything fresh), concretizer:unify:true (concretize together), concretizer:unify:when_possible, Multiple build systems in one package, Variant/flag propagation (++, ~~, ==), Git versions, spack test, spack load, spackbot (@spackbot fix style; @spackbot rebuild everything, etc.), spack diff (compare two specs), Splicing, include_concrete",No,Yes,Other script to wrap spack,"AMD, Intel, ARM","NVIDIA T4, NVIDIA Ampere, NVIDIA Hopper, AMD MI100","gcc, Intel OneAPI, LLVM, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA), CCE (Cray Compilers), armclang",Somewhat important,Somewhat important,Very Important,Critical,Somewhat important,Critical,Very Important,Very Important,Slightly Important,Very Important,Somewhat important,Critical,Not Important,Very Important,Very Important,Critical,,Not sure,"Yes, I'm presenting!",No,"Documentation, Slack, Coworkers, GitHub Issues, spack help, Source Code",Daily,No,Good,Good,OK,Good,Updating the ParaView package to support dependencies for ParaView v6,"Spack CI and HPC deployments of SDKs. Workflow for both is to develop and tune an environment through repeated concretization, review concretized specs, update requirements in packages/configs. Then do a final concretization and install using a deployment script that handles capturing the state of the deployment, generating modules, etc.","The ability to include_concrete and the addtions of ""require"" and ""conflicts"" to the package DSL as well as to the package configs have made environment composition a bit simpler.",Iteration speed when developing large environments.,"More performance improvements around all of the new features added to Spack in the last couple of years. The concretizer gets a lot of attention already, but installations and pushing/fetching binaries and sources should also use some attention. Searching mirrors when there are a lot of mirrors registered takes an unbearably long time.",Any I can think of I am already working on adding :),,,,,,,,
4/23/2025 19:49:55,Scientist/Researcher,"DOE/Office of Science Lab (e.g., ORNL/ANL/LBL)",United States,"C++, Python",HPC / Simulation,Used at my site,2,No,"0.23, custom fork","RHEL9, Windows 10, Windows 11",10 - 100,"3.8, 3.9, 3.12, 3.13",Spack environments,Environments,Yes -- several,Yes,No,"AMD, Intel",No GPUs,"gcc, Intel OneAPI, MSVC",Critical,Not Important,Very Important,Very Important,Not Important,Not Important,Not Important,Not Important,Not Important,Not Important,Not Important,Not Important,Not Important,Slightly Important,Not Important,Not Important,Better Windows support ,Not sure,No,No,"Documentation, Slack, GitHub Issues, Source Code",Monthly,Probably,OK,Good,OK,Good,Installed several packages ,"We are working on a CFD code on HPC systems that make extensive use of Spack, so I'm usually operating in a Spack environment as I build and test.",Great Linux support for complex packages like Trilinos,Less than great support on Windows ,Improve Windows support ,,,,,,,,,
4/23/2025 23:18:10,Scientist/Researcher,University HPC/Computing Center,Sweden,"Fortran, C",HPC / Simulation,Word of mouth,4,Packages,develop (1.0.0dev0),"macOS 15 (Sequoia), SLES15, Cray EX",200 - 500,3.12,"Lmod, Environment Modules (TCL modules)","Module generation, Chaining (upstreams), spack external find, Cray PE support (spack external read-cray-manifest), Externals in packages.yaml",Yes -- several,No,No,"AMD, ARM","NVIDIA Ampere, NVIDIA Hopper, NVIDIA Blackwell, AMD MI200/250X, AMD MI300A","gcc, NVHPC, LLVM, nvcc (CUDA), NAG, CCE (Cray Compilers), Fujitsu Compilers",Somewhat important,Slightly Important,Slightly Important,Slightly Important,Somewhat important,Not Important,Somewhat important,Slightly Important,Slightly Important,Not Important,Not Important,Not Important,Not Important,Very Important,Slightly Important,Not Important,,Not sure,No,Yes,"Documentation, Slack, GitHub Issues, GitHub Discussions",Yearly,Probably not,OK,OK,Good,Good,maintaining packages in our Cray EX dev environment.,"Provide necessary tools for our Cray EX, and contribute packages for the sites key applications",Reduce time spent setting up env. at various sites,"Integration with CPE, wrappers and modules is still a bit shaky",Better integration with CPE,Nope,,,,,,,,
4/24/2025 0:11:42,Research Software Engineer (RSE),University HPC/Computing Center,Germany,"C++, Python",HPC / Simulation,Word of mouth,3,Packages,develop (1.0.0dev0),"CentOS 8, Rocky 9, openSuSE",10 - 100,3.9,"spack load, Spack environments","Environments, Chaining (upstreams)",No,No,No,"AMD, Intel, ARM","NVIDIA Ampere, NVIDIA Hopper, AMD MI200/250X, AMD MI300A, AMD MI300X, Intel Xe (Ponte Vecchio)","gcc, Intel OneAPI, NVHPC, LLVM, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA)",Very Important,Not Important,Not Important,Not Important,Not Important,Critical,Somewhat important,Somewhat important,Somewhat important,Not Important,Not Important,Not Important,Slightly Important,Somewhat important,Somewhat important,Critical,,Not sure,No,No,"Documentation, Slack, GitHub Issues, ChatGPT / other LLMs",Monthly,No,Good,Good,Good,Good,"Unsuccessfully tried to install a ROCm stack. Some ROCm packages failed to build, but I could not figure out how to fix it.",,"Installing packages with many dependencies, e.g. openMPI, Petsc. Without spack that would be much more work.",,The runtime for `spack spec`.,,,,,,,,,
4/24/2025 1:39:21,Research Software Engineer (RSE),Other Public Research Lab,Switzerland,"C++, Python, Rust, sh/bash/other shell script, Haskell","HPC / Simulation, Computer Science",Presentation,2,"Packages, Core Features, Slack Discussions",develop (1.0.0dev0),Debian 12,"> 1,000","3.9, 3.12, 3.13",Spack environments,"Environments, Mirrors (spack mirror create / air gap support), Build caches (making binary packages)",Yes -- just one,Yes,No,"AMD, Intel, ARM","NVIDIA Ampere, NVIDIA Hopper, AMD MI200/250X","gcc, Intel OneAPI, LLVM, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA)",Slightly Important,Not Important,Not Important,Slightly Important,Slightly Important,Critical,Somewhat important,Critical,Somewhat important,Somewhat important,Not Important,Not Important,Not Important,Somewhat important,Slightly Important,Critical,,Yes,No,No,"Documentation, Slack, Source Code",Weekly,Probably not,Excellent,Excellent,Excellent,Excellent,Installing software on an air-gapped system using my own build cache!,I mostly use a simple environment-based workflow where I install dependencies and then develop software.,"Having someone manage dependencies for me instead of having to keep millions of separate, custom-managed modules and prefixes around has been awesome.","Sometimes the concertization feels a bit non-deterministic, creating some surprise situations.",Make the concretizer faster!,None,Thank you for all the excellent work; I love using and contributing to Spack.,,,,,,,
4/24/2025 2:44:32,Research Software Engineer (RSE),University HPC/Computing Center,Switzerland,"C, C++, Python, Rust, Go","HPC / Simulation, Statistics / Data Analysis, Computer Science, Bioinformatics, System Administration",Used at my site,7,"Packages, Slack Discussions, Issues, Spack Community Zoom Meetings","0.22, 0.23, develop (1.0.0dev0)","macOS 15 (Sequoia), RHEL9, Centos Stream, Rocky 9, AlmaLinux 9, Debian 12, SLES15, openSuSE, Fedora, Alpine, Cray EX, Gentoo","500-1,000","3.6, 3.7, 3.8, 3.9, 3.10, 3.11, 3.12, 3.13","Spack environments, uenvs","Environments, Module generation, spack containerize, Stacks (matrices in environments), Mirrors (spack mirror create / air gap support), Build caches (making binary packages), build-env (debug a build), spack external find",Yes -- just one,No,uenvs,"AMD, Intel, ARM","NVIDIA Hopper, AMD MI200/250X, AMD MI300A, AMD MI300X","gcc, Intel OneAPI, NVHPC, LLVM, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA)",Critical,Very Important,Not Important,Somewhat important,Critical,Very Important,Very Important,Critical,Somewhat important,Not Important,Somewhat important,Not Important,Very Important,Very Important,Somewhat important,Critical,toolchains,Yes,No,Yes,"Slack, Coworkers, GitHub Issues, Source Code",Monthly,No,OK,Bad,OK,Good,Created a custom package,"Develop software for astrophysics, so I create a bunch of spack packages",Environment depfile,the change of the package API. You change too much! I hope that with v1.0.0 we will have a stable and sustainable way of maintaining our own packages with Spack. ,Create proper toolchains and build caches for them,,Are you investing in SpackOS? What is it? Can you please comment?,,,,,,,
4/24/2025 5:31:07,Computational Scientist,"DOE/Office of Science Lab (e.g., ORNL/ANL/LBL)",United States,C++,HPC / Simulation,Word of mouth,5,"Packages, Issues",0.23,"Rocky 9, Ubuntu 20, Ubuntu 22",1 - 10,3.1,spack load,"spack external find, Externals in packages.yaml, spack test, spack load",No,No,No,"AMD, Intel","NVIDIA Volta, NVIDIA Ampere, NVIDIA Hopper, AMD MI100, AMD MI200/250X, AMD MI300A, AMD MI300X","gcc, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA), CCE (Cray Compilers)",Slightly Important,Not Important,Critical,Critical,Somewhat important,Somewhat important,Very Important,Very Important,Very Important,Slightly Important,Somewhat important,Somewhat important,Slightly Important,Somewhat important,Somewhat important,Not Important,,Yes,Maybe,No,"Documentation, Coworkers",Monthly,Probably not,Good,Good,Good,Good,update package,,,,,,,,,,,,,
4/24/2025 5:32:05,Research Software Engineer (RSE),University HPC/Computing Center,American Samoa,"Fortran, C, Python, sh/bash/other shell script, Lua",User Support,Used at my site,3,Issues,"0.22, 0.23, develop (1.0.0dev0)","RHEL 8, RHEL9, SLES15","> 1,000","3.9, 3.10",Lmod,"Module generation, spack external find, spack load",No,No,No,"AMD, Intel, ARM","NVIDIA Ampere, NVIDIA Hopper, AMD MI100, AMD MI200/250X","gcc, Intel OneAPI, NVHPC, nvcc (CUDA), CCE (Cray Compilers)",Critical,Slightly Important,Very Important,Somewhat important,Somewhat important,Somewhat important,Critical,Critical,Somewhat important,Somewhat important,Slightly Important,Somewhat important,Somewhat important,Somewhat important,Slightly Important,Somewhat important,,No,No,Yes,"Documentation, Coworkers, GitHub Issues",Monthly,No,OK,OK,OK,Bad,"build middleware support libs: hdf, netcdf, fftw, etc",support large HPC supercomputer clusters with thousands of users,it works 80%of the time,"spack fails and error messages and logs can be opaque, i don't want to read your spack python code!",fix the wide variety of concretization fails,,"spack is pretty good at building things with a dozen dependencies, spack fails hard on things with say 30-50 dependencies or anytime it loses it mind and decide to build rust + llvm + ( some other cool language nobody uses )",,,,,,,
4/24/2025 6:38:08,System Administrator,University HPC/Computing Center,United States,"C, Python, Perl, sh/bash/other shell script","HPC / Simulation, User Support, System Administration",Search,8,"Packages, Issues, Spack Community Zoom Meetings","0.19, 0.22, 1.0.0-alpha* pre-releases",RHEL 8,"500-1,000",3.6,Environment Modules (TCL modules),"Environments, Stacks (matrices in environments), spack-python (Python scripting), `require:` directive in packages.yaml, concretization: --fresh (build everything fresh), concretizer:unify:when_possible, Multiple build systems in one package, spack diff (compare two specs)",Yes -- several,No,Other script to wrap spack,"AMD, Intel","NVIDIA Volta, NVIDIA Ampere, NVIDIA Hopper","gcc, Intel OneAPI, NVHPC, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA)",Very Important,Not Important,Slightly Important,Slightly Important,Slightly Important,Slightly Important,Not Important,Slightly Important,Not Important,Slightly Important,Slightly Important,Somewhat important,Slightly Important,Slightly Important,Slightly Important,Somewhat important,,Not sure,No,Yes,"Documentation, Mailing List, Source Code",Weekly,Probably not,Excellent,Good,OK,Good,Working on migrating/updating a complex environment from 0.22 to 1.0.alpha (in progress),"Almost exclusively use spack to maintain large library of software packages for users of our HPC cluster.  Every year or so update spack and versions of packages in the SW library and do a massive build out of packages for each toolchain and architecture we support using tightly constrained environments.  Between major upgrades are more minor tweaking of the libraries (adding a package to library, updating package version, etc).",,"Biggest pain point is the lack of stability in concretizations of an environment.  I.e., have an environment with 100s of packages all built out.  Make a small tweak to the configurations (i.e. bump a version on one small package) and specs change for 100+ packages.

We are looking at possibility of changing concretization flags and/or build caches to try to bring more stability to this.","Improving diagnostic messages, especially for failed concretizations.  There has been significant progress on this, but spack would still benefit from much more work on this front.   ",,,,,,,,,
4/24/2025 6:44:49,System Administrator,University HPC/Computing Center,United States,"Python, sh/bash/other shell script","HPC / Simulation, Statistics / Data Analysis, AI/ML, Computer Science, Bioinformatics, User Support, System Administration",Word of mouth,3,"Packages, Slack Discussions, Issues","0.21, 0.23",Rocky 8,200 - 500,3.6,"spack load, Spack environments","Chaining (upstreams), spack-python (Python scripting), Externals in packages.yaml, Concretization preferences in packages.yaml, `require:` directive in packages.yaml, concretization: --reuse (default), concretization: --fresh (build everything fresh), concretizer:unify:true (concretize together), concretizer:unify:when_possible, spack load, spack deconcretize",No,No,No,"AMD, Intel","NVIDIA Ampere, NVIDIA Other","gcc, Intel OneAPI, nvcc (CUDA)",Critical,Not Important,Not Important,Not Important,Not Important,Somewhat important,Not Important,Not Important,Not Important,Not Important,Not Important,Not Important,Not Important,Not Important,Somewhat important,Not Important,,Not sure,No,Yes,"Documentation, Slack",Monthly,Probably not,Good,Good,Good,Good,Installing packages,"We get a package request from a user, and *usually* we install it without issue. Occasionally, we don't notice a duplicate package being slipped in (maybe it's a libidn variant of curl, or a non-MPI variant of another package), and by the time we notice that users can't ""spack load curl"" like they used to, it's painful to back that out, or to replace the original package with the new one.",Being able to offer my users a broader array of software without having them self-install,,"Improved module hierarchy -- as far as I know, I can't quite use lmod the way I'd like to. For example, I'd like to be able to build packages against two different Python releases, and have a module hierarchy level based on the Python version.",,,,,,,,,
4/24/2025 6:48:57,User Support Staff,University HPC/Computing Center,United States,"Fortran, C++, Python","HPC / Simulation, Statistics / Data Analysis",Colleague,3,No,,Rocky 8,100 - 200,3.6,"spack load, Spack environments","Environments, spack load",No,Yes,No,"AMD, Intel, ARM","NVIDIA Hopper, NVIDIA Blackwell","gcc, Intel OneAPI, nvcc (CUDA)",Very Important,Critical,Not Important,Not Important,Somewhat important,Somewhat important,Very Important,Very Important,Not Important,Not Important,Not Important,Not Important,Not Important,Not Important,Not Important,Not Important,,Not sure,No,No,"Documentation, Slack, Coworkers, GitHub Issues",Yearly,Probably,OK,Good,OK,Good,lack of support for older packages often breaks the software stack which makes spack useless,create recipes to build a spack environment with existing mpi and gcc rather than using spack's mpi and gcc. Then publish the recipe such that users at my HPC center can create the environment themselves,helping users install their software stack,"for R packages, sometimes Spack will install more than one R, same R major and minor version, but different hash",,,"You do great work, thank you!!",,,,,,,
4/24/2025 7:00:16,User Support Staff,"DOE/Office of Science Lab (e.g., ORNL/ANL/LBL)",United States,"Fortran, C, C++, Python","Compiler Testing, User Support, System Administration, DevOps",Used at my site,1,No,"0.22, 0.23","RHEL 8, RHEL9, Rocky 8, Rocky 9, SLES15","> 1,000","3.6, 3.7, 3.9",Lmod,"Environments, Module generation, Chaining (upstreams), Stacks (matrices in environments), spack-python (Python scripting), Externals in packages.yaml, `require:` directive in packages.yaml, `prefer:` directive in packages.yaml, concretization: --reuse (default), concretizer:unify:when_possible, Variant/flag propagation (++, ~~, ==), spack diff (compare two specs)",Yes -- just one,Yes,NCCS Software Provisioning (NSP),"AMD, Intel, ARM","NVIDIA Hopper, AMD MI200/250X","gcc, Intel OneAPI, NVHPC, LLVM, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA), CCE (Cray Compilers)",Very Important,Somewhat important,Not Important,Not Important,Critical,Somewhat important,Very Important,Critical,Slightly Important,Slightly Important,Slightly Important,Very Important,Slightly Important,Slightly Important,Very Important,Critical,Use package tags in module files.,Yes,"Yes, I'm presenting!",No,"Documentation, Source Code",Weekly,Probably not,Good,Good,Good,Good,Installing software stacks for NCCS at ORNL is one of the core tasks in my group. We recently deployed the stack for CPE 25.03 for both CPU and GPU in Frontier/Borg ,"We use Ansible templates to create the environments. During development, we use the command line to activate, concretize, and install them. If we encounter any compilation issues, we first attempt to resolve them ourselves. If modifications to Spack packages are required, we maintain those changes as patches. When the changes are relevant to the Spack community, we submit pull requests; otherwise, if they are center-specific, we retain them in our local patch file. Once the stack is stable, we store the lock and YAML files in our Git repository.","It gets the work done. Installing a vast amount of software can be challenging, but Spack, helps to make it more manageable.",The error messages are not very helpful sometimes. ,Separate the builtin repo from the core. Please do that! Users want the latest version of everything and that means changing Spack versions sometimes.,N/A,"Keep the good work, I think HPSF is the thing I was missing the most and this time I get to participate! Thank you.",,,,,,,
4/24/2025 7:05:56,DevOps/SRE,Company,United States,"Python, Go, sh/bash/other shell script","HPC / Simulation, Computer Science, User Support, System Administration, DevOps",Birds-of-a-feather (BOF) at conference,2,"Slack Discussions, GitHub Discussions, Issues","0.21, custom fork","CentOS 7, Rocky 8, Rocky 9, Ubuntu 22, Debian 12","> 1,000","3.8, 3.10","Spack environments, Lmod, spack view, Containers, Custom script or env vars","Environments, Module generation, spack containerize, Chaining (upstreams), Stacks (matrices in environments), Mirrors (spack mirror create / air gap support), Build caches (making binary packages), build-env (debug a build), spack ci (GitLab pipeline generation -- yourself, not on our CI), spack-python (Python scripting), Concretization preferences in packages.yaml, `require:` directive in packages.yaml, `prefer:` directive in packages.yaml, spack develop, concretization: --reuse (default), concretization: --fresh (build everything fresh), concretizer:unify:true (concretize together), concretizer:unify:when_possible, spack load, spack diff (compare two specs), spack deconcretize",Yes -- several,Yes,Other script to wrap spack,"AMD, Intel","NVIDIA Volta, NVIDIA Ampere","gcc, nvcc (CUDA)",Slightly Important,Not Important,Not Important,Not Important,Slightly Important,Slightly Important,Not Important,Not Important,Not Important,Slightly Important,Slightly Important,Slightly Important,Not Important,Not Important,Slightly Important,Critical,,Yes,No,Yes,"Documentation, Slack, Coworkers, GitHub Issues, GitHub Discussions, Source Code",Weekly,Probably,Good,Excellent,Good,Excellent,We've added a PipxPackage class to our internal Spack fork to support the installation of certain Python-based command-line utilities into Spack envs. We found this far more flexible to the existing `py-*` packages for the same utilities.,"Ultimately, we use Spack to produce consistent containerized environments for bioinformatics pipelines. In the past two years, we have worked to move Spack ""closer"" to our computational biologists by using it to build development environments (exposed via Lmod modules), and custom project environments via our own scripts/tools that abstract Spack from the end-user to provide a ""happy path"" to developing locally with environments very similar to what ends up in our production pipelines.","The backporting of the v0.23.x package API to Spack v0.21 and v0.22. We end up backporting a lot of packages because we support older versions of Spack for very long periods of time (as they are used in production pipelines that cannot change for, potentially, years). Being able to simply copy packages from newer versions has been useful. Once Spack 1.0 is released, it would be FANTASTIC if some older versions of Spack could get a backport of the package API :) ","Because we are trying to keep Spack concertizing consistently, the 'loosening' of the way in which the concretizer can find and accept packages that aren't exact matches has been a struggle for us to accommodate as we use newer versions of Spack. We're leveraging buildcaches to speed up builds significantly, which is great, but we have to make all of our specs (in spack.yaml) more and more specific with each Spack release to prevent the concretizer from changing the graph as more and more packages enter our buildcaches. A higher level, opt-in ""be very strict by default"" type of setting would be beneficial for us.","Get Spack 1.0 out the door so that the ""builtin"" repo does not need to be. A stable package API will help all Spack users immensely in our opinion.","An R maintainer would be nice. R is a major PITA as it is, and because there's no dedicated maintainer of Spack R packages, we have all but given up on using any R packages provided by Spack aside from the base `r` package. I sympathize, though, as R sucks and I wouldn't want to maintain it either :)","Keep up the amazing work! The gutting of the federal government is a concern and we really, really hope that Spack development is not impacted!",,,,,,,
4/24/2025 8:14:37,Software Developer,"DOE/NNSA Lab (e.g., LLNL/LANL/SNL)",United States,C++,HPC / Simulation,Used at my site,2,No,"0.23, develop (1.0.0dev0), custom fork","RHEL 7, RHEL 8",10 - 100,3.1,"Spack environments, Environment Modules (TCL modules), spack build-env, spack view","Environments, Mirrors (spack mirror create / air gap support), Build caches (making binary packages), Externals in packages.yaml, spack develop, concretization: --fresh (build everything fresh), concretizer:unify:true (concretize together)",Yes -- several,Yes,No,"AMD, Intel","NVIDIA Volta, NVIDIA Hopper, NVIDIA Blackwell, AMD MI300A, AMD MI300X","gcc, Intel OneAPI, LLVM, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA)",Critical,Not Important,Not Important,Not Important,Very Important,Somewhat important,Not Important,Somewhat important,Not Important,Not Important,Not Important,Not Important,Not Important,Not Important,Somewhat important,Somewhat important,,Not sure,No,Yes,"Documentation, Coworkers, Source Code",Monthly,No,OK,Good,Good,Good,converted scientific software to use spack,,,,,,,,,,,,,
4/24/2025 8:29:50,Software Developer,"DOE/NNSA Lab (e.g., LLNL/LANL/SNL)",United States,C++,HPC / Simulation,Word of mouth,2,"No, maybe trivial updates to package.py files","0.21, 0.22",RHEL 8,10 - 100,3.6,"spack load, Spack environments","Environments, Module generation, build-env (debug a build), spack load",No,No,No,"AMD, Intel, IBM Power","NVIDIA Volta, NVIDIA Hopper, AMD MI300A, AMD MI300X","gcc, Intel OneAPI, LLVM, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA)",Somewhat important,Not Important,Somewhat important,Somewhat important,Slightly Important,Somewhat important,Very Important,Not Important,Not Important,Not Important,Not Important,Not Important,Not Important,Somewhat important,Very Important,Not Important,,No,No,No,"Documentation, Coworkers, GitHub Issues, ChatGPT / other LLMs",Weekly,Probably not,OK,Excellent,Good,Good,"I'm not an expert user. I've used spack to build trilinos and stk, both for CPU and GPU (nvidia) builds.","I try to make a spack environment, I need scripts and saved yaml files to specify the list of prerequisites for building trilinos. things like hdf5, netcdf, parmetis, etc.",It does make it easy to switch to new versions of prerequisite packages.,"Probably user error, it seems that even though I use a spack environment, it still messes with my .spack area, which leads to debugging...",I still find it challenging to find error output when a package build fails.,no,,,,,,,,
4/24/2025 9:40:44,System Administrator,"DOE/Office of Science Lab (e.g., ORNL/ANL/LBL)",United States,"Python, sh/bash/other shell script","HPC / Simulation, User Support, System Administration",Used at my site,2,"Packages, Slack Discussions, Issues, Spack Community Zoom Meetings",0.23,"RHEL9, SLES15","> 1,000",3.6,Lmod,"Environments, Module generation, spack containerize, Chaining (upstreams), Stacks (matrices in environments), Mirrors (spack mirror create / air gap support), Build caches (making binary packages), OCI build caches (pushing packages to container registries), build-env (debug a build), Externals in packages.yaml, Concretization preferences in packages.yaml, `require:` directive in packages.yaml, Distributed Builds (srun/mpirun spack install), concretization: --reuse (default), concretization: --fresh (build everything fresh), concretizer:unify:when_possible, Git versions",Yes -- several,Yes,No,"AMD, Intel","NVIDIA Ampere, NVIDIA Blackwell, Intel Xe (Ponte Vecchio), SambaNova, Cerebras","gcc, Intel OneAPI, NVHPC, nvcc (CUDA), CCE (Cray Compilers)",Slightly Important,Slightly Important,Not Important,Not Important,Somewhat important,Very Important,Slightly Important,Slightly Important,Not Important,Not Important,Not Important,Not Important,Not Important,Not Important,Critical,Somewhat important,,Not sure,"Yes, I'm presenting!",No,"Documentation, Slack, spack help, Source Code, Weekly Telecons",Daily,Probably,Excellent,Excellent,Good,Good,Built a software stack for one of our systems,"I build and deploy software stacks on several systems. I have developed scripts to automate much of the process, so most of the work is just updating the configs (specs, packages) and troubleshooting/testing builds.","Improvements to the concretizer were huge, as they allowed us to use features like upstreams.yaml and concretize larger stacks.","Concretization and build time for large stacks. We build stacks with hundreds of root specs in a containerized environment, so we can only build on one host as there is no shared filesystem for us to, say, ""mpirun spack install"" into. The improvements from concurrent builds feels limited (though we are still setting up benchmarking to quantify this).","The ability to split out a concretized environment into ""sub-concretizations"" to allow building on multiple hosts without a shared filesystem (or relying on fs locks).",,Thank you for your work! Spack has improved by leaps and bounds over the last couple years I've been using it and I'm excited to see what the future brings.,,,,,,,
4/24/2025 9:42:13,Software Developer,"DOE/NNSA Lab (e.g., LLNL/LANL/SNL)",United States,"C++, Python","HPC / Simulation, Computer Science",Used at my site,3,"Packages, Issues","1.0.0-alpha* pre-releases, develop (1.0.0dev0)","macOS 15 (Sequoia), RHEL 8","> 1,000","3.11, 3.12","Spack environments, spack view","Environments, build-env (debug a build), spack external find, Externals in packages.yaml, Concretization preferences in packages.yaml, `require:` directive in packages.yaml, spack develop, concretization: --fresh (build everything fresh), concretizer:unify:true (concretize together), Variant/flag propagation (++, ~~, ==), Git versions, spack load",Yes -- just one,No,No,"AMD, Intel, IBM Power, ARM","NVIDIA Volta, NVIDIA Hopper, AMD MI300A","gcc, Intel OneAPI, LLVM, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA), IBM XL, CCE (Cray Compilers), armclang",Critical,Not Important,Not Important,Slightly Important,Critical,Critical,Very Important,Critical,Slightly Important,Somewhat important,Not Important,Slightly Important,Not Important,Somewhat important,Critical,Somewhat important,In-source CMake builds for development projects.,Yes,Maybe,No,"Documentation, Coworkers, Source Code",Weekly,No,Good,Good,Good,Good,So many things.,"spack develop my core development projects, build with large-scale parallelism on a huge diversity of architectures and compiler toolchains (typical stuff for large DOE scientific codes)",Integrating multiple CMake packages pretty seamlessly.,"Inconsistently supported variants/build flags, especially in CMake build systems, that require me to customize packages to get a fully sane build.","More helpful error messages when debugging build and especially concretization failures, better automatic detection of packages, compilers, MPIs, and GPU libraries across the board.",,"Thanks so much! Spack is a really revolutionary tool for supporting scientific development workflows, and I hope it continues to gain support throughout the community. It fills a gap in the package manager space: high-performance, tunable software support.",,,,,,,
4/24/2025 10:45:35,Research Software Engineer (RSE),"DOE/NNSA Lab (e.g., LLNL/LANL/SNL)",United States,"C++, Python","HPC / Simulation, DevOps",Presentation,2,No,"0.20, 0.22","RHEL 8, Ubuntu 20, Ubuntu 22, Windows Subsystem for Linux (WSL)","> 1,000","3.6, 3.7, 3.8, 3.9, 3.10, 3.11, 3.12, 3.13",Environment Modules (TCL modules),"Environments, Module generation, Chaining (upstreams), Mirrors (spack mirror create / air gap support), Build caches (making binary packages), build-env (debug a build), spack external find, Externals in packages.yaml, Concretization preferences in packages.yaml, `require:` directive in packages.yaml, `prefer:` directive in packages.yaml, spack develop, concretization: --fresh (build everything fresh), concretizer:unify:true (concretize together), Git versions, spack load",Yes -- several,Yes,No,"AMD, Intel, IBM Power, ARM","NVIDIA Volta, NVIDIA Hopper, NVIDIA Blackwell, AMD MI200/250X, AMD MI300A","gcc, Intel OneAPI, LLVM, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA), CCE (Cray Compilers)",Very Important,Not Important,Not Important,Not Important,Somewhat important,Very Important,Very Important,Somewhat important,Not Important,Very Important,Very Important,Not Important,Not Important,Not Important,Slightly Important,Very Important,,No,No,No,"Documentation, Slack, Coworkers, GitHub Issues, spack help, Source Code, ChatGPT / other LLMs",Monthly,No,Good,Excellent,Excellent,Excellent,Built and installed the scientific simulation software I develop using a spack environment.,"I develop performance-portable computational fluid dynamics software. I use spack to manage the environments the code uses on different platforms and I use it to build, test, and install the software. The usage of the software itself is independent of spack thanks to spack's module generation.",Adding dependencies is much easier than previous approaches. Also it is easier (but not easy) to move to new platforms and provide the rest of the developers a common look and feel once the initial environment setup is complete.,The time to concretize or use build-env are very slow in our project and cause our developers to switch tasks. The reporting to cdash is not great and requires some customization.,Give more fine grained control on what can be reused such that the speed can be improved.,Engineering Sketchpad,You're doing great and have improved my life as a software developer!,,,,,,,
4/24/2025 10:51:11,Research Software Engineer (RSE),"DOE/NNSA Lab (e.g., LLNL/LANL/SNL)",United States,"C++, Python",HPC / Simulation,Used at my site,1,No,develop (1.0.0dev0),RHEL 8,10 - 100,3.12,"spack load, Containers","Environments, Mirrors (spack mirror create / air gap support), Build caches (making binary packages), build-env (debug a build), Externals in packages.yaml, `require:` directive in packages.yaml, `prefer:` directive in packages.yaml, spack develop, concretization: --fresh (build everything fresh), concretizer:unify:true (concretize together), Multiple build systems in one package, Variant/flag propagation (++, ~~, ==), spack test, spack load",Yes -- several,Yes,No,"AMD, Intel","NVIDIA Volta, NVIDIA Hopper, NVIDIA Blackwell, AMD MI200/250X, AMD MI300A, AMD MI300X","gcc, Intel OneAPI, LLVM, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA)",Slightly Important,Not Important,Somewhat important,Somewhat important,Critical,Critical,Slightly Important,Very Important,Not Important,Not Important,Slightly Important,Somewhat important,Not Important,Not Important,Critical,Somewhat important,Support for a read-only spack repo,Not sure,No,Yes,"Documentation, Coworkers",Weekly,Probably not,Bad,OK,OK,OK,Attempted to add a variant to our build to activate address sanitizer,"We have a large monorepo with multiple spack packages and are in the process of transitioning our development over to using spack as its primary build system. Usual workflow is to add all our packages as develop specs when doing development, but add and build just the packages we want to work with at the moment.",Knowledgeable co-workers,"The documentation is both too much and not enough.

For example, if I am working on a package.py and I want to know what I can do with the ""variant"" call, I might go read https://spack.readthedocs.io/en/latest/packaging_guide.html#id6, but that is a narrow set of examples that doesn't fully capture all the things you can do. Linking that to a true API guide showing all the possible arguments one can use with descriptions would make it a lot more usable. I end up just doing `print(dir(something))` to try to find the api of things in the code directly.","Documentation, concretization speed, better control of compiler flags (separate link vs compile flags per toolchain - c++, fortran, etc)","Not currently, but understanding the ownership expectations for packages would be helpful. I have written packages for open source software that I don't ""own"" (but have contributed to). It's unclear to me who would own that if I were to add it in spack.",,,,,,,,
4/24/2025 10:55:01,Computational Scientist,"DOE/NNSA Lab (e.g., LLNL/LANL/SNL)",United States,"C++, Python","HPC / Simulation, Statistics / Data Analysis, AI/ML, Computer Science",Linux Foundation / HPSF,5,"Packages, Slack Discussions, GitHub Discussions, Issues","0.23, 1.0.0-alpha* pre-releases, develop (1.0.0dev0)","macOS 15 (Sequoia), RHEL9, Ubuntu 22, Ubuntu 24, Fedora, Cray EX, Cray XD",10 - 100,"3.9, 3.10, 3.11, 3.12, 3.13","spack load, Lmod, Environment Modules (TCL modules), Containers","Module generation, Concretization preferences in packages.yaml, concretization: --reuse (default), concretization: --fresh (build everything fresh), Variant/flag propagation (++, ~~, ==), Git versions, spack load, spackbot (@spackbot fix style; @spackbot rebuild everything, etc.)",Yes -- several,No,spack manager (https://sandialabs.github.io/spack-manager/),"AMD, Intel, ARM, RISC-V","NVIDIA Volta, NVIDIA Ampere, NVIDIA Hopper, NVIDIA Blackwell, AMD MI200/250X, AMD MI300A, AMD MI300X, Intel Xe (Ponte Vecchio), Cerebras, NextSilicon","gcc, Intel OneAPI, NVHPC, LLVM, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA), CCE (Cray Compilers), armclang",Very Important,Not Important,Somewhat important,Very Important,Very Important,Somewhat important,Very Important,Critical,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Very Important,Very Important,Somewhat important,Slightly Important,,Yes,Maybe,No,"Documentation, Slack, Coworkers, GitHub Issues, Source Code",Monthly,Probably,Good,Good,OK,Good,Update packages,I update packages for my libraries and do test installation on HPC platforms for customers.,It helps a lot with installing software in containers for our CI,"It is not easy to follow what a modern spack package should look like. More examples of what a ""well-written"" package should look like would be helpful.",,No,,,,,,,,
4/24/2025 10:56:47,Computational Scientist,"DOE/NNSA Lab (e.g., LLNL/LANL/SNL)",United States,"Fortran, C, C++, Python, Julia, sh/bash/other shell script","HPC / Simulation, Computer Science",Used at my site,1,No,"0.23, develop (1.0.0dev0)","macOS 15 (Sequoia), RHEL 8",10 - 100,3.13,"spack load, spack build-env, Custom script or env vars","Environments, Mirrors (spack mirror create / air gap support), Build caches (making binary packages), build-env (debug a build), Externals in packages.yaml, `require:` directive in packages.yaml, `prefer:` directive in packages.yaml, spack develop, concretization: --fresh (build everything fresh), concretizer:unify:true (concretize together), Variant/flag propagation (++, ~~, ==), Git versions, spack load",Yes -- several,No,Other script to wrap spack,"AMD, Intel, ARM","NVIDIA Volta, NVIDIA Hopper, NVIDIA Other, AMD MI300A, AMD MI300X, NextSilicon","gcc, Intel OneAPI, LLVM, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA), CCE (Cray Compilers), armclang",Very Important,Slightly Important,Somewhat important,Somewhat important,Very Important,Critical,Very Important,Critical,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Critical,Critical,Very Important,GitLab support in addition to GitHub; Developer tools to inspect fully concretized spec,Yes,Maybe,No,"Documentation, Slack, Coworkers, GitHub Issues, GitHub Discussions",Weekly,Probably,Good,Good,Good,Good,Setting up a build environment on a ROCm AMD system to inspect/compare build flags between the compile commands spack produced to compile commands from our traditional build system. This was necessary to identify a seg-fault coming from a Cray Fortran compiler.,"Spack is being used at my organization as a way of ""replacing"" modules to set up our builds. Our workflow consists of setting up independent environments managed by a git project which defines the configuration necessary to build our applications. The usual workflow is activating an environment, adding the abstract specs of our apps (which we have defined packages for), concretizing, and installing.","Dependency management is a breeze with Spack. Years ago in grad school, I recall it took me days to figure out how to install Trilinos. Now it's as simple as spack add trilinos; spack concretize; spack install.","Build times are significantly longer. We have a large project consisting of many apps and our bjam based build system produced a monolithic Makefile which exposed a lot of build parallelism. The DAG build tree spack produces doesn't parallelize in the same manner which has led to increased build times from a cold project.

Smaller item: it's not clear when an environment needs to be reactivated for say a view. ","Build times are the leading complaint at my organization.

Minor suggestion: A command like `spack apropos` would be cool",,,,,,,,,
4/24/2025 13:07:40,Research Software Engineer (RSE),"DOE/Office of Science Lab (e.g., ORNL/ANL/LBL)",United States,"Fortran, C, Python, sh/bash/other shell script","HPC / Simulation, Compiler Testing",Presentation,7,"Packages, Slack Discussions, GitHub Discussions, Issues",develop (1.0.0dev0),"macOS 15 (Sequoia), Ubuntu 22, Fedora, Cray EX",10 - 100,"3.9, 3.10, 3.11, 3.12, 3.13","Lmod, Environment Modules (TCL modules), Custom script or env vars","Module generation, Externals in packages.yaml, spack test",No,No,No,"AMD, Intel, ARM, RISC-V","NVIDIA Ampere, NVIDIA Hopper, NVIDIA Blackwell, AMD MI200/250X, AMD MI300A, AMD MI300X, Intel Gaudi","gcc, Intel OneAPI, LLVM, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA)",Slightly Important,Somewhat important,Somewhat important,Somewhat important,Slightly Important,Slightly Important,Somewhat important,Slightly Important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,,Yes,"Yes, I'm attending",Yes,"Documentation, Slack, GitHub Issues, Source Code",Yearly,Probably not,OK,Good,Good,Good,"fix a build issue, submitted PR",,,"complexity, takes effort to understand build failures",,,,,,,,,,
4/24/2025 13:38:31,Data Scientist,University HPC/Computing Center,United States,"C, C++, Python, Rust, sh/bash/other shell script","HPC / Simulation, Statistics / Data Analysis, AI/ML, Computer Science, User Support",Word of mouth,7,"Packages, Slack Discussions, Issues","0.19, 0.22, 0.23, 1.0.0-alpha* pre-releases","CentOS 7, Rocky 8, Rocky 9, Ubuntu 22, Ubuntu 24","500-1,000","3.9, 3.10, 3.11, 3.12","Lmod, Containers","Environments, Module generation, spack containerize, Build caches (making binary packages), `prefer:` directive in packages.yaml, spack develop, spack load",Yes -- several,No,In production we have wrappers to help manage deployments,"AMD, Intel, ARM","NVIDIA Volta, NVIDIA Ampere, NVIDIA Hopper, NVIDIA Blackwell, AMD MI200/250X, AMD MI300A","gcc, Intel OneAPI, LLVM, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA)",Very Important,Not Important,Very Important,Very Important,Somewhat important,Critical,Very Important,Very Important,Somewhat important,Very Important,Somewhat important,Somewhat important,Very Important,Somewhat important,Critical,Critical,,Yes,Maybe,Yes,"Documentation, Coworkers, GitHub Issues, GitHub Discussions, Source Code",Monthly,Probably,OK,Good,Good,Good,Built PostgreSQL as a personal module.,We are managing the core software stack on all our HPC clusters using Spack. I also help users setup their own private spack instance for their research group to build their own apps.,Getting things to build correctly when honestly I have better things to do than compile software manually.,In production it becomes hard to move because spack choosing a conflicting dependency version. With such a large core stack it becomes difficult to install new things over time. ,"The community needs to continue the important work of refining and expanding the package formula list, and spack needs to separate formula from the core repository. It needs to be easier to customize/extend a formula without forever separating it from upstream.",,I'd love to know the best way to craft a formula for python-based command-line tools.,,,,,,,
4/24/2025 16:16:04,Research Software Engineer (RSE),"DOE/NNSA Lab (e.g., LLNL/LANL/SNL)",United States,"C++, Python, sh/bash/other shell script",HPC / Simulation,Presentation,3,"Slack Discussions, GitHub Discussions, Issues, Worked with Phil S on sparse git clone","0.21, 0.22, 0.23, develop (1.0.0dev0)","macOS 15 (Sequoia), RHEL 8","> 1,000","3.8, 3.9, 3.10, 3.11, 3.12","spack load, Environment Modules (TCL modules), Containers","Environments, Build caches (making binary packages), build-env (debug a build), spack external find, Cray PE support (spack external read-cray-manifest), spack develop, concretization: --reuse (default), concretization: --fresh (build everything fresh), concretizer:unify:true (concretize together), Git versions, spack load, spack diff (compare two specs)",Yes -- several,My site has a front-end or extension to Spack,No,"AMD, Intel, ARM, RISC-V","NVIDIA Volta, NVIDIA Ampere, NVIDIA Hopper, NVIDIA Blackwell, AMD MI200/250X, AMD MI300A, AMD MI300X, Cerebras, NextSilicon","gcc, Intel OneAPI, NVHPC, LLVM, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA), CCE (Cray Compilers), armclang",Slightly Important,Very Important,Somewhat important,Somewhat important,Very Important,Critical,Very Important,Very Important,Somewhat important,Critical,Slightly Important,Somewhat important,Somewhat important,Very Important,Very Important,Critical,,No,No,Yes,"Documentation, Slack, Coworkers, GitHub Issues, GitHub Discussions, spack help, ChatGPT / other LLMs",Weekly,Probably not,Excellent,Excellent,OK,Good,Writing a package that injects build system options/flags to packages that depend on it. This was harder than I expected,Env->develop->install && build-env bash && ninja && hack && ninja && push,"Caching, docs",Workflows are the hardest part about spack.,"Performance of concretize, build parallelism, potentially speculative configure? Not sure how that could/would work, but could open paths for greater parallelism if possible. ","If it isn’t there, I just add it!",,,,,,,,
4/24/2025 16:22:51,User Support Staff,DoD,United States,"Fortran, C, C++, Python, Go, MATLAB","HPC / Simulation, AI/ML, User Support",Word of mouth,4,No,0.23,RHEL 8,"500-1,000",3.12,"Spack environments, Lmod, Environment Modules (TCL modules), Containers","Environments, Module generation, Mirrors (spack mirror create / air gap support), Build caches (making binary packages), spack external find, Cray PE support (spack external read-cray-manifest), Externals in packages.yaml, Concretization preferences in packages.yaml, `require:` directive in packages.yaml, `prefer:` directive in packages.yaml, concretization: --reuse (default), concretization: --fresh (build everything fresh)",Yes -- just one,No,No,"AMD, Intel","NVIDIA Hopper, NVIDIA Blackwell, AMD MI200/250X, AMD MI300A","gcc, Classic Intel Compilers, Intel OneAPI, NVHPC, LLVM, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA), CCE (Cray Compilers)",Somewhat important,Slightly Important,Very Important,Somewhat important,Very Important,Very Important,Critical,Critical,Very Important,Critical,Critical,Very Important,Critical,Critical,Critical,Critical,,Yes,Maybe,Yes,"Documentation, Slack, Source Code, ChatGPT / other LLMs",Monthly,Probably not,Good,Excellent,Good,Excellent,I built openmpi with cray pals support through prrte ,"Usually create an environment, and start the build process for users. I end with making a module file",Everything ,,More examples of use cases,Nope,Nope,,,,,,,
4/25/2025 2:04:21,Research Software Engineer (RSE),University HPC/Computing Center,United Kingdom,"Fortran, C++, Python","HPC / Simulation, Climate Science",Used at my site,3,"Packages, Slack Discussions","0.21, 0.23, develop (1.0.0dev0)","RHEL9, Rocky 9, Ubuntu 22, Ubuntu 24",200 - 500,"3.10, 3.13",Spack environments,"Environments, spack containerize, Build caches (making binary packages), spack external find, Externals in packages.yaml, concretization: --fresh (build everything fresh), concretizer:unify:when_possible, spack load",No,No,No,"AMD, Intel","NVIDIA Ampere, AMD MI200/250X, Intel Xe (Ponte Vecchio)","gcc, Classic Intel Compilers, Intel OneAPI, NVHPC, LLVM, nvcc (CUDA)",Very Important,Somewhat important,Very Important,Very Important,Somewhat important,Slightly Important,Slightly Important,Very Important,Slightly Important,Somewhat important,Slightly Important,Slightly Important,Slightly Important,Slightly Important,Very Important,Slightly Important,,Yes,No,No,"Documentation, Slack, Coworkers, GitHub Issues, GitHub Discussions, spack help, Source Code",Weekly,Probably not,Excellent,Excellent,Good,Excellent,I use environments everyday to develop applications locally on my laptop. So I load an pre-installed environment and then start developing for the day. I have one environment for each research project I work on (typically 2 at a time).,"When I start a new software project, I create a spack env yaml file with the dependencies. I use spack depfile (Makefile) to run a parallel install (make -j 12). Then I load the spack env and use it to develop/test/run my project. I used to use spack external find, but now I mostly install from scratch because I used to have issues with version incompatibilities.","I tell everyone about spack. Most people think it's just for HPC but I honestly couldn't (wouldn't want to) do my job without it. I am an RSE and I constantly move to new projects with different dependencies e.g., netcdf-fortran, mpi etc. Installing these from scratch and managing different versions on my laptop would be a nightmare. Instead I can have an environment for each project and seamlessly switch between projects. I typically have 2 projects on the go at a time and I do 2.5 days on each (per week). I can then share spack.yaml files with my colleagues to ensure we use the same dependencies. They work on mac and I am on linux (ubuntu 22/24) and it still works !!!","sometimes it is unclear how spack picks up certain settings (even with spack blame). It feels like sometimes, even though I havent changed anything (to my knowledge) it will sometimes reuse packages and other times not, whether I choose it or not. Another issue, is if packages are deprecated then the warning message is a bit confusing. Instead of saying this package is deprecated, you instead get a concretization error for example.",better error messages would be great.,It is rare that there's a package I need which is not in spack. I work on climate software and netcdf-c/cxx/fortran etc and mpi are all there. Honestly been a while since I made my own package.,"Keep up the great work. I have been using spack for 3 years now and I still can't stop talking about it to everyone I meet. It has made my life so much easier and it's a joy to develop with it. I no longer dread moving to new projects and the dependency hell I used to experience. I also frequently switch HPC systems depending on the ones my collaborators have access to. So I can now get setup in most cases in a couple of hours on a new system, ready to develop and run. Thanks again for all your hard work :) !!!!!",,,,,,,
4/25/2025 6:01:50,Software Developer,"DOE/NNSA Lab (e.g., LLNL/LANL/SNL)",United States,"C++, Python, sh/bash/other shell script","HPC / Simulation, Computer Science, DevOps",Used at my site,1,No,"0.20, custom fork",RHEL 8,100 - 200,3.6,spack build-env,"Environments, Module generation, spack containerize, Build caches (making binary packages), build-env (debug a build), spack develop, concretization: --fresh (build everything fresh), Variant/flag propagation (++, ~~, ==)",Yes -- just one,Yes,No,"AMD, Intel","NVIDIA Hopper, AMD MI200/250X, AMD MI300A","gcc, Intel OneAPI, LLVM, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA)",Very Important,Not Important,Not Important,Not Important,Somewhat important,Very Important,Slightly Important,Very Important,Somewhat important,Somewhat important,Somewhat important,Slightly Important,Not Important,Somewhat important,Somewhat important,Slightly Important,,Not sure,No,No,"Coworkers, Source Code",Never,Probably,OK,Good,Good,Good,Installing our source code,,,,,,,,,,,,,
4/25/2025 10:30:17,Scientist/Researcher,"DOE/Office of Science Lab (e.g., ORNL/ANL/LBL)",United States,C++,"HPC / Simulation, Quantum",ECP,8,"Packages, Slack Discussions, Issues",develop (1.0.0dev0),"macOS 15 (Sequoia), RHEL9, Rocky 9, Ubuntu 22, Ubuntu 24, SLES15, Windows Subsystem for Linux (WSL)","> 1,000",3.13,"Spack environments, Custom script or env vars","Environments, Mirrors (spack mirror create / air gap support), Build caches (making binary packages), Concretization preferences in packages.yaml, concretizer:unify:true (concretize together), Multiple build systems in one package, spack load",No,No,No,"AMD, Intel, ARM, RISC-V","NVIDIA Volta, NVIDIA Ampere, NVIDIA Hopper, NVIDIA Blackwell, AMD MI200/250X, AMD MI300A, AMD MI300X, Intel Xe (Ponte Vecchio), AMD W7900 (RDNA3)","gcc, Intel OneAPI, LLVM, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA)",Somewhat important,Not Important,Not Important,Not Important,Somewhat important,Critical,Slightly Important,Very Important,Not Important,Slightly Important,Slightly Important,Very Important,Slightly Important,Slightly Important,Critical,Slightly Important,"Automated updates of core packages when they make releases (gcc, llvm, hdf5, openblas, boost, openmpi...)",No,No,No,"Documentation, Slack, GitHub Issues",Monthly,Probably,Good,Excellent,Good,Excellent,PR on spack GitHub for support of gcc 15.1.0 ,"Supporting the large number of compiler and library versions we test QMCPACK with. e.g. One combination with the newest version of llvm and openmpi, another with two year old versions etc.","Supporting the large number of compiler and library versions we test QMCPACK with (completely impractical without spack, or at least a large fraction of an FTE)","SLOW installations due to limited parallelization. (Add some ""profiling"" support to provide visibility on the slowest steps, e.g. package abc only uses 1 core during install?)",Improve ingestion of package recipes from pypi.,The full PySCF ecosystem e.g. pyscf-dispersion.,Keep doing what you are doing.,,,,,,,
4/25/2025 11:58:45,User Support Staff,"DOE/Office of Science Lab (e.g., ORNL/ANL/LBL)",United States,"Fortran, C, C++, Python, sh/bash/other shell script","HPC / Simulation, Compiler Testing, User Support, System Administration",Used at my site,3,"Packages, Slack Discussions, Issues","0.21, 0.22, 0.23","RHEL 8, RHEL9, Rocky 8, Rocky 9, SLES15, Cray EX","> 1,000","3.6, 3.7, 3.8, 3.9, 3.10","Spack environments, Lmod","Environments, Module generation, Stacks (matrices in environments), Externals in packages.yaml, `require:` directive in packages.yaml, `prefer:` directive in packages.yaml, spack diff (compare two specs)",No,Yes,No,"AMD, Intel, ARM","NVIDIA Volta, NVIDIA Ampere, NVIDIA Hopper, NVIDIA Blackwell, AMD MI200/250X","gcc, Intel OneAPI, NVHPC, LLVM, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA), CCE (Cray Compilers)",Very Important,Not Important,Not Important,Not Important,Somewhat important,Slightly Important,Very Important,Slightly Important,Not Important,Slightly Important,Slightly Important,Slightly Important,Not Important,Somewhat important,Slightly Important,Very Important,"Specifying compilers for individual packages without affecting other unspecified packages. For example, requiring `cmake %gcc` currently causes several other packages (not dependencies of cmake) to switch their compiler to gcc because it is no longer a single-compiler solution.",Not sure,No,No,"Documentation, Slack, Coworkers, GitHub Issues, Source Code",Weekly,Probably not,Good,OK,Bad,OK,Locally patched an outdated/unmaintained Spack package to build it on a local cluster.,"Deploying center-provided software environments for users. Using relatively small environments (1-2 compiler versions for each compiler) in independent locations, to support adding new environments later without making just one huge environment. Deploying modules via Lmod.","Reproducibility. We had an NFS critical server failure with no recent backup, but I had backed the spack.yaml file up to GitHub, and was able to restore the complete software environment within 24 hours.","Outdated, unmaintained, poorly written packages. AMD's hip package sets a bunch of duplicate environment variables in each parent module. AMD's hipfort build did not originally support any compiler except for Cray Fortran. Many packages (one example: stringtie) completely ignore Spack's compiler definitions, and instead hard-code gcc.",Separating packages and core is a very good idea.,,,,,,,,,
4/25/2025 12:00:08,Scientist/Researcher,"DOE/Office of Science Lab (e.g., ORNL/ANL/LBL)",United States,"C, C++, sh/bash/other shell script","HPC / Simulation, Compiler Testing, User Support",Used at my site,2,No,0.23,"SLES15, Cray EX",200 - 500,3.13,"Lmod, spack build-env","Environments, Module generation, build-env (debug a build), Externals in packages.yaml, concretization: --fresh (build everything fresh)",No,My site has a front-end or extension to Spack,No,AMD,AMD MI200/250X,"gcc, AMD ROCmCC (amdclang/hipcc), CCE (Cray Compilers)",Critical,Not Important,Somewhat important,Very Important,Critical,Very Important,Very Important,Somewhat important,Not Important,Not Important,Not Important,Slightly Important,Slightly Important,Slightly Important,Very Important,Not Important,Better diagnostic output for when concretization fails,Not sure,No,Yes,"Documentation, Coworkers, GitHub Issues, GitHub Discussions",Monthly,No,Excellent,Good,Good,Good,Installing packages,Using Spack to deploy programming environment for our userbase with pre-selected software installed,Documentation,Failures to concretize,"Separate packages and core. It's difficult to update core versions frequently when we need only, say, a new version of a package.",N/A,N/A,,,,,,,
4/25/2025 13:52:37,Scientist/Researcher,"DOE/Office of Science Lab (e.g., ORNL/ANL/LBL)",United States,"C, C++",HPC / Simulation,Technical Paper,3,"Packages, Issues",0.23,SLES15,"> 1,000","3.10, 3.11","spack load, Spack environments, Lmod, Environment Modules (TCL modules), spack build-env, spack view","Environments, Module generation, Concretization preferences in packages.yaml, `require:` directive in packages.yaml, `prefer:` directive in packages.yaml, concretization: --fresh (build everything fresh), concretizer:unify:true (concretize together), concretizer:unify:when_possible, spack load",Yes -- just one,Yes,No,Intel,Intel Xe (Ponte Vecchio),"gcc, Intel OneAPI, LLVM",Critical,Slightly Important,Not Important,Not Important,Very Important,Critical,Critical,Somewhat important,Not Important,Slightly Important,Not Important,Slightly Important,Not Important,Not Important,Critical,Very Important,Ability to improve the installation process of packages in parallel,Yes,Maybe,No,"Documentation, Slack, GitHub Issues, Source Code",Weekly,Probably,Good,OK,Good,Good,Customizing MPICH installation,Building a programming environment based on a compiler version,Faster concretization,https://github.com/spack/spack/pull/47590,Speedup/Parallelization capabilities for large builds,,,,,,,,,
4/25/2025 14:35:36,Software Developer,"DOE/NNSA Lab (e.g., LLNL/LANL/SNL)",United States,C++,HPC / Simulation,Forced to switch to it,0,No,"unknown, whatever SIERRA is using",RHEL 8,1 - 10,3.8,"spack build-env, Custom script or env vars, tool provided by Sierra/DevOps","Environments, build-env (debug a build)",No,No,No,"AMD, Intel","NVIDIA Volta, NVIDIA Hopper, NVIDIA Blackwell","gcc, Classic Intel Compilers, Intel OneAPI, LLVM, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA)",Somewhat important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Critical,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Critical,Somewhat important,,Not sure,No,Yes,local Sierra/DevOps team at SNL,Never,Probably not,OK,OK,OK,OK,"built my software product, Sierra/adagio",I do whatever the dev ops people tell me and I know very little about the details,,far too much information for my use case (information overload),make shorter tutorials (akin to youtube shorts),,,,,,,,,
4/25/2025 15:03:00,Computational Scientist,"DOE/NNSA Lab (e.g., LLNL/LANL/SNL)",United States,"C++, Python","HPC / Simulation, Statistics / Data Analysis, AI/ML, Computer Science",Word of mouth,3,No,"0.20, 0.23",RHEL 8,100 - 200,"3.11, 3.12",,,Yes -- several,,,"AMD, Intel, IBM Power","NVIDIA Volta, NVIDIA Ampere, NVIDIA Hopper, AMD MI200/250X, AMD MI300A, AMD MI300X, Intel Xe (Ponte Vecchio)","gcc, Intel OneAPI, LLVM, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA), CCE (Cray Compilers)",Somewhat important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,,,No,No,"Documentation, Coworkers",Yearly,Probably not,OK,OK,OK,OK,installing a package,,,,,,,,,,,,,
4/26/2025 4:47:02,Computational Scientist,University research group,Czech Republic,"Fortran, C, Python, sh/bash/other shell script, Dlang",HPC / Simulation,Search,8,"Packages, GitHub Discussions, Issues",0.23,"Ubuntu 20, Ubuntu 24",10 - 100,3.9,"Lmod, Environment Modules (TCL modules)","Module generation, `require:` directive in packages.yaml, concretization: --reuse (default), concretizer:unify:true (concretize together), concretizer:unify:when_possible, spack diff (compare two specs)",Yes -- just one,No,No,"AMD, Intel","NVIDIA Volta, AMD MI100, AMD MI200/250X","gcc, Intel OneAPI, NVHPC, LLVM, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA)",Very Important,Not Important,Slightly Important,Slightly Important,Somewhat important,Very Important,Somewhat important,Somewhat important,Slightly Important,Slightly Important,Slightly Important,Slightly Important,Slightly Important,Somewhat important,Somewhat important,Very Important,,Yes,No,No,"Documentation, Slack, GitHub Issues, GitHub Discussions",Monthly,Probably not,Good,Good,OK,OK,install,compile set of HPC libs and apps,great number of packages,reuse of specs,speed,no,no,,,,,,,
4/27/2025 21:10:16,Software Developer,"DOE/NNSA Lab (e.g., LLNL/LANL/SNL)",United States,"Python, R",Computer Science,Word of mouth,0,Core Features,"0.23, develop (1.0.0dev0)",macOS 15 (Sequoia),"> 1,000",3.13,"spack load, Spack environments","Environments, spack develop",Yes -- just one,No,No,"AMD, Intel",No GPUs,"gcc, LLVM",Very Important,Not Important,Not Important,Not Important,Not Important,Critical,Slightly Important,Slightly Important,Very Important,Very Important,Very Important,Very Important,Somewhat important,Somewhat important,Critical,Somewhat important,,Yes,"Yes, I'm presenting!",No,"Documentation, Slack, Coworkers, ChatGPT / other LLMs",Weekly,No,OK,Excellent,Good,Good,created a personal environment,,,,,,,,,,,,,
4/28/2025 4:13:59,System Administrator,Other Public Research Lab,United Kingdom,"Fortran, C, C++, Python, Rust","HPC / Simulation, System Administration",Word of mouth,8,"Packages, Slack Discussions, Issues",0.23,"SLES15, Cray EX, Cray XD",100 - 200,3.6,Spack environments,"Environments, spack external find, Externals in packages.yaml, Concretization preferences in packages.yaml, `require:` directive in packages.yaml, `prefer:` directive in packages.yaml, concretization: --fresh (build everything fresh), concretizer:unify:true (concretize together)",Yes -- just one,No,No,"AMD, Intel, ARM","NVIDIA Hopper, AMD MI100","gcc, NVHPC, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA), CCE (Cray Compilers), armclang",Very Important,Slightly Important,Not Important,Slightly Important,Critical,Somewhat important,Slightly Important,Very Important,Somewhat important,Somewhat important,Slightly Important,Somewhat important,Not Important,Not Important,Slightly Important,Critical,Explanation of why packages were selected.,Yes,No,No,"Documentation, Slack, GitHub Issues, Source Code",Weekly,Probably,OK,Good,Good,Good,Modify chapel package to support particular system setup.,Provide a tool for users to build software themselves and have a known working configuration to be made available.,Build software across many difference configurations.,Understanding why a particular spec has been decided on.,More tests across different compiler configurations.,None,Keep up the good work.  The 1.0 release is exciting to see develop and especially the treatment of compilers.,,,,,,,
4/28/2025 4:55:27,User Support Staff,"DOE/Office of Science Lab (e.g., ORNL/ANL/LBL)",United States,"C, Python, Rust, sh/bash/other shell script, Lua",User Support,Used at my site,1,"Packages, Core Features, Slack Discussions","0.22, 0.23, develop (1.0.0dev0)","RHEL9, Rocky 9, Ubuntu 24, SLES15","> 1,000","3.10, 3.11, 3.12, 3.13",Lmod,"Environments, Module generation, Stacks (matrices in environments), Externals in packages.yaml, Concretization preferences in packages.yaml, `require:` directive in packages.yaml, `prefer:` directive in packages.yaml, Distributed Builds (srun/mpirun spack install), concretization: --fresh (build everything fresh)",No,My site has a front-end or extension to Spack,No,"AMD, ARM","NVIDIA Hopper, AMD MI200/250X","gcc, Intel OneAPI, NVHPC, LLVM, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA), CCE (Cray Compilers)",Very Important,Not Important,Not Important,Not Important,Slightly Important,Somewhat important,Slightly Important,Very Important,Not Important,Slightly Important,Not Important,Very Important,Slightly Important,Not Important,Not Important,Critical,Improve the flexibility of the Lmod module hierarchy.,Not sure,No,No,"Documentation, Slack, Coworkers, GitHub Issues, GitHub Discussions, Source Code",Weekly,Probably not,OK,OK,Bad,Good,Building openmpi.,We maintain multiple Spack environments for each machine to accommodate different versions of the programming environment and expose our Spack built software through Lmod modules.,Environments.,"Modules. The way the are generated is not very flexible. The hierarchy is limited to only ""virtual"" specs and it is hard by default to integrate modules generated by Spack into an existing programming environment given the hashes that are injected into the module tree.",Modules and spiting out packages from core.,,I have talked to some people from the Spack team about the modules issue and I have been thinking about putting together a pull request but I have been waiting to see how v1.0.0 with the compilers as packages changes things.,,,,,,,
4/28/2025 8:00:02,Scientist/Researcher,"DOE/Office of Science Lab (e.g., ORNL/ANL/LBL)",United States,"C++, Python",HPC / Simulation,Word of mouth,3,"Packages, GitHub Discussions",develop (1.0.0dev0),"macOS 14 (Sonoma), RHEL 8, Ubuntu 20, Ubuntu 22, Ubuntu 24",10 - 100,"3.9, 3.10, 3.11, 3.12, 3.13","spack load, Containers","Module generation, spack containerize, spack load, spackbot (@spackbot fix style; @spackbot rebuild everything, etc.)",No,No,No,"AMD, Intel, ARM","NVIDIA Volta, NVIDIA Ampere, NVIDIA Hopper, NVIDIA Blackwell, AMD MI200/250X, AMD MI300A, Intel Xe (Ponte Vecchio)","gcc, Intel OneAPI, LLVM, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA), CCE (Cray Compilers)",Somewhat important,Not Important,Slightly Important,Slightly Important,Somewhat important,Somewhat important,Critical,Critical,Somewhat important,Somewhat important,Somewhat important,Slightly Important,Slightly Important,Slightly Important,Slightly Important,Slightly Important,Portability layer support to simplify downstream packages (we currently rewrite quite a bit of Kokkos spack package details in every subsequent package),Not sure,"Yes, I'm attending",Yes,"Documentation, Coworkers, GitHub Issues, Source Code",Monthly,Probably,Good,Good,Good,Good,Updating packages I maintain,"Some projects use spack-generated modules, I use spack for local development flexibility, and I maintain packages to support users of some libraries/tools",,,,,,,,,,,,
4/28/2025 10:41:22,Computational Scientist,"DOE/NNSA Lab (e.g., LLNL/LANL/SNL)",United States,"Fortran, C, C++, Python, Julia","HPC / Simulation, Quantum",Search,9,"Packages, Issues","0.23, custom fork","RHEL 8, RHEL9, Arch",100 - 200,3.11,"spack load, Environment Modules (TCL modules)","Module generation, spack containerize, Mirrors (spack mirror create / air gap support), Build caches (making binary packages), Public build caches at cache.spack.io / binaries.spack.io, build-env (debug a build), spack ci (GitLab pipeline generation -- yourself, not on our CI), spack-python (Python scripting), spack external find, Externals in packages.yaml, spack develop, Variant/flag propagation (++, ~~, ==), Git versions, spack test, spack load, spack diff (compare two specs)",Yes -- just one,Yes,No,"AMD, Intel, ARM","NVIDIA Volta, NVIDIA Hopper, NVIDIA Blackwell, AMD MI300A","gcc, Intel OneAPI, LLVM, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA)",Somewhat important,Not Important,Somewhat important,Somewhat important,Somewhat important,Very Important,Somewhat important,Very Important,Very Important,Critical,Very Important,Very Important,Somewhat important,Critical,Very Important,Somewhat important,I really want to be able to override directives.  See https://github.com/spack/spack/pull/48947 and https://github.com/spack/spack/pull/35045.,No,No,No,"Documentation, Source Code",Weekly,Probably not,OK,OK,OK,OK,Set up a GitLab pipeline to create a build cache.  Created GitLab pipelines for building and testing an exascale code.,I usually work a lot on refining/updating SPACK recipes.  Initially I just used SPACK to build the third party library stacks but I am using it more and more for development tasks.,I think the tutorials are improving.  I had never used build caches before and I found the build cache tutorial useful.,"The inability to override directives: https://github.com/spack/spack/pull/48947 and https://github.com/spack/spack/pull/35045 is currently my biggest pain point.  Also, some of the spack develop features are a bit rough and slow.  For example, the `spack cd --build-dir some_spec` command takes over 40 seconds to run on my machines.  I think the dev-build command is still a bit rough (see https://github.com/spack/spack/issues/34680).  I know it is probably being replaced by `spack develop` but that requires the use of environments and requires switching to a new workflow.  ",I think the move to compilers as dependencies is probably the biggest improvement for me that I know is currently being worked on.  I would also like to see more work put into developer tools like `spack develop`.  We should have simple yet flexible development tools  that can convince longtime developers to switch to using SPACK.  It would also be good to improve some of the testing for spack recipes so that it is easier to detect broken versions when updating packages.,,Thank you for the work you are doing to improve SPACK!,,,,,,,
4/28/2025 15:32:50,Computational Scientist,"DOE/NNSA Lab (e.g., LLNL/LANL/SNL)",United States,"C, C++, Python, Rust, Go, sh/bash/other shell script, Kotlin, Scala","HPC / Simulation, Statistics / Data Analysis, AI/ML, Computer Science, Web applications, Embedded Systems, User Support, System Administration, Quantum",Linux Foundation / HPSF,0,No,Na,Na,1 - 10,2.6,Containers,"Environments, Module generation, spack containerize",No,No,No,"AMD, Intel","NVIDIA Ampere, NVIDIA Hopper, NVIDIA Blackwell, AMD MI200/250X, AMD MI300A, AMD MI300X","Classic Intel Compilers, Intel OneAPI, NVHPC, LLVM, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA), NAG, CCE (Cray Compilers), Fujitsu Compilers",Slightly Important,Not Important,Slightly Important,Slightly Important,Slightly Important,Slightly Important,Slightly Important,Slightly Important,Slightly Important,Not Important,Slightly Important,Slightly Important,Not Important,Slightly Important,Slightly Important,Slightly Important,,Yes,No,No,"Documentation, Slack",Never,No,OK,OK,OK,OK,Na,,,,,,,,,,,,,
4/28/2025 17:05:07,System Administrator,University HPC/Computing Center,United States,"C, C++, Python, sh/bash/other shell script, Java","User Support, System Administration",Word of mouth,6,"Slack Discussions, GitHub Discussions, Issues","0.12, 0.13, 0.14, 0.15, 0.16, 0.17, 0.18, 0.19, 0.20, 0.21, 0.22, 0.23","CentOS 7, Rocky 8, Rocky 9, AlmaLinux 8, AlmaLinux 9",100 - 200,"3.6, 3.7, 3.8, 3.9, 3.10, 3.11, 3.12, 3.13","spack load, Lmod, Environment Modules (TCL modules)","Module generation, spack containerize, Chaining (upstreams)",No,Yes,No,"Intel, ARM","NVIDIA Volta, NVIDIA Ampere, NVIDIA Hopper","gcc, Intel OneAPI",Very Important,Not Important,Slightly Important,Slightly Important,Somewhat important,Somewhat important,Very Important,Somewhat important,Slightly Important,Slightly Important,Slightly Important,Slightly Important,Not Important,Not Important,Somewhat important,Not Important,,Not sure,No,Yes,"Documentation, Slack, GitHub Issues, GitHub Discussions, Weekly Telecons",Monthly,No,Good,Good,OK,Good,Installed software and modules for a user on our HPC cluster.,"I use it to build software for users on our local cluster.  If it builds, and I sometimes have issues, it's much faster than building software by hand. I'm the only sysadmin and user facilitator for our 100+ nodes and dozens to hundred active users, so time use in compiling software and creating modules is a premium for me.  I prefer to leave already compiled software and module as is on our cluster, so I chain spack installations when possible, and usually separate by major release branch, so v20.x has it's own tree, and so does v21.x etc.  ",The fact that most pieces of software in it are easy to build and will automatically set up dependencies makes it a huge time saver.,"Build issues usually.  Debugging them takes time, and there's no guarantee that there is a fix for this version since often times packages won't be materially changed until a new major version jump in spack.","Keep working on it, basically :)",I can't think of any offhand.,"Thanks very much to the team and all the devs, I really appreciate your hard work and when I do write in with bug reports or other things, I often try to be as useful as possible with them.",,,,,,,
4/28/2025 17:10:22,DevOps/SRE,University research group,United States,"C, C++, Python, Perl","HPC / Simulation, Computer Science",Word of mouth,8,"Packages, Core Features, GitHub Discussions, Issues","0.23, develop (1.0.0dev0)",Rocky 9,"> 1,000","3.8, 3.9","spack load, Spack environments, Lmod, Environment Modules (TCL modules)","Environments, Module generation, Chaining (upstreams), Build caches (making binary packages), Concretization preferences in packages.yaml, `require:` directive in packages.yaml, spack develop, concretization: --reuse (default), concretization: --fresh (build everything fresh), concretizer:unify:true (concretize together), spack test, spack load",Yes -- just one,No,No,"AMD, Intel, IBM Power, ARM, RISC-V","NVIDIA Volta, NVIDIA Ampere, NVIDIA Hopper, AMD MI200/250X, Intel Xe (Ponte Vecchio)","gcc, Intel OneAPI, NVHPC, LLVM, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA)",Somewhat important,Not Important,Not Important,Not Important,Slightly Important,Somewhat important,Slightly Important,Somewhat important,Not Important,Not Important,Slightly Important,Slightly Important,Not Important,Very Important,Somewhat important,Very Important,,Not sure,Maybe,No,"Documentation, GitHub Issues, GitHub Discussions",Monthly,No,Good,OK,OK,OK,Spack env install in Jenkins ci,Site install of packages for users,Existing,Packages being broken in develop branch,,,,,,,,,,
4/28/2025 17:22:09,Computational Scientist,University research group,United States,"C++, Python, sh/bash/other shell script",HPC / Simulation,Twitter/Mastodon/Bluesky,10,"Packages, Core Features, Slack Discussions, GitHub Discussions, Issues",develop (1.0.0dev0),"macOS 10.15 (Catalina), RHEL 8, RHEL9, Ubuntu 24, Fedora, Cray EX",200 - 500,"3.9, 3.11, 3.13","spack load, Lmod","Environments, Module generation, Weekly develop snapshots on cache.spack.io, Public build caches at cache.spack.io / binaries.spack.io, spack external find, Externals in packages.yaml, Concretization preferences in packages.yaml, spack develop, spack load",No,No,No,"AMD, ARM, RISC-V","NVIDIA Ampere, NVIDIA Hopper, NVIDIA Blackwell, AMD MI200/250X, AMD MI300X","gcc, LLVM, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA)",Very Important,Not Important,Very Important,Very Important,Critical,Somewhat important,Very Important,Critical,Somewhat important,Somewhat important,Somewhat important,Critical,Not Important,Very Important,Somewhat important,Very Important,,Yes,No,No,"Documentation, GitHub Issues, Source Code",Weekly,Probably not,OK,Good,OK,Good,Installing openPMD,,,,,,,,,,,,,
4/28/2025 18:26:22,User Support Staff,University HPC/Computing Center,United States,"Fortran, Python, sh/bash/other shell script","HPC / Simulation, AI/ML, User Support",Word of mouth,5,"Packages, Issues","0.15, 0.17, 0.21","RHEL 8, RHEL9","> 1,000","3.6, 3.9",Lmod,"Module generation, Chaining (upstreams), Externals in packages.yaml, Distributed Builds (srun/mpirun spack install), concretization: --reuse (default), Git versions",Yes -- several,No,No,"AMD, Intel, ARM","NVIDIA Volta, NVIDIA Ampere, NVIDIA Hopper, AMD MI300A, Intel Gaudi","gcc, Intel OneAPI, NVHPC, LLVM, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA), CCE (Cray Compilers)",Critical,Somewhat important,Slightly Important,Slightly Important,Critical,Somewhat important,Very Important,Somewhat important,Slightly Important,Not Important,Not Important,Not Important,Slightly Important,Slightly Important,Somewhat important,Critical,,Yes,No,Yes,"Documentation, Slack, GitHub Issues, Source Code, Weekly Telecons",Weekly,Probably not,Good,Excellent,OK,Good,Upgraded our centralized software stack to v0.21.2; waiting for v1.0.0 release to stabalize the changes,Deploy hundreds of packages as part of a central HPC software installation for our users,Ability to upgrade too newer versions of software packages with mostly the same package spec as the last version we utilized,"Spack changing too much too fast; looking forward to syntax and core features to stabilize in the future; usually backport package.py files to older target Spack versions until we have time to catch up with upstream changes, features, etc.",Separate package repos from core codebase,,Love Spack! Please keep up all the hard work. The community appreciates it. ,,,,,,,
4/28/2025 19:15:08,Software Developer,Company,United States,C++,"Statistics / Data Analysis, System Administration, DevOps",Search,2,"Packages, Slack Discussions",0.23,"Ubuntu 20, Ubuntu 22, Debian 11, Debian 12",10 - 100,"3.8, 3.9, 3.10, 3.11","Spack environments, spack view, Custom script or env vars","Environments, concretizer:unify:when_possible, Git versions",No,No,No,AMD,NVIDIA Other,gcc,Somewhat important,Not Important,Somewhat important,Somewhat important,Somewhat important,Very Important,Slightly Important,Somewhat important,Not Important,Not Important,Not Important,Not Important,Not Important,Not Important,Very Important,Not Important,,Yes,No,No,"Documentation, Slack, GitHub Issues, Source Code",Weekly,Probably not,OK,Excellent,Good,Good,Changed a spack.yaml file,We use it to manage C++ dependencies,,"Spack doesn't auto-install compilers needed to build the environment, so I have a script to parse spack.yaml before installing the environment to install the needed compilers ",Auto-install compilers needed to install packages for an environment,,,,,,,,,
4/28/2025 20:55:48,Scientist/Researcher,"Currently on SSDI, but have worked in this arena in the past.",United States,"C, C++, Python, Perl, sh/bash/other shell script","HPC / Simulation, Computer Science, Embedded Systems, System Administration, DevOps",Word of mouth,0,"No, I would like to, but don't have access to computer equipment that could support it.","I don't currently have the hardware to support use of spack, but hope to soon.","macOS 15 (Sequoia), Ubuntu 22, Ubuntu 24, Debian 11, Debian 12, Windows Subsystem for Linux (WSL), Windows 11",1 - 10,"3.9, 3.10, 3.11, 3.12",Custom script or env vars,"Environments, Module generation, Public build caches at cache.spack.io / binaries.spack.io, spack-python (Python scripting)",No,No,No,"Intel, ARM",NVIDIA Other,gcc,Very Important,Slightly Important,Very Important,Very Important,Somewhat important,Slightly Important,Very Important,Slightly Important,Very Important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Very Important,Slightly Important,Somewhat important,,Not sure,No,Yes,"Documentation, Slack, spack help, ChatGPT / other LLMs",Monthly,Probably not,OK,Good,Good,Good,Attempting to document/use for my specific environment.,"provide tools for my environment, as well as facilitate bringing up machines from scratch.",,,,,,,,,,,,
4/28/2025 21:44:34,Scientist/Researcher,University research group,United States,"C++, Python",High Energy Physics,Used at my site,1,Tools/integrations,0.23,"RHEL9, AlmaLinux 9","> 1,000",3.9,Spack environments,"Environments, Mirrors (spack mirror create / air gap support), spack-python (Python scripting), spack load, spack deconcretize",Yes -- several,No,SpackDev (https://github.com/FNALssi/spack-dev),Intel,"NVIDIA Ampere, Intel Xe (Ponte Vecchio)","gcc, NVHPC",Slightly Important,Somewhat important,Somewhat important,Critical,Slightly Important,Critical,Slightly Important,Somewhat important,Very Important,Critical,Slightly Important,Critical,Not Important,Slightly Important,Not Important,Very Important,,Yes,Maybe,No,"Documentation, Slack, GitHub Issues, GitHub Discussions, Source Code",Weekly,Probably not,Good,Good,Good,Excellent,Update of software for Fermilab's SBND experiment,I use spack for builds of HEP software on ALCF's Polaris and Aurora.,The python spack api has made creating scripts for automating updates very easy!,Decentralized spack recipe repositories often means many repos with many overlapping package.py files.,"Would love to see some speed improvements in the setup script, environment activation, and package loading.",It would be great if more fermilab software was offered in builtin.,It would be great if this tool could get integrated into mainline spack in some way: https://github.com/FNALssi/spack-mpd.,,,,,,,
4/28/2025 21:53:20,Computational Scientist,University research group,India,"Fortran, C, C++, Python, Julia","HPC / Simulation, CFD",Search,10,"GitHub Discussions, Issues","0.23, develop (1.0.0dev0)","macOS 15 (Sequoia), Ubuntu 24, Debian 12, openSuSE",200 - 500,"3.11, 3.12",spack view,"Externals in packages.yaml, Concretization preferences in packages.yaml, `require:` directive in packages.yaml, spack develop, concretization: --reuse (default)",No,Yes,No,"AMD, Intel, ARM",No GPUs,"gcc, armclang",Somewhat important,Not Important,Not Important,Not Important,Somewhat important,Slightly Important,Slightly Important,Not Important,Not Important,Not Important,Not Important,Not Important,Not Important,Somewhat important,Somewhat important,Not Important,,Not sure,No,No,"Documentation, Mailing List, GitHub Issues, GitHub Discussions",Monthly,No,Good,Excellent,Excellent,Excellent,Install deal.II dependencies,"I mainly use for deal.II, I install all dependencies for deal.II with spack. I also use Petsc for other work.",,,,,,,,,,,,
4/28/2025 22:07:58,Scientist/Researcher,University research group,United States,"C, C++, Python, sh/bash/other shell script","HPC / Simulation, Computer Science",Used at my site,6,"Packages, Core Features, Slack Discussions, GitHub Discussions, Issues","1.0.0-alpha* pre-releases, develop (1.0.0dev0)","AlmaLinux 9, Ubuntu 24, Debian 12",200 - 500,"3.9, 3.12, 3.13","spack load, Spack environments, Containers","Environments, Stacks (matrices in environments), Build caches (making binary packages), OCI build caches (pushing packages to container registries), Public build caches at cache.spack.io / binaries.spack.io, Externals in packages.yaml, Concretization preferences in packages.yaml, `require:` directive in packages.yaml, concretization: --reuse (default), Multiple build systems in one package, Git versions, spack test, spackbot (@spackbot fix style; @spackbot rebuild everything, etc.)",No,No,No,"AMD, Intel, ARM","NVIDIA Volta, NVIDIA Ampere, NVIDIA Hopper, NVIDIA Blackwell, AMD MI200/250X, AMD MI300A, AMD MI300X, Intel Xe (Ponte Vecchio)","gcc, LLVM",Very Important,Somewhat important,Somewhat important,Somewhat important,Slightly Important,Critical,Slightly Important,Somewhat important,Not Important,Very Important,Somewhat important,Somewhat important,Not Important,Slightly Important,Critical,Critical,"- Faster (& lower memory use of) concretizations, especially with concretizer:reuse + build caches
- Less surprising concretizations (i.e. better expectations for what a spec will install and better instructions/""tips&tricks"" for writing robust specs/environments)",Yes,"Yes, I'm attending",No,"Documentation, Slack, GitHub Issues, GitHub Discussions, Source Code",Weekly,No,Good,Excellent,OK,OK,"Contributed a fix to the Spack package for the software I develop. Before that, introduced new requirements to a Spack environment installed in CI testing to avoid job timeouts from slow concretization.","I maintain a CI job that `spack install`s and `spack test`s a Spack environment containing the software I develop in one of the `develop` containers. When it breaks, I contribute fixes back to Spack to repair the issue, testing similar `spack install` commands on my development machine sometimes inside containers.

Occasionally I also use Spack to build+install libraries and/or the software I develop on remote systems when their particular quirks mean I need to develop on them. I usually just `spack install` a single package or a `concretize:unify:true` Spack environment.","The buildcache support, specifically the OCI buildcache support.","Long concretization time, especially with reuse and buildcaches. Surprising concretization results (usually in variants) and no prompt to check the concrete spec over before installation. Poor Cntl-C support during concretization. Lack of separation between Spack core and packages (for CI testing I would prefer a fixed Spack core with up-to-date packages to reduce false positive failures).","Dramatically speed up the concretization process, and add configuration options for more reliable concretizations (e.g. always force default variants or newest package versions until user confirms otherwise).",None so far.,"From my perspective/opinion, the biggest continued flaw in Spack is its open stance on package variants. Although I'm sure Spack has avoided limiting variants for good reasons, the fact is that variants are now a wild west full of pitfalls and wasted effort for both users and packagers. For example, forget to force-enable one of `python`'s 12-ish feature variants and you'll end up with an unusable Python with a crippled standard library. Similarly there's no consistency for common build features, e.g. `+shared` vs. `libs=shared` vs. `default_library=shared`, or `+optimized` vs. `build_type=RelWithDebInfo` vs. `buildtype=debugoptimized`. These kinds pitfalls make it extremely difficult as a user and as a packager/contributor to work with Spack productively, other third-party package managers (at least Pip/PyPI and Rust/Cargo, likely others) remove these pitfalls by restricting how ""variants"" work and have a much smoother experience as a result.",,,,,,,
4/28/2025 22:09:35,Research Software Engineer (RSE),Company,United States,"Fortran, C++, Python","HPC / Simulation, AI/ML",Word of mouth,1,"Documentation, Issues","0.22, 0.23, develop (1.0.0dev0)","RHEL9, Arch, Pop!_OS",100 - 200,3.1,Spack environments,"Environments, Module generation, concretizer:unify:true (concretize together), concretizer:unify:when_possible",No,No,No,AMD,"AMD MI200/250X, AMD MI300A, AMD MI300X","gcc, LLVM, AMD ROCmCC (amdclang/hipcc)",Somewhat important,Not Important,Very Important,Very Important,Very Important,Very Important,Critical,Critical,Critical,Somewhat important,Slightly Important,Slightly Important,Slightly Important,Very Important,Critical,Somewhat important,Clearer documentation; there should not be so many ways to do the same thing; more examples in documentation.,Not sure,No,No,"Documentation, Coworkers",Monthly,Probably,Bad,OK,Excellent,OK,Installed packages for Radeon GOUs,Spack --add install <ROCm package> and then waiting for LLVM to build,the new packages page,"Not as easy to use as other package managers. Not very clear how to do simple things, environments could be awesome but just do not seem to work most of the time.","Clearer documentation, make environments easier to spin up / use.","A single ""ROCm"" package, not just individual ROCm components",Keep up the great work :) I love Spack,,,,,,,
4/28/2025 22:30:51,System Administrator,Nonprofit,United States,"Python, sh/bash/other shell script",System Administration,Word of mouth,7,"Packages, Issues",0.22,"Rocky 8, Rocky 9, Ubuntu 22, Ubuntu 24, Fedora",10 - 100,"2.7, 3.10",Lmod,Module generation,No,No,No,"AMD, Intel","NVIDIA Hopper, NVIDIA Other","gcc, Intel OneAPI, nvcc (CUDA)",Somewhat important,Not Important,Not Important,Not Important,Somewhat important,Somewhat important,Very Important,Somewhat important,Not Important,Not Important,Not Important,Not Important,Slightly Important,Not Important,Slightly Important,Not Important,,Not sure,No,Yes,Documentation,Monthly,Probably not,Excellent,Excellent,Good,Excellent,Leveraged Spack to build software for an HPC cluster. ,Spack is integral to any HPC system worth its salt. ,Prevents dependency hell and has autogenerated modules. Those two features alone make Spack amazing.  Everything else is icing on the cake ,I usually don’t update Spack itself.  Early days that was a sure fire way to cause packages to duplicate and it caused headaches. I usually pick a version and stick with it until I build out my next cluster. That said it has been some time since I last attempted to upgrade a Spack deployment so perhaps things have improved.,,,,,,,,,,
4/28/2025 23:30:40,User Support Staff,University HPC/Computing Center,France,"Fortran, C, C++, Python","HPC / Simulation, User Support, System Administration",Used at my site,0,"Slack Discussions, GitHub Discussions","0.21, 0.22, 0.23","RHEL 8, RHEL9",10 - 100,"3.11, 3.12","Environment Modules (TCL modules), Containers, Custom script or env vars","Environments, Mirrors (spack mirror create / air gap support), spack-python (Python scripting), Externals in packages.yaml, Concretization preferences in packages.yaml, concretization: --reuse (default), concretization: --fresh (build everything fresh), concretizer:unify:true (concretize together), concretizer:unify:when_possible, Multiple build systems in one package, Variant/flag propagation (++, ~~, ==), Git versions",Yes -- just one,My site has a front-end or extension to Spack,No,"AMD, Intel","NVIDIA Ampere, NVIDIA Hopper, AMD MI100","gcc, Intel OneAPI, NVHPC, LLVM, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA)",Somewhat important,Slightly Important,Somewhat important,Somewhat important,Very Important,Very Important,Very Important,Very Important,Somewhat important,Very Important,Somewhat important,Somewhat important,Somewhat important,Very Important,Critical,Somewhat important,,Not sure,Maybe,No,"Documentation, Coworkers, GitHub Issues, GitHub Discussions, Source Code, ChatGPT / other LLMs",Weekly,Probably,Good,Good,Good,Good,Debugging installations,Mostly python installations,Easy for resolution of dependencies ,RPATH,,,,,,,,,,
4/28/2025 23:54:12,Manager,University HPC/Computing Center,United Kingdom,sh/bash/other shell script,"HPC / Simulation, Computer Science, User Support, System Administration, DevOps",Tutorial,2,"Packages, GitHub Discussions, Issues, Spack User Meeting Talk","0.22, 0.23",Rocky 9,"> 1,000",3.9,"Spack environments, Environment Modules (TCL modules), Containers","Environments, Module generation, spack containerize, Chaining (upstreams), Public build caches at cache.spack.io / binaries.spack.io, Externals in packages.yaml, Concretization preferences in packages.yaml, `require:` directive in packages.yaml, `prefer:` directive in packages.yaml, concretizer:unify:true (concretize together), Multiple build systems in one package, Variant/flag propagation (++, ~~, ==), Git versions",Yes -- just one,No,No,"AMD, Intel","NVIDIA Ampere, NVIDIA Hopper","gcc, Intel OneAPI, NVHPC, LLVM, nvcc (CUDA)",Very Important,Not Important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Critical,Somewhat important,Slightly Important,Slightly Important,Somewhat important,Slightly Important,Slightly Important,Slightly Important,Somewhat important,Slightly Important,easier upgrade path,Yes,Maybe,Yes,"Documentation, Slack, Coworkers, GitHub Issues",Monthly,Probably not,Excellent,Excellent,Good,Excellent,upgrade from 0.22.0 to 0.23.1,we build all HPC software that can be natively built on a RHEL9 system via spack. debian-based software is build via apptainer containers. there is also conda...,a complete rebuild of software packages during an OS upgrade from centos7 to rocky9,ordering of projections in modules,,,,,,,,,,
4/29/2025 1:32:12,System Administrator,University HPC/Computing Center,Croatia,"C, C++, Python","HPC / Simulation, AI/ML, Computer Science, User Support, System Administration",Presentation,4,No,develop (1.0.0dev0),"Ubuntu 22, Ubuntu 24",100 - 200,3.1,spack load,Cray PE support (spack external read-cray-manifest),Yes -- just one,Yes,,AMD,"NVIDIA Hopper, NVIDIA Blackwell","gcc, nvcc (CUDA), CCE (Cray Compilers)",Very Important,Not Important,Somewhat important,Critical,Critical,Slightly Important,Critical,Very Important,Slightly Important,Slightly Important,Slightly Important,Slightly Important,Not Important,Slightly Important,Not Important,Very Important,,Yes,No,Yes,"Documentation, Slack, GitHub Issues, GitHub Discussions, spack help, Source Code",Monthly,Probably not,OK,Excellent,Good,Excellent,Spack containers ,,,,,,,,,,,,,
4/29/2025 5:29:46,DevOps/SRE,University HPC/Computing Center,United States,"C, Python, Go, Perl",HPC / Simulation,Word of mouth,6,"Packages, Core Features, Slack Discussions, GitHub Discussions, Issues",custom fork,"RHEL9, Rocky 9","> 1,000",3.9,"spack load, Spack environments","Environments, Module generation, spack-python (Python scripting), Externals in packages.yaml, Concretization preferences in packages.yaml, `require:` directive in packages.yaml, `prefer:` directive in packages.yaml, concretization: --reuse (default), concretization: --fresh (build everything fresh), concretizer:unify:true (concretize together), Multiple build systems in one package, Git versions, spack test, spack load, spackbot (@spackbot fix style; @spackbot rebuild everything, etc.), spack diff (compare two specs)",Yes -- just one,Yes,No,"Intel, ARM","NVIDIA Ampere, NVIDIA Hopper, NVIDIA Blackwell, AMD MI300X","gcc, Intel OneAPI, NVHPC, LLVM, nvcc (CUDA), armclang",Very Important,Slightly Important,Slightly Important,Slightly Important,Somewhat important,Very Important,Slightly Important,Very Important,Slightly Important,Slightly Important,Slightly Important,Slightly Important,Somewhat important,Somewhat important,Somewhat important,Very Important,,Not sure,No,No,"Documentation, Slack, Mailing List, Coworkers, GitHub Issues, GitHub Discussions, Source Code, Weekly Telecons",Monthly,Probably not,OK,Excellent,Good,Good,rebasing internal fork,,,,,,,,,,,,,
4/29/2025 5:45:03,User Support Staff,University HPC/Computing Center,United States,"Python, sh/bash/other shell script","User Support, System Administration",Used at my site,4,"Packages, Documentation, Slack Discussions, GitHub Discussions, Issues, Spack User Meeting Talk",0.22,RHEL9,"> 1,000","3.9, 3.10, 3.11, 3.12","spack load, Spack environments","Environments, Stacks (matrices in environments), spack-python (Python scripting), Concretization preferences in packages.yaml, concretization: --fresh (build everything fresh), concretizer:unify:true (concretize together), spack load, spack diff (compare two specs)",Yes -- just one,Yes,No,"Intel, ARM","NVIDIA Hopper, NVIDIA Blackwell","gcc, Classic Intel Compilers, Intel OneAPI, NVHPC, LLVM, nvcc (CUDA), armclang",Very Important,Not Important,Very Important,Somewhat important,Somewhat important,Very Important,Not Important,Somewhat important,Somewhat important,Very Important,Somewhat important,Critical,Not Important,Somewhat important,Somewhat important,Somewhat important,N/A,Yes,Maybe,Yes,"Documentation, Slack, GitHub Issues, GitHub Discussions, Source Code",Weekly,Probably,Excellent,Excellent,OK,Excellent,Environment building,"Most of my workflow involves building new packages, updating packages, and building environments for researchers. Our researchers have very little technical knowledge, so our team handles software support for ~80% of our userbase.",Simple (usually) software support,"We carry a lot of package recipes locally because it takes too long to get them approved and merged upstream; our researchers won't tolerate that extra wait time. We especially miss Adam managing the python ecosystem, but we totally understand why he stepped back.

Concretizer errors have gotten better, but they're still not the most intuitive for people new to Spack. Our heavy software support people know how to read them, but our co-op students are often confused.",I think getting more eyes on pull requests would be the biggest benefit to me.,Nothign comes to mind.,Spack is an incredible tool and ecosystem; we could not support our researchers' software needs without it.,,,,,,,
4/29/2025 6:48:36,Computational Scientist,University research group,Italy,"C, C++, Python","HPC / Simulation, Statistics / Data Analysis, Visualization",Used at my site,8,"Packages, Issues","0.23, 1.0.0-alpha* pre-releases","AlmaLinux 9, Ubuntu 24, Debian 11, Arch, openSuSE",200 - 500,"3.6, 3.10, 3.11, 3.12","spack load, Spack environments, Environment Modules (TCL modules), spack build-env","Environments, Module generation, Stacks (matrices in environments), build-env (debug a build), spack external find, Externals in packages.yaml, Concretization preferences in packages.yaml, spack develop, concretization: --reuse (default), concretizer:unify:true (concretize together), Git versions, spack test, spack load, spackbot (@spackbot fix style; @spackbot rebuild everything, etc.)",No,Yes,No,"AMD, Intel","NVIDIA Blackwell, No GPUs","gcc, Intel OneAPI, LLVM, AMD ROCmCC (amdclang/hipcc)",Very Important,Slightly Important,Not Important,Slightly Important,Very Important,Critical,Critical,Somewhat important,Slightly Important,Slightly Important,Somewhat important,Somewhat important,Very Important,Very Important,Very Important,Critical,,Yes,No,No,"Documentation, Slack, Mailing List, Coworkers, GitHub Issues, spack help, Source Code",Weekly,Probably not,Good,Good,Good,Excellent,setting up a pull request for a package update,heavy use of environments for software development,reproducibility of an environment on multiple machines,speed,speed,,,,,,,,,
4/29/2025 6:50:38,HPC User / Analyst,University HPC/Computing Center,United States,"Python, R",HPC / Simulation,Tutorial,6,"Slack Discussions, Spack Community Zoom Meetings","0.22, 0.23","RHEL 8, RHEL9",10 - 100,"3.6, 3.10, 3.11, 3.12",spack load,"Module generation, Build caches (making binary packages)",No,No,No,"AMD, Intel","NVIDIA T4, NVIDIA Volta","gcc, NVHPC",Somewhat important,Slightly Important,Slightly Important,Slightly Important,Very Important,Very Important,Very Important,Very Important,Somewhat important,Very Important,Very Important,Very Important,Very Important,Very Important,Very Important,Very Important,,Not sure,No,Yes,"Documentation, Slack",Yearly,"Yes, definitely!",Excellent,Good,Good,Good,Install SPACK package,,,,,,Help with SPACK support is very slow,,,,,,,
4/29/2025 7:01:10,Software Developer,Cloud Provider,United States,"Fortran, C, C++, Python","HPC / Simulation, AI/ML, Bioinformatics, High Energy Physics",Used at my site,2,"Packages, Slack Discussions, GitHub Discussions, Issues, Spack User Meeting Talk","0.23, develop (1.0.0dev0)","RHEL9, Rocky 9, Ubuntu 20, Ubuntu 22, Ubuntu 24, Amazon Linux",200 - 500,"3.8, 3.9, 3.10","spack load, Spack environments","Environments, Stacks (matrices in environments), Build caches (making binary packages), Weekly develop snapshots on cache.spack.io, Public build caches at cache.spack.io / binaries.spack.io, spack develop, spack diff (compare two specs), Splicing",No,No,No,"AMD, Intel, ARM",No GPUs,"gcc, Intel OneAPI, NVHPC, LLVM, armclang",Very Important,Not Important,Critical,Critical,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Very Important,Very Important,Somewhat important,Somewhat important,Very Important,Not Important,Very Important,Critical,,Yes,"Yes, I'm presenting!",No,"Documentation, Slack, GitHub Issues, Source Code, ChatGPT / other LLMs",Weekly,No,Good,Excellent,Good,Good,PR build build-cache,"configure packages.yaml for ""guided"" defaults for my users",recent versions of everything,non-obvious concretization errors.,Better error messages.  ability to bootstrap the compiler in an environment.,No!,T-shirts,,,,,,,
4/29/2025 10:28:53,Computational Scientist,"DOE/NNSA Lab (e.g., LLNL/LANL/SNL)",United States,"Fortran, C++, Python","HPC / Simulation, AI/ML",Dependency of software,1,No,"0.21, 0.22, 0.23","RHEL 8, Arch",1 - 10,3.12,"spack load, Spack environments","spack external find, spack load",No,No,No,"AMD, Intel","NVIDIA Ampere, NVIDIA Hopper, AMD MI200/250X, AMD MI300A, Intel Xe (Ponte Vecchio)","gcc, NVHPC, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA)",Very Important,Not Important,Somewhat important,Somewhat important,Somewhat important,Very Important,Critical,Slightly Important,Not Important,Not Important,Not Important,Not Important,Slightly Important,Not Important,Somewhat important,Not Important,"Realistic documentation, giving steps for using spack in a real-world environment where bootstrapping everything is not an option and the user needs to find system mpi, slurm, cuda, compilers, etc.",No,No,No,"Documentation, GitHub Issues, GitHub Discussions, spack help",Monthly,No,Horrible,Good,Good,Good,"Read about PyTorch in Spack, trying to figure out if it is a viable route to CXX11ABI libtorch",Install software that requires spack (hpctoolkit etc),,"Documentation, hard to google",,,,,,,,,,
4/29/2025 10:51:58,sales engineer,Company,United States,"C, C++, Python, Java","HPC / Simulation, Statistics / Data Analysis, AI/ML, Web applications, Embedded Systems",my customers use it,1,No,0.22,"macOS 15 (Sequoia), Rocky 8, Ubuntu 22, Ubuntu 24, SLES15",10 - 100,3.1,"spack load, Spack environments","Environments, Build caches (making binary packages), concretization: --fresh (build everything fresh), spack load",No,No,No,"AMD, Intel, ARM","NVIDIA Ampere, NVIDIA Hopper, AMD MI300X","gcc, Classic Intel Compilers, Intel OneAPI, NVHPC, LLVM, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA), CCE (Cray Compilers)",Very Important,Not Important,Somewhat important,Slightly Important,Slightly Important,Slightly Important,Slightly Important,Very Important,Not Important,Somewhat important,Not Important,Not Important,Slightly Important,Somewhat important,Slightly Important,Not Important,,Yes,"Yes, I'm attending",Yes,"Documentation, Slack, spack help, Source Code, ChatGPT / other LLMs",Daily,Probably not,Bad,Good,OK,OK,Built libraries that I need to run my demo application,"I'm continually looking to demo features of our product (TotalView) and so often want to build and run my or third-party code. I usually run Spack on my machine or on NERSC, usually create an environment for the app I'm building, add required packages, fight with it to build them.",Installing different versions of individual libraries,understanding error messages when building existing packages,"improve those error messages, expanding description of the concepts embodied by Spack",,,,,,,,,
4/29/2025 10:57:50,Research Software Engineer (RSE),University HPC/Computing Center,United States,"C, Python, sh/bash/other shell script","AI/ML, Computer Science, User Support",Tutorial,7,"Slack Discussions, GitHub Discussions, Issues","0.19, 0.23, custom fork","Rocky 8, Rocky 9",200 - 500,"3.6, 3.9, 3.11",Lmod,"Environments, Module generation, Chaining (upstreams), Stacks (matrices in environments), Mirrors (spack mirror create / air gap support), Build caches (making binary packages), spack external find, Externals in packages.yaml, Concretization preferences in packages.yaml, `require:` directive in packages.yaml, `prefer:` directive in packages.yaml, Distributed Builds (srun/mpirun spack install), spack develop, concretization: --reuse (default), concretization: --fresh (build everything fresh), concretizer:unify:true (concretize together), concretizer:unify:when_possible, Variant/flag propagation (++, ~~, ==), Git versions, spack load, spack diff (compare two specs)",Yes -- several,No,No,"AMD, ARM","NVIDIA Hopper, NVIDIA Blackwell, NVIDIA Other, AMD MI200/250X, AMD MI300X","gcc, Intel OneAPI, NVHPC, LLVM, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA)",Critical,Very Important,Somewhat important,Somewhat important,Very Important,Somewhat important,Critical,Very Important,Somewhat important,Critical,Very Important,Slightly Important,Slightly Important,Slightly Important,Critical,Critical,,Not sure,No,Yes,"Documentation, Slack, GitHub Issues, GitHub Discussions, Source Code",Monthly,Probably,Good,Good,OK,Excellent,Build a software stack (compiler/mpi/libraries) for H100 GPUs.,Create curated site installation of Spack packages/environments and deploy on HPC clusters.,Support for a large number of packages.,"Long-term support (5+ years) for a specific Spack version. Packages change too frequently (e.g. changing list of variants/build systems/defaults, etc.) making it challenging to keep using ""one stable version"" of Spack with updated packages/application versions.",Separate package definitions from Spack Core.,,"Thank you for the great work supporting the Spack community. Setting gripes aside, Spack is still my favorite tool for software installation on HPC systems. :) ",,,,,,,
4/29/2025 12:32:08,DevOps/SRE,Company,United States,Python,"HPC / Simulation, Statistics / Data Analysis, AI/ML, System Administration, DevOps",Word of mouth,1,No,0.22,"RHEL 8, Rocky 8","500-1,000","3.6, 3.11",Environment Modules (TCL modules),"Environments, Module generation, Stacks (matrices in environments), Mirrors (spack mirror create / air gap support), Build caches (making binary packages), build-env (debug a build), spack ci (GitLab pipeline generation -- yourself, not on our CI), spack-python (Python scripting), Externals in packages.yaml, Concretization preferences in packages.yaml, `require:` directive in packages.yaml, spack develop, concretizer:unify:when_possible",Yes -- just one,No,No,"AMD, Intel",NVIDIA Hopper,"gcc, Classic Intel Compilers, Intel OneAPI",Critical,Not Important,Not Important,Not Important,Very Important,Very Important,Very Important,Very Important,Not Important,Slightly Important,Slightly Important,Not Important,Not Important,Not Important,Not Important,Somewhat important,,Not sure,No,No,Documentation,Weekly,No,Bad,OK,OK,Bad,Debugging deadlocks in CI builds of environments,Create a distributable package set to use with environment-modules,Spack has made everything worse,"environments getting into non-satisfiable states, or deadlocking on that calcuation.",,,,,,,,,,
4/29/2025 12:40:29,Computational Scientist,"DOE/Office of Science Lab (e.g., ORNL/ANL/LBL)",United States,"C++, Python","HPC / Simulation, Statistics / Data Analysis, AI/ML",Word of mouth,10,"Packages, Issues",0.22,"macOS 15 (Sequoia), Arch, Whatever NERSC runs.",100 - 200,"3.10, 3.11, 3.12, 3.13",Spack environments,"Environments, Externals in packages.yaml, Multiple build systems in one package, spack load",Yes -- just one,No,No,"AMD, Intel, ARM","NVIDIA Ampere, NVIDIA Hopper, NVIDIA Blackwell","gcc, LLVM, nvcc (CUDA)",Somewhat important,Not Important,Very Important,Very Important,Somewhat important,Slightly Important,Somewhat important,Somewhat important,Slightly Important,Slightly Important,Somewhat important,Slightly Important,Slightly Important,Slightly Important,Slightly Important,Slightly Important,"Better package stability, especially on macOS. Better publicizing of the existing features (I didn't know about 80% of the things in the list on the previous page). ",Not sure,No,No,"Documentation, GitHub Issues, GitHub Discussions, Source Code",Yearly,Probably not,Excellent,OK,Good,Good,Activated an environment. The most advanced was making a package of my own. (Intermediate: injecting system packages into the environment.),,,,Better support at HPC centers. Better publicity for the new features.,,,,,,,,,
4/29/2025 16:39:13,Software Developer,"DOE/NNSA Lab (e.g., LLNL/LANL/SNL)",United States,"C++, Python, Lua",HPC / Simulation,Used at my site,8,"Packages, Core Features, GitHub Discussions, Issues, Tools/integrations","0.23, 1.0.0-alpha* pre-releases","RHEL 8, Ubuntu 22, Ubuntu 24, Windows Subsystem for Linux (WSL)",200 - 500,3.11,Spack environments,"Environments, Mirrors (spack mirror create / air gap support), Build caches (making binary packages), build-env (debug a build), spack-python (Python scripting), spack external find, `require:` directive in packages.yaml, concretizer:unify:true (concretize together), Multiple build systems in one package, Variant/flag propagation (++, ~~, ==), develop",Yes -- several,No,Other script to wrap spack,"AMD, Intel, IBM Power, ARM","NVIDIA Volta, NVIDIA Ampere, NVIDIA Hopper, AMD MI200/250X, AMD MI300A","gcc, Classic Intel Compilers, Intel OneAPI, LLVM, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA), IBM XL, CCE (Cray Compilers)",Critical,Not Important,Not Important,Not Important,Critical,Very Important,Slightly Important,Critical,Somewhat important,Critical,Somewhat important,Somewhat important,Slightly Important,Slightly Important,Very Important,Somewhat important,"improvements to spack develop, better support for multiple compilers in the same environment",Not sure,No,Yes,"Documentation, Coworkers, Email, ChatGPT / other LLMs",Monthly,No,Good,Excellent,Good,Good,Built a non-default set of packages by modifying variants through uberenv,Work on the mack wrapper,Direct collaboration with the spack team!,"Issues with `spack external find`; difficult to track down error messages, especially when the concretizer ""knows"" what's wrong, but won't tell me",Improve error messages during concretization errors; improvements to the `develop` workflow,"No! But I had a great success story when adding OpenCascade to my project, and it was already there and working.",Thank you for gathering user feedback and improving spack,,,,,,,
4/29/2025 20:45:54,Scientist/Researcher,University research group,United States,"C, C++",HPC / Simulation,Word of mouth,1,Packages,"0.21, 0.22, 0.23","RHEL 8, Ubuntu 20, Cray EX",200 - 500,"3.8, 3.11","Spack environments, spack build-env","Environments, spack containerize, build-env (debug a build), spack external find, Externals in packages.yaml, concretization: --reuse (default), concretization: --fresh (build everything fresh), concretizer:unify:true (concretize together), spack load",Yes -- several,No,No,"AMD, Intel","NVIDIA Ampere, NVIDIA Hopper, NVIDIA Blackwell","gcc, LLVM, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA)",Slightly Important,Not Important,Slightly Important,Not Important,Slightly Important,Critical,Critical,Somewhat important,Very Important,Somewhat important,Not Important,Not Important,Not Important,Not Important,Critical,Somewhat important,,Yes,No,No,"Documentation, Slack, ChatGPT / other LLMs",Yearly,Probably,Good,Excellent,Excellent,Excellent,Use develop environment to develop/test my software,Write code; Write develop environment; concretize; install; run my software,Develop environment,The view generation step of Spack concretize is a little bit slow on some platforms with slow file systems.,,,,,,,,,,
4/30/2025 1:17:47,Computational Scientist,University HPC/Computing Center,Germany,"C++, Python",HPC / Simulation,Word of mouth,1,No,"0.21, 0.22, 0.23, whichever is available on the cluster","Ubuntu 20, Ubuntu 22, Ubuntu 24, Debian 9, Debian 10, Debian 11, Debian 12",10 - 100,"3.8, 3.9, 3.10, 3.11, 3.12","spack load, spack build-env","Environments, Module generation, spack external find, Externals in packages.yaml, `require:` directive in packages.yaml, spack develop, Git versions, spack load",No,No,No,"AMD, Intel, ARM, RISC-V","NVIDIA Hopper, NVIDIA Blackwell, AMD MI100, AMD MI200/250X, AMD MI300A","gcc, Classic Intel Compilers, Intel OneAPI, NVHPC, LLVM, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA)",Critical,Not Important,Critical,Critical,Critical,Critical,Critical,Critical,Critical,Critical,Critical,Critical,Critical,Critical,Critical,Critical,,Not sure,No,No,"Documentation, Coworkers",Monthly,No,OK,OK,Bad,OK,installing the environment required for a package,,,,,,,,,,,,,
4/30/2025 9:26:42,Software Developer + DevOps + System Administrator,University research group,Germany,"C++, Python, Rust","HPC / Simulation, Computer Science, DevOps",Tutorial,3,"Packages, Slack Discussions, Issues",0.23,"macOS 15 (Sequoia), Rocky 9",100 - 200,3.9,"spack load, Lmod","Environments, Module generation, Chaining (upstreams), Stacks (matrices in environments), Mirrors (spack mirror create / air gap support), Build caches (making binary packages), spack external find, Externals in packages.yaml, Concretization preferences in packages.yaml, Distributed Builds (srun/mpirun spack install), concretization: --reuse (default), concretization: --fresh (build everything fresh), concretizer:unify:true (concretize together), concretizer:unify:when_possible, spack load",Yes -- several,No,No,"AMD, Intel, ARM","NVIDIA Ampere, NVIDIA Hopper, NVIDIA Blackwell, NVIDIA Other, AMD MI100, AMD MI200/250X, Intel Xe (Ponte Vecchio)","gcc, Intel OneAPI, NVHPC, LLVM, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA), Fujitsu Compilers",Critical,Not Important,Somewhat important,Somewhat important,Very Important,Very Important,Somewhat important,Somewhat important,Slightly Important,Slightly Important,Slightly Important,Very Important,Somewhat important,Very Important,Critical,Somewhat important,,Yes,No,Yes,"Documentation, Slack, GitHub Issues, Source Code",Monthly,Probably not,Good,Excellent,OK,Excellent,"Attempting to add new packages to our existing (stack) environment, it did not go well, since we haven't updated to v1.0 yet, and the concretization with unify: when_possible didn't complete in 24h. I will have to rerun it with unify no",We have two levels of Spack: System-wide software stack and optionally user-local spack instances that use the system instance as an upstream.,Setting up an HPC cluster software stack from scratch with Spack was pretty smooth,"1) Concretization performance - sometimes I would be fine with slightly sub-optimal results for unify: when_possible
2) Last time I checked, there are still some race conditions and other issues with parallel builds via mpirun spack install, especially the (suspected) deadlocks with multiple parallel LLVM builds and the inherently non-parallelizable Intel oneAPI builds",,"ROCm software stacks are painful, because they have such a fine granularity",,,,,,,,
4/30/2025 10:07:03,System Administrator,University HPC/Computing Center,Hong Kong,"Fortran, C, C++, Python, Go, sh/bash/other shell script, Javascript, Lua","HPC / Simulation, AI/ML, Computer Science, Compiler Testing, User Support, System Administration, DevOps",Word of mouth,0,"Packages, Slack Discussions, Issues, Tools/integrations","0.23, develop (1.0.0dev0), custom fork, weekly release","RHEL9, Rocky 9, Ubuntu 22, Arch, openSuSE, Fedora",100 - 200,"3.9, 3.11, 3.12, 3.13","spack load, Spack environments, Lmod","Environments, Module generation, Chaining (upstreams), Stacks (matrices in environments), Mirrors (spack mirror create / air gap support), Weekly develop snapshots on cache.spack.io, spack external find, Externals in packages.yaml, Concretization preferences in packages.yaml, `require:` directive in packages.yaml, `prefer:` directive in packages.yaml, concretization: --fresh (build everything fresh), Multiple build systems in one package, Variant/flag propagation (++, ~~, ==), Git versions, spack load",Yes -- just one,Yes,Other script to wrap spack,"AMD, Intel","NVIDIA Volta, NVIDIA Ampere, NVIDIA Hopper, NVIDIA Blackwell, AMD MI300X, No GPUs","gcc, Intel OneAPI, NVHPC, LLVM, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA)",Very Important,Not Important,Not Important,Not Important,Somewhat important,Very Important,Slightly Important,Very Important,Somewhat important,Slightly Important,Not Important,Critical,Critical,Somewhat important,Somewhat important,Critical,Compiler/OS/Arch Matrix Smoke Test in CI,Yes,"Yes, I'm presenting!",No,"Documentation, Slack, Coworkers, GitHub Issues, Source Code, ChatGPT / other LLMs",Weekly,Probably,OK,Excellent,Good,OK,"A set of spack config defaults that works across different Linux distros/kernels, that would facilitate our own center's package provision & users to install on their own.","Univ. research computing center with diverse OS & target to support, cluster is shared by a variety of research departments from AI/ML, physics, ocean science and economy/finance. Internal package development is from dev -> edge/alpha (for a single user for testing) -> public PR & beta -> once/twice a year frozen prod/LTS.",Multi-compiler & target (matrix spec) serving our baseline site packages,"First time setting up Spack properly in our site, we almost gave up, and it took probably months before paying back.",Concretizer to be more controllable and verbose ,"No, but there were are few ~ unmaintained, like anaconda3, r/r-studio, matlab, we had to use our own repo, but it is kind of license dependent as well. ",,,,,,,,
4/30/2025 10:38:16,System Administrator,University HPC/Computing Center,Hong Kong,"Python, sh/bash/other shell script","HPC / Simulation, Statistics / Data Analysis, AI/ML, User Support, System Administration",Used at my site,0,No,"0.22, 0.23, 1.0.0-alpha* pre-releases, custom fork",Rocky 9,10 - 100,"3.10, 3.11","spack load, Spack environments, Lmod","Environments, spack containerize, Build caches (making binary packages), concretizer:unify:when_possible, Variant/flag propagation (++, ~~, ==), spack test, spack load",Yes -- several,Yes,No,"AMD, Intel","NVIDIA Hopper, NVIDIA Blackwell, AMD MI200/250X","gcc, Intel OneAPI, NVHPC, LLVM, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA), armclang",Very Important,Not Important,Somewhat important,Somewhat important,Very Important,Somewhat important,Slightly Important,Very Important,Critical,Slightly Important,Somewhat important,Critical,Slightly Important,Very Important,Not Important,Not Important,,Not sure,No,No,"Documentation, GitHub Discussions, ChatGPT / other LLMs",Weekly,Probably,Good,Good,Good,Good,install packages and dependencies to build other apps,"build and load compilers, cuda toolkits mpi libraries and some math libraries, for building other scientific apps ",helped me to isolate and environment-ize software dependencies for many different projects ,"packages not maintaining (like matlab, R studio); also https://github.com/ggml-org/llama.cpp/issues/5316 this issue even with spack installed gcc and binutils",keep improving the out-of-the-box usability ,Comsol,,,,,,,,
4/30/2025 12:00:43,Scientist/Researcher,University research group,United States,"C++, Python, Perl",HPC / Simulation,Presentation,5,"Packages, GitHub Discussions",0.23,Rocky 9,1 - 10,3.11,"Lmod, Environment Modules (TCL modules), Containers",,No,No,No,"AMD, Intel","NVIDIA Volta, NVIDIA Ampere, AMD MI100, AMD MI200/250X","gcc, Intel OneAPI, LLVM, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA)",Slightly Important,Not Important,Slightly Important,Slightly Important,Slightly Important,Very Important,Somewhat important,Somewhat important,Slightly Important,Slightly Important,Slightly Important,Slightly Important,Not Important,Somewhat important,Somewhat important,Somewhat important,,Yes,No,Yes,"Documentation, Coworkers",Yearly,Probably not,OK,OK,Good,Good,Updating Spack packages.,Load Spack packages through environment modules; moving to Lua modules (Lmod) in future. modules are significantly faster than using spack directly to load packages.,Having consistent easily loaded modules across cluster and in containers for GitHub actions CT.,,,,,,,,,,,
4/30/2025 14:11:53,System Administrator,Company,United States,"Python, sh/bash/other shell script","HPC / Simulation, System Administration",Word of mouth,0,No,0.23,"Rocky 8, Rocky 9",1 - 10,3.6,I can't do this yet,,No,,No,"AMD, Intel, ARM","NVIDIA Hopper, NVIDIA Blackwell, AMD MI300X","gcc, Intel OneAPI, LLVM, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA)",Critical,Not Important,Very Important,Very Important,Somewhat important,Somewhat important,Somewhat important,Very Important,Not Important,Slightly Important,Somewhat important,Not Important,Not Important,Not Important,Somewhat important,Somewhat important,,Yes,No,Yes,"Documentation, Slack, Mailing List",Monthly,Probably not,OK,OK,OK,OK,tried to build hdfview and failed to get a working product at any version,"Intended use case is a site-based install, users don't talk to Spack, they just load modules to get the products",n/a,low success rate with building packages,"test suites for post-build checking, analogous to ""make check"" or ""make test""",n/a,n/a,,,,,,,
4/30/2025 18:39:18,Scientist/Researcher,University research group,United States,"C++, Python",HPC / Simulation,Word of mouth,5,"Packages, Slack Discussions, Issues","0.23, develop (1.0.0dev0)","macOS 15 (Sequoia), RHEL9",10 - 100,3.11,"spack load, Spack environments, Environment Modules (TCL modules), spack build-env","Environments, Module generation, Weekly develop snapshots on cache.spack.io, OCI build caches (pushing packages to container registries), Public build caches at cache.spack.io / binaries.spack.io, spack external find, Externals in packages.yaml, `prefer:` directive in packages.yaml, concretization: --reuse (default), concretization: --fresh (build everything fresh), concretizer:unify:true (concretize together), concretizer:unify:when_possible, Multiple build systems in one package, spack load",Yes -- several,No,No,"AMD, Intel, IBM Power, ARM","NVIDIA Volta, NVIDIA Hopper, NVIDIA Blackwell, AMD MI200/250X, AMD MI300X","gcc, NVHPC, LLVM, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA)",Very Important,Not Important,Very Important,Critical,Slightly Important,Slightly Important,Slightly Important,Slightly Important,Slightly Important,Very Important,Slightly Important,Slightly Important,Slightly Important,Slightly Important,Slightly Important,Very Important,,Yes,No,No,"Slack, GitHub Issues",Weekly,Probably not,Good,Good,OK,Good,Create a new package,I would love to be able to initialize an environment based on the dependencies of a package. Similar to spack build-env but in a persistent way with a view. I do this manually so I can hand the view to my ide currently. ,,,,,,,,,,,,
5/1/2025 19:51:15,User Support Staff,University HPC/Computing Center,Singapore,"C, Python, sh/bash/other shell script, Ruby","HPC / Simulation, AI/ML, Web applications, User Support, System Administration",OpenHPC,5,"Slack Discussions, Issues","0.16, 0.22, 0.23, develop (1.0.0dev0)","macOS 15 (Sequoia), RHEL 8, Rocky 8, Rocky 9, AlmaLinux 8, Ubuntu 20, Ubuntu 22",100 - 200,3.6,"spack load, Spack environments, Lmod, Environment Modules (TCL modules), spack view, Containers","Environments, Module generation, Mirrors (spack mirror create / air gap support), Build caches (making binary packages), Public build caches at cache.spack.io / binaries.spack.io, spack external find, Externals in packages.yaml, Concretization preferences in packages.yaml, Distributed Builds (srun/mpirun spack install), concretization: --fresh (build everything fresh), Variant/flag propagation (++, ~~, ==), spack load",Yes -- just one,Yes,No,"AMD, Intel, ARM","NVIDIA T4, NVIDIA Volta, NVIDIA Ampere, NVIDIA Hopper","gcc, Classic Intel Compilers, Intel OneAPI, NVHPC, nvcc (CUDA), armclang",Critical,Somewhat important,Very Important,Very Important,Somewhat important,Somewhat important,Very Important,Very Important,Slightly Important,Slightly Important,Somewhat important,Slightly Important,Slightly Important,Slightly Important,Very Important,Critical,,Yes,No,No,"Documentation, Slack, Coworkers, GitHub Issues, GitHub Discussions",Weekly,Probably,Good,Good,OK,Good,Setup Spack on a new cluster,install software from user requests,binary/build caches,"concretizer failures and error messages, prefer older modulefile generator (no depends-on)",core and repo separation,rstudio-server,,,,,,,,
5/1/2025 22:56:52,Scientist/Researcher,r,Germany,"Fortran, C, C++, Python","HPC / Simulation, AI/ML, Computer Science, User Support, System Administration, DevOps",Word of mouth,7,"Packages, Slack Discussions","1.0.0-alpha* pre-releases, develop (1.0.0dev0), custom fork","macOS 15 (Sequoia), Debian 11, Debian 12",100 - 200,"3.10, 3.11, 3.12","spack load, Lmod, Custom script or env vars","Environments, Module generation, Mirrors (spack mirror create / air gap support), spack external find, spack develop, concretizer:unify:true (concretize together), concretizer:unify:when_possible, spack test, spack load",No,Yes,https://gitlab.gwdg.de/mpsd-cs/mpsd-software-manager-2,"AMD, Intel, IBM Power","NVIDIA Volta, NVIDIA Ampere, NVIDIA Hopper","gcc, Classic Intel Compilers, Intel OneAPI, nvcc (CUDA)",Somewhat important,Somewhat important,Not Important,Not Important,Somewhat important,Not Important,Somewhat important,Not Important,Not Important,Not Important,Not Important,Slightly Important,Not Important,Not Important,Not Important,Not Important,,Yes,No,No,"Documentation, Coworkers, GitHub Issues, spack help, Source Code",Weekly,Probably not,Good,Good,Good,Good,"Installing software for an HPC system, for multiple architectures and microarchitectures.","Have a tool to compile stacks of spack-based software for us, expose this to users via lmod.","Flexibility, range of packages, ability to update packages.","Somewhat minor: Sometimes, merge requests (for package modifications) take a while to get through. Could there be a way to attract attention of core-developers when a merge request I ready? 

","What really annoyed me in the past was the short-lived nature of the Slack for discussions. This is potentially a fantastic resource of information and support, but the fact that messages disappear (I think that is still the case) after some time, makes it not useful as an archive. 

There has been a proposal to move to Zulip (https://github.com/spack/spack/discussions/33103) to address this. There may also be other options (doesn't need to be Zulip), but it looked to me like we are waisting our own time by not being able to see older messages. 

However, it seems the Spack-Slack now shows older messages, so we are probably on some sponsored or paid Tarif? In that case, that's good, and I use the occasion to point out  the value of being able to see and search the older messages. 

(I still think the use of `topics` in Zulip---in the same way that emails have subject lines---is better to run multiple parallel discussions and search them later, but I understand the desire not change from an existing and working system.)",,,,,,,,,
5/1/2025 23:08:32,Scientist/Researcher,University research group,Finland,"C++, Python, sh/bash/other shell script",Bioinformatics,Word of mouth,3,"No, GitHub Discussions","0.19, 0.21, 0.22",AlmaLinux 9,10 - 100,3.9,Lmod,"Module generation, spack external find, Externals in packages.yaml",No,No,No,"AMD, Intel","NVIDIA Volta, NVIDIA Ampere","gcc, nvcc (CUDA)",Somewhat important,Slightly Important,Somewhat important,Slightly Important,Somewhat important,Somewhat important,Very Important,Somewhat important,Slightly Important,Slightly Important,Slightly Important,Slightly Important,Slightly Important,Slightly Important,Somewhat important,Somewhat important,,Yes,No,No,Documentation,Yearly,Probably not,Good,OK,Good,Good,Installed packages,"We have research lab (bioinformatics, structural biology) so I have to gather applications from where-ever I can. Spack has simplified the find&build for some (but not all) applications.",,,,,,,,,,,,
5/2/2025 0:52:54,Research Software Engineer (RSE),University HPC/Computing Center,Switzerland,"C++, Python",HPC / Simulation,Presentation,5,"Packages, Core Features, Documentation, Slack Discussions, Issues","0.23, develop (1.0.0dev0)","macOS 15 (Sequoia), SLES15","> 1,000",3.13,"Spack environments, spack build-env, spack view","Environments, Chaining (upstreams), Mirrors (spack mirror create / air gap support), Build caches (making binary packages), build-env (debug a build), spack-python (Python scripting), spack external find, Externals in packages.yaml, Concretization preferences in packages.yaml, `require:` directive in packages.yaml, concretization: --reuse (default), concretization: --fresh (build everything fresh), concretizer:unify:true (concretize together), concretizer:unify:when_possible, Multiple build systems in one package, Variant/flag propagation (++, ~~, ==), Git versions",Yes -- several,My site has a front-end or extension to Spack,No,"AMD, ARM","NVIDIA Hopper, AMD MI200/250X, AMD MI300A, AMD MI300X","gcc, NVHPC, LLVM, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA)",Very Important,Somewhat important,Slightly Important,Slightly Important,Slightly Important,Slightly Important,Somewhat important,Very Important,Slightly Important,Slightly Important,Slightly Important,Slightly Important,Slightly Important,Slightly Important,Somewhat important,Somewhat important,,No,No,Yes,"Documentation, Slack, Coworkers, GitHub Issues, Source Code",Weekly,Probably not,Good,Excellent,Good,Good,Test the new compiler as a node change,,"my developer workflow, keeping organised and easily accessible my dependencies and working environment",understand concretiser messages,,,,,,,,,,
5/2/2025 1:11:53,User Support Staff,University HPC/Computing Center,Switzerland,"C++, Python, CUDA","HPC / Simulation, Visualization, User Support",Used at my site,2,Packages,0.23,Cray EX,10 - 100,3.6,https://github.com/eth-cscs/uenv2/,"Environments, Module generation, Build caches (making binary packages), concretizer:unify:true (concretize together), concretizer:unify:when_possible, Git versions",Yes -- just one,My site has a front-end or extension to Spack,No,"AMD, ARM","NVIDIA Hopper, AMD MI300A, AMD MI300X","gcc, nvcc (CUDA)",Very Important,Somewhat important,Very Important,Critical,Somewhat important,Critical,Somewhat important,Somewhat important,Somewhat important,Slightly Important,Slightly Important,Very Important,Slightly Important,Slightly Important,Very Important,Very Important,,Not sure,No,No,"Documentation, Coworkers",Monthly,Probably not,OK,Good,Good,OK,install a new version of a package with spack/0.23.1,,,make spack spec faster,,,,,,,,,,
5/2/2025 1:51:11,Research Software Engineer (RSE),University HPC/Computing Center,Switzerland,C++,HPC / Simulation,Used at my site,6,"Packages, Issues","0.23, 1.0.0-alpha* pre-releases, develop (1.0.0dev0)","macOS 15 (Sequoia), Cray EX","> 1,000","3.6, 3.10, 3.12","Spack environments, spack build-env, spack view","Environments, Build caches (making binary packages), Weekly develop snapshots on cache.spack.io, build-env (debug a build), spack external find, spack develop, concretization: --reuse (default), concretization: --fresh (build everything fresh), concretizer:unify:true (concretize together), Variant/flag propagation (++, ~~, ==), Git versions, spack load, spackbot (@spackbot fix style; @spackbot rebuild everything, etc.)",Yes -- just one,No,uenv2 (https://github.com/eth-cscs/uenv2),"AMD, Intel, ARM","NVIDIA Hopper, NVIDIA Blackwell, AMD MI200/250X, AMD MI300A","gcc, NVHPC, LLVM, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA)",Very Important,Slightly Important,Very Important,Very Important,Very Important,Critical,Very Important,Very Important,Not Important,Somewhat important,Slightly Important,Slightly Important,Not Important,Slightly Important,Very Important,Critical,,No,No,Yes,"Documentation, Coworkers, spack help",Monthly,Probably not,OK,OK,OK,Good,built environment + build-env,environments (--only=dependencies) + build-env / install ,Easier dependencies handling,Bad quality of certain spack packages,,,,,,,,,,
5/2/2025 3:28:40,System Administrator,University HPC/Computing Center,Czech Republic,"Python, sh/bash/other shell script","HPC / Simulation, AI/ML, Computer Science, Bioinformatics",Word of mouth,5,"Packages, Slack Discussions","0.23, git","Rocky 9, Arch","> 1,000","3.9, 3.11","spack load, Spack environments, Custom script or env vars","Environments, Public build caches at cache.spack.io / binaries.spack.io, Externals in packages.yaml, Concretization preferences in packages.yaml, `require:` directive in packages.yaml, `prefer:` directive in packages.yaml, concretization: --reuse (default), concretization: --fresh (build everything fresh), concretizer:unify:true (concretize together), concretizer:unify:when_possible, Git versions, spack load",No,Yes,Other script to wrap spack,"AMD, Intel",NVIDIA Other,gcc,Critical,Not Important,Very Important,Somewhat important,Somewhat important,Critical,Critical,Very Important,Somewhat important,Slightly Important,Somewhat important,Very Important,Very Important,Slightly Important,Somewhat important,Critical,,Yes,No,No,"Documentation, Slack, GitHub Issues, GitHub Discussions",Weekly,Probably not,OK,Excellent,Good,Good,Bring packages to its latest versions to fulfill our users demands.,"Install spack GIT to get the latest packages recipes (we need them apart), and install the software we are requested.","It helps with quick deployment, however, as packages evolve faster than spack, specially now that they are a single repository, it creates a mess of different spack installations. I hope that the arrival of spack 1.0 will improve this substantially, specially when packages will be moves to their own repository. Also Stabilizing the API will help developing packages as now evrytime is like learning again and again to make/modify a package.",keep up with new software. And  CUDA vs gcc nightmare software stack.,Separate packages from core spack.,"Everything is awsome, some packages outdated, but I can help there.","Thank you for your work, it is excellent and useful.",,,,,,,
5/2/2025 3:46:13,Research Software Engineer (RSE),University HPC/Computing Center,Switzerland,"C++, Python",HPC / Simulation,Used at my site,3,Packages,develop (1.0.0dev0),"Ubuntu 22, Ubuntu 24, Arch",100 - 200,"3.10, 3.13",Spack environments,"Environments, Build caches (making binary packages), OCI build caches (pushing packages to container registries), Externals in packages.yaml, concretization: --fresh (build everything fresh), concretizer:unify:true (concretize together)",No,No,No,"AMD, ARM","NVIDIA Hopper, AMD MI300X","gcc, NVHPC, nvcc (CUDA)",Very Important,Not Important,Not Important,Somewhat important,Not Important,Very Important,Not Important,Not Important,Not Important,Not Important,Not Important,Not Important,Not Important,Not Important,Not Important,Not Important,,Not sure,No,No,"Documentation, Coworkers, GitHub Issues, ChatGPT / other LLMs",Monthly,Probably not,Good,Good,Good,Good,installing a package ,"spack to setup the software stack on an hpc cluster, both in baremetal and container environments.",Ability to keep packages up-to-date & get access to the most recent features in them.,When the concretizer fails it is very hard to find out why.,"tracability of concretizer failures; standalone full fledged docker container including bash, systemd, etc.",,,,,,,,,
5/2/2025 5:24:01,System Administrator,University research group,Germany,C++,"HPC / Simulation, System Administration",Used at my site,5,"Packages, Core Features, Slack Discussions, Issues",0.23,Debian 12,10 - 100,3.11,spack load,"spack external find, Externals in packages.yaml, concretization: --reuse (default), Variant/flag propagation (++, ~~, ==), spack load, spackbot (@spackbot fix style; @spackbot rebuild everything, etc.)",Yes -- just one,No,No,"AMD, Intel","NVIDIA Ampere, NVIDIA Hopper, NVIDIA Other","gcc, Intel OneAPI, NVHPC, LLVM, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA)",Very Important,Not Important,Somewhat important,Somewhat important,Somewhat important,Very Important,Somewhat important,Very Important,Somewhat important,Slightly Important,Slightly Important,Somewhat important,Very Important,Not Important,Very Important,Very Important,,Yes,No,No,"Documentation, Slack, GitHub Issues, spack help",Monthly,No,Good,Excellent,Good,Good,Installing packages,,,,,,,,,,,,,
5/2/2025 6:49:41,DevOps/SRE,University HPC/Computing Center,United States,"Python, sh/bash/other shell script","System Administration, DevOps",Search,1,"Packages, Slack Discussions, GitHub Discussions, Issues, package updates",0.22,Ubuntu 22,100 - 200,3.1,Spack environments,"Environments, concretization: --reuse (default), concretization: --fresh (build everything fresh), Git versions",Yes -- just one,No,No,"AMD, Intel","NVIDIA Hopper, NVIDIA Other","gcc, nvcc (CUDA)",Very Important,Slightly Important,Very Important,Very Important,Somewhat important,Somewhat important,Slightly Important,Somewhat important,Slightly Important,Slightly Important,Somewhat important,Slightly Important,Not Important,Very Important,Somewhat important,Somewhat important,,Not sure,No,No,"Documentation, Slack, GitHub Issues, Source Code",Monthly,Probably not,Excellent,OK,Good,Excellent,deploying to new servers,,,,,,,,,,,,,
5/2/2025 6:54:15,User Support Staff,"DOE/Office of Science Lab (e.g., ORNL/ANL/LBL)",United States,"C, C++, Python, sh/bash/other shell script","HPC / Simulation, AI/ML, Computer Science, User Support, System Administration",Used at my site,0,No,"0.22, 0.23",SLES15,"> 1,000","3.6, 3.10, 3.11",Lmod,"Environments, Module generation, Stacks (matrices in environments), Mirrors (spack mirror create / air gap support), Build caches (making binary packages)",No,My site has a front-end or extension to Spack,No,AMD,AMD MI200/250X,"gcc, LLVM, AMD ROCmCC (amdclang/hipcc), CCE (Cray Compilers)",Very Important,Slightly Important,Slightly Important,Slightly Important,Slightly Important,Somewhat important,Somewhat important,Very Important,Slightly Important,Slightly Important,Slightly Important,Somewhat important,Slightly Important,Slightly Important,Slightly Important,Critical,,Not sure,No,No,"Documentation, Coworkers, GitHub Issues",Weekly,Probably,Good,Excellent,OK,Good,Install an HPC system software stack,,,Packages which are not updated to support most recent compilers/releases etc,,,,,,,,,,
5/2/2025 7:23:20,User Support Staff,"DOE/Office of Science Lab (e.g., ORNL/ANL/LBL)",United States,"C++, Python, sh/bash/other shell script, Non-programmer","HPC / Simulation, AI/ML, Compiler Testing, User Support, System Administration, System/User Environment ",Used at my site,2,"No, Working on spackage ",0.23,"macOS 15 (Sequoia), RHEL9, SLES15, openSuSE",100 - 200,"3.11, 3.13","Spack environments, Lmod","Environments, Module generation, Externals in packages.yaml",Yes -- just one,No,No,"AMD, Intel, ARM","NVIDIA Ampere, NVIDIA Hopper, NVIDIA Other, AMD MI200/250X, AMD MI300A, AMD MI300X","gcc, NVHPC, LLVM, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA), CCE (Cray Compilers)",Critical,Somewhat important,Very Important,Very Important,Critical,Very Important,Critical,Critical,Very Important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Very Important,Very Important,Somewhat important,"1. Spack being able to find external libs or apps needed for dependencies based on the users current environment or a set of paths defined by the user
2. Easier way to build the same package with different compilers; this can be done but it seems cumbersome and half the I will see dependencies get mixed up in a package build mix matching compilers. For example, If I build package A %gcc@13 and that package has dependency on Package/Lib XZ built also against gcc@13. Then when I go and build package A again except this time with %cce@18 it will use Package/Lib XZ built against gcc@13. Maybe this is user error, however it has caused alot of frustration when trying build up my own software spack environment. 
3. Better error handling, it can be hours of rabbit hunting to figure out what is causing a build failure. I use spack environments and most of the time I end up just destroying and recreating an environment...depending on the issue",Yes,No,Yes,"Documentation, Slack, Coworkers, GitHub Issues, GitHub Discussions, spack help, ChatGPT / other LLMs",Weekly,Probably,Good,Good,Good,Excellent,Installing the application WRF with spack. I had to mod the package to accept building with CCE since it did not have that ability in the python package. ,"I use Spack to build applications that tend to be quite cumbersome to go out and start building from scratch. Perfect example, I was building WRF from source and this required so MANY dependency builds to go along with it, that it was exhausting. I believe one of them was hdf5 and that is a large build in of itself. I use spack alot for testing user issues or trying to isolate environment issues with different package versions. ","The speed gained from using spack when building large packages is consequential. In addition sometimes trying to build a package manually will fail at certain parts for various reasons and then you go and create a spack environment, perform a spack add with some configuration, spack install and 1 hour later ~, you're off to the races using the package. ","Error handling when builds fail
using current environment as externals
Building an application with different compilers to test functionality
","Develop an AI chatbot to help with issues. Chatgpt does a decent job, however I can only imagine how awesome a chatbot trained specifically on the spack docs, support tickets, slack channel would perform 1000X better. ",Vampir - This is an easy enough manual build but could be an easy spackage,Keep up the good work!,,,,,,,
5/2/2025 7:23:35,Research Software Engineer (RSE),Cloud Provider,United States,"C++, Python, R, sh/bash/other shell script, Javascript","Statistics / Data Analysis, AI/ML, Bioinformatics, Web applications, Visualization, System Administration",Word of mouth,3,"Packages, Slack Discussions, GitHub Discussions, Issues","0.23, 1.0.0-alpha* pre-releases, develop (1.0.0dev0)","macOS 15 (Sequoia), Ubuntu 22, Ubuntu 24, Debian 12, Amazon Linux, Alpine","> 1,000","3.11, 3.12, 3.13","Spack environments, Containers","Environments, spack containerize, Chaining (upstreams), Mirrors (spack mirror create / air gap support), Build caches (making binary packages), Public build caches at cache.spack.io / binaries.spack.io, build-env (debug a build), spack-python (Python scripting), spack external find, Externals in packages.yaml, Concretization preferences in packages.yaml, `require:` directive in packages.yaml, `prefer:` directive in packages.yaml, spack develop, concretization: --reuse (default), concretization: --fresh (build everything fresh), concretizer:unify:true (concretize together), Variant/flag propagation (++, ~~, ==), Git versions, spack load, spackbot (@spackbot fix style; @spackbot rebuild everything, etc.), spack deconcretize",Yes -- several,No,Other script to wrap spack,"AMD, Intel, ARM",AMD MI200/250X,"gcc, LLVM, AMD ROCmCC (amdclang/hipcc), armclang",Very Important,Slightly Important,Critical,Very Important,Somewhat important,Critical,Somewhat important,Somewhat important,Slightly Important,Critical,Somewhat important,Somewhat important,Very Important,Very Important,Somewhat important,Critical,,Yes,Maybe,No,"Documentation, Slack, GitHub Issues, GitHub Discussions, spack help, Source Code",Weekly,Probably,Good,Excellent,Good,Excellent,"Build a common set of tools in a new, minimal, air-gapped environment. During that I found a number of dependencies that were missing from some packages so I am updating and opening PRs.","We have multiple use cases spack addresses:
 - diverse hpc-heavy users with many one-off program requirements
 - heavily managed software stack that needs to be built on multiple platforms
 - documentation of how to actually build some difficult packages
 - as a managed way to cache and install software inside air-gapped workspaces",The community ,"Challenges working in airgaps, especially when packages have their own methods of  downloading dependencies. 
And waiting on PRs to get approved :-)",,"Lots, and I'll keep opening PRs as I can.",,,,,,,,
5/2/2025 7:40:54,Research Software Engineer (RSE),Other Public Research Lab,United States,"Fortran, C, C++, Python, sh/bash/other shell script","HPC / Simulation, AI/ML, DevOps, Numerical Weather Prediction",Used at my site,7,"Packages, Slack Discussions, Issues","0.23, develop (1.0.0dev0), custom fork","macOS 15 (Sequoia), RHEL9, Rocky 9, AlmaLinux 9, Ubuntu 24, Amazon Linux, Cray EX, Cray XD","> 1,000","3.11, 3.12, 3.13","Spack environments, Lmod, Environment Modules (TCL modules), spack view, Containers","Environments, Module generation, Stacks (matrices in environments), Mirrors (spack mirror create / air gap support), Build caches (making binary packages), Public build caches at cache.spack.io / binaries.spack.io, spack external find, Externals in packages.yaml, Concretization preferences in packages.yaml, `require:` directive in packages.yaml, `prefer:` directive in packages.yaml, concretization: --reuse (default), concretization: --fresh (build everything fresh), concretizer:unify:when_possible, Variant/flag propagation (++, ~~, ==), Git versions, spack diff (compare two specs)",Yes -- several,My site has a front-end or extension to Spack,spack-stack (https://github.com/JCSDA/spack-stack),"AMD, Intel","NVIDIA T4, NVIDIA Volta, NVIDIA Ampere, NVIDIA Hopper, NVIDIA Blackwell, Azure Maia","gcc, Classic Intel Compilers, Intel OneAPI, NVHPC, LLVM, CCE (Cray Compilers)",Very Important,Slightly Important,Somewhat important,Somewhat important,Very Important,Somewhat important,Very Important,Very Important,Very Important,Somewhat important,Somewhat important,Somewhat important,Very Important,Somewhat important,Somewhat important,Somewhat important,,Not sure,No,No,"Documentation, Slack, Coworkers, GitHub Issues, GitHub Discussions, Source Code",Weekly,Probably not,Good,Excellent,Good,Excellent,Write package recipes for local software repositories,Build / install environments to support weather / climate research and operations,Minimized dev environment tooling and increased ability to support multiple versions of packages and tools across groups,Concretization error messaging (reasons why concretization fails),,,,,,,,,,
5/2/2025 7:52:18,DevOps/SRE,"DOE/NNSA Lab (e.g., LLNL/LANL/SNL)",United States,"Python, sh/bash/other shell script","HPC / Simulation, Computer Science, Compiler Testing, System Administration",Used at my site,1,"Slack Discussions, GitHub Discussions, Issues","0.19, 0.20, 0.21, 0.22, 0.23, develop (1.0.0dev0)",RHEL 8,200 - 500,"3.9, 3.10, 3.11, 3.12, 3.13","spack load, Spack environments, Lmod, Environment Modules (TCL modules), Containers","Environments, Module generation, Stacks (matrices in environments), Mirrors (spack mirror create / air gap support), Build caches (making binary packages), Externals in packages.yaml, Concretization preferences in packages.yaml, spack load",Yes -- just one,Yes,,"AMD, Intel, IBM Power, ARM","NVIDIA T4, NVIDIA Volta, NVIDIA Ampere, NVIDIA Hopper, NVIDIA Blackwell, NVIDIA Other, AMD MI100, AMD MI200/250X, AMD MI300A, AMD MI300X","gcc, Classic Intel Compilers, Intel OneAPI, LLVM, nvcc (CUDA)",Slightly Important,Not Important,Not Important,Not Important,Slightly Important,Critical,Very Important,Somewhat important,Slightly Important,Slightly Important,Slightly Important,Slightly Important,Slightly Important,Slightly Important,Somewhat important,Very Important,,Not sure,No,No,"Documentation, Slack, Coworkers, GitHub Issues, GitHub Discussions, Source Code",Weekly,"Yes, definitely!",OK,OK,OK,OK,Tried integrating it with an a security anaysis tool that inserts itself into the build process.,,,,,,,,,,,,,
5/2/2025 8:18:22,User Support Staff,"DOE/Office of Science Lab (e.g., ORNL/ANL/LBL)",United States,"Fortran, C, C++, Python, Lua","HPC / Simulation, User Support",Used at my site,2,Slack Discussions,"0.22, 0.23, develop (1.0.0dev0)",SLES15,"> 1,000","3.6, 3.7",Lmod,"Environments, Module generation, Stacks (matrices in environments), Mirrors (spack mirror create / air gap support), Build caches (making binary packages), Public build caches at cache.spack.io / binaries.spack.io, E4S build caches (https://e4s.io), Externals in packages.yaml, `require:` directive in packages.yaml, `prefer:` directive in packages.yaml",No,My site has a front-end or extension to Spack,No,AMD,"AMD MI100, AMD MI200/250X, AMD MI300A, AMD MI300X, No GPUs","gcc, Intel OneAPI, LLVM, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA), CCE (Cray Compilers)",Very Important,Not Important,Not Important,Slightly Important,Very Important,Very Important,Very Important,Critical,Not Important,Slightly Important,Slightly Important,Not Important,Critical,Not Important,Critical,Critical,,Yes,No,Yes,"Documentation, Slack, Coworkers, GitHub Issues, GitHub Discussions, spack help, Source Code, Weekly Telecons, ChatGPT / other LLMs",Daily,Probably,Excellent,Excellent,Excellent,Excellent,Installing packages and patching spackages to add new functionality for our site,"We use Ansible to generate .yaml files and patches for spackages and Spack itself, then concretize and install.",Ease of use,Mystic error messages,More detailed error messages and/or stack traces,,,,,,,,,
5/2/2025 8:20:23,Computational Scientist,"DOE/NNSA Lab (e.g., LLNL/LANL/SNL)",United States,"Python, sh/bash/other shell script",HPC / Simulation,Word of mouth,2,No,0.23,"macOS 15 (Sequoia), RHEL9",10 - 100,3.1,spack load,"Environments, Module generation, Build caches (making binary packages)",No,No,No,"AMD, Intel, IBM Power","NVIDIA Volta, NVIDIA Ampere, NVIDIA Hopper, NVIDIA Blackwell, AMD MI200/250X, Intel Xe (Ponte Vecchio), Intel Gaudi","gcc, Intel OneAPI, NVHPC, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA)",Very Important,Somewhat important,Critical,Critical,Very Important,Very Important,Somewhat important,Critical,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,,Yes,Maybe,No,"Documentation, Slack",Monthly,No,Good,Good,Good,Good,Installing flux on another server outside of LLNL.,It has been primarily to install flux but I have used it to install compilers as well.,The ability to install flux in a specific environment has been great. I've attempted to do it by hand and failed while spack was able to do it right away.,"Sometimes still can't compile right away and needs to be massaged. For instance, I'll need to install a specific dependency first and then install the desired package because something wasn't detected correctly.",Update the public library for installing packages as many seem to be behind several versions.,,,,,,,,,
5/2/2025 8:43:14,Computational Scientist,"DOE/Office of Science Lab (e.g., ORNL/ANL/LBL)",United States,"C++, Python, sh/bash/other shell script","HPC / Simulation, AI/ML, Computer Science, Visualization, User Support, System Administration, DevOps",Word of mouth,10,"Packages, Core Features, Slack Discussions, GitHub Discussions, Issues, Tools/integrations",develop (1.0.0dev0),"macOS 10.15 (Catalina), RHEL 8, CentOS 7, Ubuntu 20, Ubuntu 22, Ubuntu 24","> 1,000","3.10, 3.11, 3.12","spack load, Spack environments, Environment Modules (TCL modules), spack build-env, Containers","Environments, Module generation, Stacks (matrices in environments), build-env (debug a build), Externals in packages.yaml, Concretization preferences in packages.yaml, `require:` directive in packages.yaml, `prefer:` directive in packages.yaml, Distributed Builds (srun/mpirun spack install), spack develop, concretization: --fresh (build everything fresh), concretizer:unify:when_possible, Multiple build systems in one package, spack load, spackbot (@spackbot fix style; @spackbot rebuild everything, etc.), E4S containers (https://e4s.io)",Yes -- just one,Yes,spack manager (https://sandialabs.github.io/spack-manager/),"AMD, Intel, ARM","NVIDIA Ampere, NVIDIA Hopper, NVIDIA Blackwell, AMD MI200/250X, AMD MI300A, AMD MI300X","gcc, Intel OneAPI, LLVM, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA)",Very Important,Slightly Important,Slightly Important,Slightly Important,Somewhat important,Somewhat important,Slightly Important,Somewhat important,Slightly Important,Somewhat important,Slightly Important,Somewhat important,Not Important,Slightly Important,Slightly Important,Slightly Important,,Yes,No,No,"Documentation, Slack, GitHub Issues, Source Code",Monthly,Probably not,Good,Excellent,OK,Good,I mostly develop software using Spack and I deploy software on lots of different machines.,I use Spack mostly with spack-manager/exawind-manager to automate rebuilding my applications on several different machines.,Spack makes building and developing our software consistent between developers and machines.,"If we were to ever use Spack without a frontend like spack-manager, I think there would need to be some way to have Spack fingerprint a machine and automatically use configuration files I have for that machine. The convenience of an extension doing that is too good where I always see myself using an extension.","I think the complexity of package files is becoming problematic. Some people seem annoyed at the deprecation rate of package versions in Spack, but keeping the logic for all the necessary patches and workarounds seems unsustainable. I would much prefer the latest versions of packages be robust rather than care much about things like reproducibility, since I think reproducibility is generally impossible. My biggest time sink in using Spack is still how often packages break when building or concretizing and I need to submit PRs to implement workarounds and now the package logic with all these workarounds from over the years is getting difficult.",,,,,,,,,
5/2/2025 9:17:13,DevOps/SRE,"DOE/Office of Science Lab (e.g., ORNL/ANL/LBL)",United States,"C++, Python","HPC / Simulation, DevOps",Used at my site,7,"Packages, Documentation, Slack Discussions, Issues, Spack Community Zoom Meetings","0.18, 0.23","RHEL 8, Rocky 9","> 1,000","3.10, 3.11","Lmod, Environment Modules (TCL modules)","Environments, Module generation, Stacks (matrices in environments), Build caches (making binary packages), Public build caches at cache.spack.io / binaries.spack.io, spack external find, Externals in packages.yaml, Concretization preferences in packages.yaml, `require:` directive in packages.yaml, concretization: --reuse (default), concretization: --fresh (build everything fresh), concretizer:unify:true (concretize together), concretizer:unify:when_possible",Yes -- just one,My site has a front-end or extension to Spack,No,"AMD, Intel, ARM","NVIDIA Volta, NVIDIA Hopper, AMD MI200/250X, AMD MI300X","gcc, Intel OneAPI, nvcc (CUDA)",Critical,Slightly Important,Slightly Important,Not Important,Critical,Somewhat important,Slightly Important,Critical,Not Important,Not Important,Somewhat important,Slightly Important,Slightly Important,Not Important,Slightly Important,Not Important,,Not sure,No,Yes,"Documentation, Slack, Coworkers, GitHub Issues, spack help, ChatGPT / other LLMs",Weekly,No,Good,Excellent,Good,Good,Build and deploy a software stack for a project,We deploy software for a group of projects on multiple systems.,Environments,Finding compiler error messages in long logs.,,,Thank you for all you do.,,,,,,,
5/2/2025 9:27:08,DevOps/SRE,"DOE/NNSA Lab (e.g., LLNL/LANL/SNL)",United States,"Fortran, C++",HPC / Simulation,Word of mouth,6,"Packages, Slack Discussions, Issues","0.23, develop (1.0.0dev0)","RHEL 8, Ubuntu 24, SLES15, Windows Subsystem for Linux (WSL)",100 - 200,3.12,"Lmod, Custom script or env vars","Environments, Module generation, Mirrors (spack mirror create / air gap support), spack external find, Cray PE support (spack external read-cray-manifest), Externals in packages.yaml, Concretization preferences in packages.yaml, spack develop, concretization: --fresh (build everything fresh), concretizer:unify:true (concretize together), Variant/flag propagation (++, ~~, ==), spack test, spack load",Yes -- several,No,No,"AMD, Intel, ARM","NVIDIA Volta, NVIDIA Hopper, NVIDIA Blackwell, AMD MI300X","gcc, Classic Intel Compilers, Intel OneAPI, NVHPC, LLVM, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA), CCE (Cray Compilers), armclang",Somewhat important,Not Important,Not Important,Not Important,Somewhat important,Critical,Somewhat important,Somewhat important,Not Important,Not Important,Not Important,Not Important,Not Important,Very Important,Critical,Somewhat important,NA,Not sure,No,Yes,"Documentation, Slack, Coworkers, GitHub Issues",Monthly,Probably not,Good,Good,Good,Good,Installed LLVM on sles15.,,,(1) It is rare that I can build a full environment (~200 packages) without tweaking recipes manually.  (2) I often encounter packages that need internet access when building on an air-gap machine.,"Improve parallel build features to reduce build-out time, especially on compute nodes;  Better air-gap support.",NA,,,,,,,,
5/2/2025 9:40:50,Software Developer,"DOE/NNSA Lab (e.g., LLNL/LANL/SNL)",United States,"Fortran, C++, Python","HPC / Simulation, AI/ML, Visualization",Used at my site,10,"Packages, Slack Discussions, Issues","0.23, custom fork","macOS 13 (Ventura), macOS 14 (Sonoma), Ubuntu 20, Ubuntu 22, Ubuntu 24",200 - 500,"3.9, 3.10",Custom script or env vars,Environments,Yes -- several,No,uberenv,"AMD, Intel, ARM","NVIDIA Ampere, NVIDIA Hopper, NVIDIA Blackwell, AMD MI200/250X, AMD MI300A, AMD MI300X, Intel Xe (Ponte Vecchio)","gcc, Intel OneAPI, LLVM, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA), CCE (Cray Compilers)",Very Important,Not Important,Slightly Important,Somewhat important,Somewhat important,Very Important,Slightly Important,Very Important,Somewhat important,Not Important,Slightly Important,Somewhat important,Not Important,Slightly Important,Slightly Important,Somewhat important,,Not sure,No,Yes,"Documentation, Slack, Coworkers, GitHub Issues",Yearly,No,Good,Good,Good,Good,update package recipe,automated tpl builds for software development processes and CI,breadth of package recipes,churn and opaque error messages,error messages and concretizer stability ,anari sdk,,,,,,,,
5/2/2025 10:39:51,Software Developer,"DOE/Office of Science Lab (e.g., ORNL/ANL/LBL)",United States,"C++, Python",Statistics / Data Analysis,Word of mouth,2,"Slack Discussions, Spack User Meeting Talk",0.23,"RHEL 7, RHEL9",10 - 100,"3.9, 3.11",Spack environments,"Environments, Build caches (making binary packages), Concretization preferences in packages.yaml",Yes -- just one,No,No,"AMD, Intel",NVIDIA Other,gcc,Somewhat important,Not Important,Critical,Critical,Very Important,Slightly Important,Slightly Important,Slightly Important,Very Important,Slightly Important,Slightly Important,Somewhat important,Not Important,Not Important,Slightly Important,Very Important,,Yes,"Yes, I'm presenting!",No,Slack,Weekly,Probably,OK,Excellent,Good,Excellent,Creating environments,Creating environments that users develop their code in,"Easy to work with sytem packages, particularly GPUs",Lack of packages,Add more packages,Rogue (from SLAC),Keep up the good work!,,,,,,,
5/2/2025 10:42:35,Research Software Engineer (RSE),Company,United States,Python,"HPC / Simulation, System Administration",Search,0,Slack Discussions,0.23,"RHEL 8, RHEL9",1 - 10,"3.10, 3.11, 3.12, 3.13","spack load, Spack environments, Lmod, Containers","Environments, Module generation, spack containerize, Build caches (making binary packages), OCI build caches (pushing packages to container registries), spack external find, Externals in packages.yaml, Concretization preferences in packages.yaml",Yes -- just one,No,No,"AMD, Intel",NVIDIA Ampere,"gcc, Classic Intel Compilers, Intel OneAPI, LLVM, aocc",Somewhat important,Not Important,Slightly Important,Slightly Important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Not Important,Slightly Important,Not Important,Not Important,Not Important,Slightly Important,Slightly Important,Very Important,,Yes,No,No,"Documentation, Slack, GitHub Issues, ChatGPT / other LLMs",Weekly,Probably not,Good,Good,Good,Excellent,"Built NASA CFD software (Fortran) with AOCC, OpenMPI and external (OpenHPC-provided) libfabric.","I am considering using spack to deploy shared HPC software. I currently use it to test performance with alternative compilers/libraries. I have also experimented with building Docker container images directly, to be run with singularity + e4s-cl.","The ability to experiment with different compilers including Intel Classic, AOCC, etc.",,,,,,,,,,,
5/2/2025 10:58:03,Computational Scientist,University research group,Germany,C++,HPC / Simulation,I do not remember.,7,"Packages, Issues",0.23,"macOS 15 (Sequoia), CentOS 6, Ubuntu 24",100 - 200,3.9,"Spack environments, Lmod, Environment Modules (TCL modules)","Environments, Module generation, Externals in packages.yaml, concretization: --fresh (build everything fresh)",No,No,No,"AMD, Intel, ARM",NVIDIA Other,"gcc, LLVM",Critical,Not Important,Slightly Important,Slightly Important,Somewhat important,Slightly Important,Somewhat important,Slightly Important,Not Important,Not Important,Not Important,Not Important,Not Important,Not Important,Very Important,Very Important,Tutorials on how to use spack to deploy software to clusters for multiple end users,Yes,"Yes, I'm attending",Yes,"Documentation, GitHub Issues, Source Code",Monthly,No,Good,Good,Excellent,Good,Providing the software stack on our internal computing cluster for all users,I need to provide a series of packages to create a development environment for our internal Trilinos-based C++ multiphysics research code.,Automated installation of many packages with interdependencies (instead of manually installing multiple packages and having to take care of their interplay myself),,Add tutorials for system administrators on how to use and especially update spack installations.,,,,,,,,,
5/2/2025 11:40:29,Research Software Engineer (RSE),University HPC/Computing Center,United States,"C, C++, Python","Computer Science, Web applications, User Support",Used at my site,5,"Slack Discussions, Spack Community Zoom Meetings","0.15, develop (1.0.0dev0)","RHEL 8, Rocky 9, Debian 12",1 - 10,"3.6, 3.11",Spack environments,"Environments, Module generation, Stacks (matrices in environments), Mirrors (spack mirror create / air gap support), Build caches (making binary packages), Weekly develop snapshots on cache.spack.io, Public build caches at cache.spack.io / binaries.spack.io, E4S build caches (https://e4s.io)",Yes -- just one,No,No,"AMD, Intel","NVIDIA Volta, NVIDIA Ampere","gcc, Intel OneAPI, NVHPC, LLVM, nvcc (CUDA)",Very Important,Somewhat important,Very Important,Very Important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Pre-built packages optimized for x86-64-v3 and x86-64-v4,Not sure,Maybe,Yes,"Documentation, Slack, Mailing List, Coworkers, GitHub Issues, Source Code, Weekly Telecons, ChatGPT / other LLMs",Daily,Probably not,Good,Excellent,Good,Good,Installing packages,Building next software stack for our HPC cluster,Scripting automated installations for users unable to do their own one-off installations or installing dependencies to complement conda under the user's ~/work directory,,"Offer working rhel8 and rocky9 public binary caches optimized for x86-64-v{3,4}",Not there yet. I'm still at the beginning of building our next HPC software stack with Spack.,"A  non-packaged software stack substituted the previous stack built with Spack justified by the maintenance time involved, to add new packages or versions to the main stack. Unable to trace dependencies with this non-packaged software stack, we are back to building our next stack with a package manager. EESSI is a close competitor, however we have not used it on our cluster before and there still are people with Spack experience in the group.",,,,,,,
5/2/2025 11:53:31,"Chief Research Engineer, Sysadmin, Researcher, Support staff",Simula Research Laboratory AS,Norway,"Fortran, C, C++, Python, Julia, Rust, Go, R, sh/bash/other shell script, Javascript, Java, Ruby, MATLAB, C#, Lua, Scheme, Zig, I answered based on what people use on the eX3 heterogeneous cluster","HPC / Simulation, Statistics / Data Analysis, AI/ML, Computer Science, Bioinformatics, Compiler Testing, Visualization, Embedded Systems, User Support, System Administration, Quantum, DevOps, Xilinx FPGA programming (Vivado, Virtis)",Birds-of-a-feather (BOF) at conference,3,Issues,0.23,Ubuntu 22,100 - 200,3.1,Environment Modules (TCL modules),"Environments, Module generation, Build caches (making binary packages), spack load",No,Yes,No,"AMD, Intel, ARM, RISC-V","NVIDIA T4, NVIDIA Volta, NVIDIA Ampere, NVIDIA Hopper, AMD MI100, AMD MI200/250X, Intel Xe (Ponte Vecchio), Intel Gaudi, Graphcore IPUPOD64 (GC-200)","gcc, Classic Intel Compilers, Intel OneAPI, NVHPC, LLVM, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA), armclang",Very Important,Slightly Important,Very Important,Very Important,Very Important,Critical,Critical,Critical,Very Important,Slightly Important,Somewhat important,Somewhat important,Slightly Important,Very Important,Critical,Somewhat important,"Universal binaries using llvm-lipo per architecture. Want to be able to define all Aarch64 ISAs I have in cluster, as well as support x86_64/Amd64 with AVX2 and up. ",Yes,No,No,"Documentation, Mailing List, GitHub Issues, spack help",Weekly,Probably not,Good,Good,OK,OK,FEniCS doesn't build under 0.23.1,module use /cm/shared/spack-modules/modulefiles ; module load spack/0.23.1; umask 0002 ; newgroup spack-admin   then install packages.,Getting some researchers/scientist up and running on some software.,Better handling when you install new versions of spack. Not fond of the  hash versioning. Ref.: e.g. https://github.com/spack/spack/issues/1325,Fix the above versioning issue. And group install issue.,Working FEniCS.,Great work. Looking forward to 1.0,,,,,,,
5/2/2025 12:53:16,Consultant / DevOps / HPC Admin,Company,United States,sh/bash/other shell script,"HPC / Simulation, Bioinformatics, User Support, System Administration, DevOps",Used at my site,0,No,"0.22, 0.23","RHEL9, Rocky 9, Ubuntu 24, Amazon Linux",10 - 100,"3.12, 3.13","Spack environments, Lmod","Environments, Module generation, concretization: --reuse (default), spack load",No,No,No,"AMD, Intel, ARM, ","NVIDIA T4, NVIDIA Volta, NVIDIA Ampere, NVIDIA Hopper, NVIDIA Blackwell, NVIDIA Other","gcc, Classic Intel Compilers",Critical,Not Important,Critical,Very Important,Somewhat important,Not Important,Somewhat important,Somewhat important,Very Important,Not Important,Very Important,Not Important,Not Important,Not Important,Not Important,Not Important,,No,No,Yes,"Documentation, spack help, ChatGPT / other LLMs",Yearly,Probably not,Bad,OK,Bad,Bad,Installing packages,Shared packages across HPC nodes,.,I tend to have more success with Easybuild. Packages tend to build the first time or with minimal fuss compared to Spack.,Making the package build process more reliable,.,.,,,,,,,
5/2/2025 14:21:53,System Administrator,Other Public Research Lab,United States,"C, Perl, sh/bash/other shell script, Lua, PHP","HPC / Simulation, Computer Science, Bioinformatics, Web applications, User Support, System Administration",from colleagues,1,No,0.23,"RHEL 7, RHEL 8, CentOS 7, CentOS 8, Rocky 8",10 - 100,3.1,"Spack environments, Lmod, Environment Modules (TCL modules)","Environments, Module generation, spack containerize, concretization: --fresh (build everything fresh)",No,No,No,N/A,N/A,N/A,Somewhat important,Somewhat important,Critical,Critical,Somewhat important,Somewhat important,Critical,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Critical,Somewhat important,,Not sure,No,Yes,Documentation,Daily,No,OK,OK,OK,OK,Installed R package.,,,,,,,,,,,,,
5/2/2025 17:58:13,Research Software Engineer (RSE),"DOE/Office of Science Lab (e.g., ORNL/ANL/LBL)",United States,"Go, Javascript, Ruby","Web applications, User Support, DevOps",Used at my site,0,Packages,develop (1.0.0dev0),macOS 15 (Sequoia),10 - 100,3.9,Spack environments,"Environments, concretizer:unify:true (concretize together)",No,No,No,ARM,No GPUs,gcc,Very Important,Not Important,Slightly Important,Somewhat important,Slightly Important,Somewhat important,Not Important,Not Important,Slightly Important,Somewhat important,Not Important,Not Important,Not Important,Not Important,Not Important,Slightly Important,,Yes,No,No,"Documentation, Slack, Coworkers",Monthly,Probably,OK,Good,Good,Good,Set up an environment using Spack,,It has simplified managing environments for various projects,,,,As a fairly new Spack user I don't use Spack often enough to know what all it's capable of; I think attending a tutorial in the future will help with that,,,,,,,
5/2/2025 23:50:27,Scientist/Researcher,University research group,Norway,"Fortran, C, C++, Python, Julia",HPC / Simulation,Tutorial,6,"No, Slack Discussions","0.22, 0.23",Debian 12,100 - 200,3.12,"Lmod, spack view","Environments, Module generation, Stacks (matrices in environments), Build caches (making binary packages), spack external find, Concretization preferences in packages.yaml, concretization: --reuse (default), concretizer:unify:true (concretize together)",No,No,No,Intel,"NVIDIA Ampere, NVIDIA Other","gcc, Classic Intel Compilers, Intel OneAPI, nvcc (CUDA)",Very Important,Not Important,Slightly Important,Slightly Important,Very Important,Critical,Very Important,Somewhat important,Slightly Important,Somewhat important,Very Important,Slightly Important,Somewhat important,Very Important,Very Important,Somewhat important,,Yes,No,Yes,"Documentation, Slack, Mailing List, GitHub Issues, GitHub Discussions",Weekly,Probably not,Good,Excellent,Good,Good,Updated the software stack,,,,,,,,,,,,,
5/3/2025 19:58:59,DevOps/SRE,Company,France,"Python, sh/bash/other shell script",HPC / Simulation,Word of mouth,5,"Packages, Issues",latest snapshot release what,"macOS 14 (Sonoma), RHEL 8, RHEL9","> 1,000","3.7, 3.9",,"Environments, Stacks (matrices in environments), Mirrors (spack mirror create / air gap support), Build caches (making binary packages), Weekly develop snapshots on cache.spack.io, OCI build caches (pushing packages to container registries), spack ci (GitLab pipeline generation -- yourself, not on our CI)",Yes -- just one,No,,ARM,AMD MI300X,"gcc, Intel OneAPI, NVHPC, LLVM, AMD ROCmCC (amdclang/hipcc), nvcc (CUDA), IBM XL, CCE (Cray Compilers), Fujitsu Compilers",Very Important,Somewhat important,Not Important,Somewhat important,Critical,Very Important,Very Important,Very Important,Very Important,Somewhat important,Very Important,Somewhat important,Somewhat important,Not Important,Somewhat important,Very Important,,Not sure,No,No,"Slack, Coworkers",Weekly,No,Good,Excellent,Good,Good,Updated the compilers.yaml to packages.yaml (at least tried). Populate a container registry with Spack buildcache.,I use Spack to unify how softare is CI among different projects.,oci buildcache,Troubles enforcing 1 compiler across the dependency tree. Still has problems with managing flags. Now has issues to define hybrid compilers.,Solve issue preventing to concretize with the specified compilers across dependencies.,,,,,,,,,
5/4/2025 2:34:42,Software Developer,University research group,Bangladesh,"C++, Python, Javascript","HPC / Simulation, Computer Science",Search,0,Packages,develop (1.0.0dev0),"macOS 15 (Sequoia), Ubuntu 22, Ubuntu 24, Arch, Alpine",1 - 10,"3.10, 3.11, 3.12, 3.13","spack load, Spack environments, Containers","Environments, spack containerize, spack external find, Externals in packages.yaml, `require:` directive in packages.yaml, `prefer:` directive in packages.yaml, concretizer:unify:true (concretize together), concretizer:unify:when_possible, Multiple build systems in one package, Variant/flag propagation (++, ~~, ==), Git versions, spack load",Yes -- just one,No,No,"AMD, Intel, ARM",No GPUs,"gcc, LLVM, nvcc (CUDA)",Critical,Not Important,Very Important,Slightly Important,Slightly Important,Very Important,Slightly Important,Somewhat important,Not Important,Slightly Important,Slightly Important,Slightly Important,Somewhat important,Slightly Important,Somewhat important,Critical,More verbose and explicit error messages for concretization failures.,Yes,No,No,"Documentation, Slack, GitHub Issues, GitHub Discussions, ChatGPT / other LLMs",Weekly,Probably,Excellent,Excellent,Good,Good,Submitted a new package (crow),,"One of the dependencies of a CMake-based C++ project I’m working on depends on PETSc.  We were using vcpkg, but it doesn’t have PETSc, and neither do Conan, Xmake, or build2, so I spent weeks trying to create PETSc packages for vcpkg and Conan with no success and then gave up.  I eventually stumbled upon Spack and not only did it have PETSc but I also really liked it’s package recipe format, to the point that I decided to create Spack packages for all the other dependencies of the project that Spack’s builtin repo didn’t have.","Spack failing to bootstrap on Alpine Linux, which I want to use as the container instead of Ubuntu: https://github.com/spack/spack/issues/26394","1. Explicitly mention the reason for failure when an environment’s specs fail to concretize, so the user can know what to change in the specs to make it pass.
2. Allow requiring (in spack.yaml) repositories directly from remote Git repositories without having to download them to disk first.",GridPACK (https://github.com/GridOPTICS/GridPACK) and uWebSockets (https://github.com/uNetworking/uWebSockets),Thanks creating and maintaining Spack!,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,