Timestamp,What kind of user are you?,Where do you work?,What country are you in?,Are you part of the U.S. Exascale Computing Project (ECP)?,What languages do you primarily program in?,What are your primary application areas?,How did you find out about Spack?,How long have you been using Spack?,Have you contributed to Spack?,What version(s) of Spack do you use?,What OS do you use Spack on?,How many software installations have you done with Spack in the past year?,What Python version(s) do you use to run Spack?,How bad would it be if Spack dropped support for Python 2?,How do you get installed Spack packages into your environment?,Which of the following Spack features do you use?,Do you have local Spack package repositories?,Do you have any local modifications to Spack itself?,Which processors do you expect to use with Spack in the next year?,Which GPUs do you expect to use with Spack in the next year?,Which compilers do you expect to use with Spack in the next year?,Rank these TBD Spack features by importance [Better error messages],Rank these TBD Spack features by importance [Compilers as proper dependencies],"Rank these TBD Spack features by importance [Separate concretization of build dependencies (build build tools with gcc/clang, not fancy compilers)]","Rank these TBD Spack features by importance [Optimized, public binary packages]",Rank these TBD Spack features by importance [Build testing for every PR],"Rank these TBD Spack features by importance [Language virtual dependencies (e.g., depends_on(""cxx@2017:""))]",Rank these TBD Spack features by importance [Testing / integration with Pavilion2/ReFrame/other test tool],Rank these TBD Spack features by importance [Better compiler flag handling],Rank these TBD Spack features by importance [Windows Support],Rank these TBD Spack features by importance [Autodetection of system packages],Rank these TBD Spack features by importance [Performance/speed improvements],Rank these TBD Spack features by importance [More reproducibility for environments],Rank these TBD Spack features by importance [Better GPU compiler support],Rank these TBD Spack features by importance [Generate GitHub Actions pipelines + build caches],Rank these TBD Spack features by importance [More developer features],What features NOT in the prior list would you like to see?,"If we had a (virtual) Spack user meeting, would you attend? ",Have you done a Spack Tutorial?,How do you get help with Spack when you need it?,How often do you consult the Spack documentation?,"If there were commercial support for Spack, would you or your organization buy it?",If there were a software foundation (ala Linux Foundation or CNCF) around Spack would it make you more likely to use/recommend Spack?,How would you rate the overall quality of ... [Spack documentation],How would you rate the overall quality of ... [Spack community],How would you rate the overall quality of ... [Spack packages],How would you rate the overall quality of ... [Spack],Tell us briefly about your use case and your usual Spack workflow.,What about Spack has helped you the most in the past year?,What are the biggest pain points in Spack for your workflow? (feel free to link to issues),What's the biggest thing we could do to improve Spack over the next year?,Are there key packages you'd like to see in Spack that are not included yet?,Do you have any other comments for us?,
12/16/2021 1:17:04,User Support Staff,University HPC/Computing Center,Switzerland,No,"Fortran, C++, Python, Go","Traditional HPC / Simulation, Molecular simulations",Word of mouth,4,"Packages, Core Features, Slack Discussions, GitHub Discussions, Issues","0.17, develop, custom fork","macOS, RHEL 8, CentOS 8, SLES15, openSuSE, Fedora, Cray XC, Cray EX, Gentoo","500-1,000","3.6, 3.7, 3.8, 3.9",I'd live (I can provide Python 3 somehow),Lmod,"Module generation, spack containerize, Stacks (matrices in environments), Build caches (binary packages), spack-python (Python scripting), spack external find, Externals in packages.yaml, Concretization preferences in packages.yaml, Distributed Builds (srun/mpirun spack install), New concretizer (clingo), spack develop, spack install --reuse",Yes -- just one,Yes,"AMD, Intel, ARM","NVIDIA Ampere, NVIDIA Other, AMD MI200, Intel Xe (Ponte Vecchio)","gcc, Intel Compilers, Intel OneAPI / dpc++, NVHPC (new NVIDIA PGI compilers), LLVM, AMD ROCmCC / hipcc, nvcc (CUDA), CCE (Cray Compilers)",Critical,Somewhat important,Somewhat important,Critical,Critical,Not Important,Critical,Critical,Not Important,Critical,Critical,Critical,Critical,Critical,Not Important,,Maybe,Yes,"Coworkers, Source Code",Weekly,Probably not,"Yes, definitely!",OK,Horrible,OK,OK,,Install corner-case software,Spack Performance! It is very slow! ,"Concretize the features. Most features in Spack seem to be half-baked, like spack containerize.",,Is it possible to have a stable API for package development? Because freezing a version of Spack is very difficult and moving with develop is terrible because packages break left and right.,
12/16/2021 1:35:06,Software Developer,University HPC/Computing Center,Switzerland,No,"Fortran, C++",Traditional HPC / Simulation,Word of mouth,2,No,develop,"macOS, Ubuntu 20, Cray XC",1 - 10,"3.7, 3.8, 3.9",Do it!,"spack load, spack build-env","build-env (debug a build), spack external find, spack load",No,No,"AMD, Intel","NVIDIA Volta, NVIDIA Ampere, AMD MI100, AMD MI200",gcc,Somewhat important,Slightly Important,Slightly Important,Slightly Important,Slightly Important,Slightly Important,Slightly Important,Somewhat important,Not Important,Very Important,Slightly Important,Somewhat important,Very Important,Slightly Important,Somewhat important,,"Yes, I'd attend",No,"Documentation, Slack, Coworkers, spack help",Monthly,Probably,"Yes, definitely!",Good,Excellent,Good,Good,build all dependencies for material science codes,full automation of dependency builds,,,,Great job!,
12/16/2021 1:35:44,Research Software Engineer (RSE),Other Public Research Lab,Germany,No,"C++, Python",Traditional HPC / Simulation,Search,2,"Packages, Issues",0.17,"CentOS 7, CentOS 8, Ubuntu 18, Ubuntu 20",100 - 200,"3.6, 3.7, 3.8",Do it!,"spack load, Spack environments, Environment Modules (TCL modules), Containers","Environments, Module generation, Chaining (upstreams), build-env (debug a build), Externals in packages.yaml, Concretization preferences in packages.yaml, Distributed Builds (srun/mpirun spack install), New concretizer (clingo), spack install --reuse, spack load",Yes -- just one,No,"AMD, ARM","NVIDIA Volta, NVIDIA Other","gcc, Intel OneAPI / dpc++, LLVM",Very Important,Somewhat important,Not Important,Not Important,Slightly Important,Very Important,Not Important,Slightly Important,Not Important,Very Important,Slightly Important,Somewhat important,Slightly Important,Not Important,Not Important,,Maybe,No,"Documentation, Slack, GitHub",Weekly,Probably not,Probably not,Good,Good,Good,OK,,,,,,,
12/16/2021 1:37:45,Computational Scientist,Other Public Research Lab,India,No,"Fortran, C, C++, Python, Perl, R","Traditional HPC / Simulation, AI/ML, Computer Science Research, Bioinformatics, High Energy Physics, Compiler Testing",Search,3,"Packages, Slack Discussions, GitHub Discussions, Issues",develop,"RHEL 8, CentOS 7, Ubuntu 20, Cray XC",200 - 500,3.8,I'd live (I can provide Python 3 somehow),"spack load, Spack environments, Environment Modules (TCL modules)","Environments, Module generation, Chaining (upstreams), Build caches (binary packages), spack external find, New concretizer (clingo), spack install --reuse, spack load, spack diff (compare two specs)",Yes -- just one,No,"AMD, Intel, ARM","NVIDIA T4, NVIDIA Volta, NVIDIA Ampere, Intel Xe (Ponte Vecchio)","gcc, Intel Compilers, Intel OneAPI / dpc++, PGI, NVHPC (new NVIDIA PGI compilers), LLVM, AMD ROCmCC / hipcc, IBM XL, CCE (Cray Compilers), Fujitsu Compilers, armclang",Critical,Very Important,Very Important,Very Important,Not Important,Somewhat important,Critical,Critical,Not Important,Somewhat important,Critical,Somewhat important,Very Important,Not Important,Very Important,,"Yes, I'd attend",Yes,"Documentation, Slack, GitHub, spack help, Source Code",Weekly,Probably not,"Yes, definitely!",Excellent,Good,Good,Excellent,,,,,fds,,
12/16/2021 1:49:57,Computational Scientist,Company,Switzerland,No,"Fortran, Python","Traditional HPC / Simulation, AI/ML, Compiler Testing",Search,4,"Packages, Documentation, Slack Discussions, Issues",develop,"macOS, Arch, SLES15, openSuSE, Cray XC, Cray EX",100 - 200,"3.6, 3.8, 3.9",Do it!,"Lmod, Environment Modules (TCL modules)","Environments, Module generation, build-env (debug a build), spack external find, Externals in packages.yaml, Concretization preferences in packages.yaml, spack develop",No,No,"AMD, ARM","AMD MI200, Intel Xe (Ponte Vecchio)","gcc, Intel Compilers, Intel OneAPI / dpc++, LLVM, AMD ROCmCC / hipcc, CCE (Cray Compilers)",Very Important,Very Important,Somewhat important,Not Important,Slightly Important,Slightly Important,Slightly Important,Slightly Important,Not Important,Somewhat important,Slightly Important,Slightly Important,Slightly Important,Not Important,Not Important,,"Yes, I'd attend",Yes,"Slack, Source Code",Weekly,Probably not,Probably,OK,Good,OK,Good,Build packages (cp2k) with complicated dependency trees.,Easy possibility to try the same application with different providers for blas/lapack/etc.,,Better user focus. A lot of documentation and messages could be formulated in a way an average user would understand better.,,,
12/16/2021 1:56:54,DevOps/SRE,University HPC/Computing Center,Australia,No,Python,"Traditional HPC / Simulation, Compiler Testing",AHUG cloud hackathon,1,No,develop,"CentOS 7, Ubuntu 20",10 - 100,"3.7, 3.9",Do it!,"spack load, Environment Modules (TCL modules)","Environments, Module generation, spack containerize, New concretizer (clingo)",No,No,"AMD, Intel, ARM","NVIDIA T4, NVIDIA Volta, NVIDIA Ampere","gcc, Intel OneAPI / dpc++, LLVM",Very Important,Very Important,Slightly Important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Not Important,Slightly Important,Very Important,Very Important,Somewhat important,Somewhat important,Very Important,Static libc!!,Maybe,Yes,"Documentation, GitHub, Source Code",Monthly,Probably not,Probably,OK,Good,Excellent,Good,,,,,,,
12/16/2021 2:19:57,DevOps/SRE,Other Public Research Lab,France,No,Python,Traditional HPC / Simulation,Word of mouth,0,"Packages, Slack Discussions, GitHub Discussions, Issues",0.17,"CentOS 7, CentOS 8, Debian 10, Debian 11",100 - 200,3.8,I'd live (I can provide Python 3 somehow),Lmod,"Environments, Module generation, spack external find, Externals in packages.yaml, Concretization preferences in packages.yaml",No,No,"AMD, Intel, IBM Power",NVIDIA Ampere,"gcc, Intel Compilers, Intel OneAPI / dpc++, nvcc (CUDA)",Very Important,Very Important,Very Important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Very Important,Not Important,Very Important,Somewhat important,Very Important,Very Important,Somewhat important,Somewhat important,,"Yes, I'd attend",No,"Documentation, Slack, GitHub, Source Code",Daily,Probably not,Probably,Good,Excellent,Excellent,Excellent,,,,,,,
12/16/2021 2:25:30,Computational Scientist,Other Public Research Lab,Italy,No,"C, C++","Traditional HPC / Simulation, Compiler Testing",Used at my site,5,"Packages, Core Features, Issues","0.17, develop, custom fork","macOS, RHEL 8, CentOS 8, Ubuntu 20","500-1,000","2.7, 3.8, 3.9, 3.10",Unacceptable,Environment Modules (TCL modules),"Module generation, Chaining (upstreams), build-env (debug a build), spack external find, Externals in packages.yaml, Concretization preferences in packages.yaml",Yes -- just one,No,"AMD, Intel, IBM Power, ARM, RISC-V","NVIDIA Volta, NVIDIA Ampere, AMD MI200, Intel Xe (Ponte Vecchio)","gcc, Intel OneAPI / dpc++, LLVM, AMD ROCmCC / hipcc, nvcc (CUDA), armclang",Somewhat important,Very Important,Very Important,Critical,Critical,Slightly Important,Not Important,Very Important,Not Important,Critical,Critical,Very Important,Critical,Not Important,Very Important,,"Yes, I'd attend",No,"Documentation, Coworkers, GitHub, Source Code",Weekly,Probably,Probably,OK,Good,Good,Good,,,Packages changing their hash across upstream commits.,,,,
12/16/2021 2:35:30,Scientist/Researcher,Other Public Research Lab,Hungary,No,"Python, sh/bash/other shell script",Traditional HPC / Simulation,Word of mouth,3,"Packages, Issues","0.17, develop",Arch,100 - 200,"3.7, 3.8, 3.9, 3.10",Do it!,"spack load, Spack environments","Environments, Module generation, spack load",No,No,"AMD, Intel","NVIDIA Other, AMD Other","gcc, LLVM, nvcc (CUDA)",Slightly Important,Slightly Important,Very Important,Somewhat important,Somewhat important,Very Important,Slightly Important,Very Important,Slightly Important,Very Important,Very Important,Very Important,Very Important,Slightly Important,Slightly Important,,"Yes, I'd attend",No,"Documentation, spack help",Monthly,Probably not,Probably,Good,Excellent,Excellent,Excellent,"Managing a small (5 node) heterogeneous (1x Zen, 3x Skylake, 1x Nehalem, 3x NVidia GeForce GTX 1080Ti, 1x 1050Ti) HPC cluster. Main usage: GROMACS+PLUMED, several versions installed in by-architecture environments, selected automatically in the SLURM prolog script.","Dependency management, isolated installation of several versions of the same package",,"Nestable environments (or means for including portions in the spack.yaml of the environments), to be able to avoid specifying the same list of packages in similar environments.",,Keep up the good work!,
12/16/2021 2:46:28,Scientist/Researcher,University research group,Germany,No,"C++, Python, sh/bash/other shell script","Traditional HPC / Simulation, Compiler Testing, Embedded Systems, Computational Neuroscience, Neuromorphic Hardware",Search,4,"Packages, Core Features, GitHub Discussions, Issues, Tools/integrations","0.16, 0.17, develop","CentOS 7, Debian 11","> 1,000","2.7, 3.8",Do it!,"spack view, Containers, multiple spack views in custom container image build flow (singularity/apptainer-based image, multiple ""apps"" one for each view)","Module generation, Chaining (upstreams), Build caches (binary packages), build-env (debug a build), Python extensions (link python packages into interpreter prefix), Externals in packages.yaml, Concretization preferences in packages.yaml, New concretizer (clingo)",Yes -- just one,Yes,"AMD, Intel, ARM",NVIDIA Other,"gcc, LLVM, AMD ROCmCC / hipcc, nvcc (CUDA)",Somewhat important,Very Important,Critical,Not Important,Slightly Important,Very Important,Not Important,Very Important,Not Important,Not Important,Somewhat important,Very Important,Very Important,Not Important,Somewhat important,,"Yes, I'd present something!",Yes,"Documentation, GitHub, Source Code",Weekly,No,Probably not,Good,Good,OK,Good,"We use spack as our only package manager; we use it to provide containerized spack-based software & hardware development environments as well as user software environments for using our self-developed accelerated mixed-signal neuromorphic hardware. (I.e. all software that is used for development OR usage of the hardware is ""spackified"".)","The ease of deploying a 400-package software environment onto different underlying distributions (e.g. switching from our default Debian-based amd64 to a ARM-based Debian, or to an old CentOS7).",Before clingo: concretization speed; now: error messages if concretization fails ;).,"Separating build-time dependencies and runtime dependencies (e.g. for ""conflicting"" but embedded lua interpreters).",,,
12/16/2021 2:47:23,Computational Scientist,University research group,Australia,No,"C++, Python",Traditional HPC / Simulation,Twitter,3,"Core Features, Slack Discussions, Issues",develop,"macOS, CentOS 8, Ubuntu 20, Windows Subsystem for Linux (WSL)",10 - 100,"3.6, 3.7, 3.8, 3.9",Do it!,spack load,"Build caches (binary packages), build-env (debug a build), spack external find, Externals in packages.yaml, New concretizer (clingo), spack develop",No,Yes,"AMD, Intel","NVIDIA Volta, NVIDIA Ampere, AMD MI200","gcc, Intel Compilers, Intel OneAPI / dpc++, NVHPC (new NVIDIA PGI compilers), LLVM, AMD ROCmCC / hipcc, nvcc (CUDA)",Critical,Critical,Very Important,Somewhat important,Somewhat important,Somewhat important,Not Important,Very Important,Not Important,Very Important,Very Important,Very Important,Critical,Very Important,Very Important,,"Yes, I'd attend",No,"Documentation, Slack, GitHub, Source Code",Weekly,Probably not,"Yes, definitely!",Good,OK,OK,Good,,,File copying on Lustre is still broken! [https://github.com/spack/spack/pull/27247],,,,
12/16/2021 3:00:35,DevOps/SRE,University HPC/Computing Center,Saudi Arabia,No,"Python, sh/bash/other shell script","Traditional HPC / Simulation, AI/ML, Computer Science Research, Bioinformatics",Used at my site,5,Packages,"0.16, 0.17","Ubuntu 16, Ubuntu 18",200 - 500,"3.6, 3.9",Do it!,Environment Modules (TCL modules),"Environments, Module generation, Externals in packages.yaml, spack install --reuse",Yes -- just one,My site has a front-end or extension to Spack,"AMD, Intel",NVIDIA Ampere,gcc,Very Important,Somewhat important,Somewhat important,Very Important,Very Important,Very Important,Not Important,Slightly Important,Not Important,Very Important,Very Important,Very Important,Somewhat important,Slightly Important,Slightly Important,,"Yes, I'd attend",Yes,"Documentation, Slack, Coworkers, spack help, Source Code",Monthly,Probably not,No,Good,OK,OK,Good,,,,,,,
12/16/2021 3:31:09,User Support Staff,Other Public Research Lab,Japan,No,"C, C++",Traditional HPC / Simulation,Used at my site,2,No,"0.16, 0.17","RHEL 8, CentOS 8",10 - 100,3.6,Do it!,spack load,"Chaining (upstreams), Externals in packages.yaml, spack load",No,No,ARM,NVIDIA Ampere,"gcc, LLVM, Fujitsu Compilers",Very Important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Very Important,Not Important,Somewhat important,Somewhat important,Somewhat important,Not Important,Somewhat important,Somewhat important,,Maybe,No,"Documentation, Coworkers, GitHub",Weekly,Probably,Probably,Bad,OK,OK,OK,"Try to install something, get error, try to fix it.",When the latest gcc and llvm have got installed without an error.,"Practical information could be found in the github issue, but not from the official document.",Centralized support contact. (Should we ask in Slack or github issue?),,,
12/16/2021 3:46:58,Research Software Engineer (RSE),"DOE/NNSA Lab (e.g., LLNL/LANL/SNL)",United States,Yes,"Python, Go, sh/bash/other shell script",Software development and research ,Used at my site,0,"Packages, Core Features, Documentation, Slack Discussions, GitHub Discussions, Issues, Tools/integrations","develop, custom fork",Ubuntu 20,1 - 10,"3.8, 3.9",Do it!,Containers,"spack containerize, spack-python (Python scripting)",No,Yes,AMD,NVIDIA T4,gcc,Very Important,Somewhat important,Somewhat important,Critical,Very Important,Not Important,Not Important,Slightly Important,Not Important,Slightly Important,Not Important,Slightly Important,Slightly Important,Somewhat important,Somewhat important,Package testing,Maybe,No,"Documentation, Slack, GitHub, Source Code",Monthly,Probably not,Probably not,Bad,OK,Bad,Bad,spack install,Research tool,It’s slow and packages don’t reliably build,Package building testing / build guarantee ,No,,
12/16/2021 4:07:43,Software Developer,Company,Germany,No,"C, C++, Rust","AI/ML, Visualization, Embedded Systems, Automotive",Podcast,0,No,develop,"macOS, CentOS 8, Ubuntu 20, Fedora, Windows Subsystem for Linux (WSL), Windows",1 - 10,3.1,Do it!,Spack environments,,No,No,"AMD, Intel, ARM","NVIDIA Other, Intel Xe (Ponte Vecchio)","gcc, Intel OneAPI / dpc++, NVHPC (new NVIDIA PGI compilers), LLVM, nvcc (CUDA)",Very Important,Critical,Critical,Critical,Very Important,Somewhat important,Not Important,Critical,Critical,Somewhat important,Critical,Critical,Critical,Very Important,Very Important,,"Yes, I'd attend",No,"Documentation, Source Code",Daily,"Yes, definitely!","Yes, definitely!",OK,OK,Good,Excellent,,,,,"Casadi, OMPL",,
12/16/2021 4:52:54,Research Software Engineer (RSE),University HPC/Computing Center,Sweden,No,"C++, Python","Traditional HPC / Simulation, AI/ML",Twitter,0,"Packages, GitHub Discussions",0.17,"Ubuntu 16, Ubuntu 20",100 - 200,"3.6, 3.7, 3.8, 3.9",Do it!,"spack load, Environment Modules (TCL modules)","Module generation, spack external find, spack load, spack diff (compare two specs)",No,No,"AMD, Intel, ARM","NVIDIA Ampere, AMD MI200, Intel Xe (Ponte Vecchio)","gcc, Intel OneAPI / dpc++, NVHPC (new NVIDIA PGI compilers), LLVM, AMD ROCmCC / hipcc, nvcc (CUDA), CCE (Cray Compilers), armclang",Slightly Important,Somewhat important,Very Important,Somewhat important,Slightly Important,Slightly Important,Somewhat important,Slightly Important,Slightly Important,Very Important,Slightly Important,Not Important,Somewhat important,Slightly Important,Not Important,,Maybe,No,"Documentation, GitHub, spack help, Source Code",Monthly,Probably not,Probably not,Excellent,Good,Excellent,Excellent,Test build and run of my package with many versions of its dependencies,Automatic download and build of dependency stacks,Disk space usage when I have file system limits and no sysadmin support on vendor test systems.,Find and use more system packages to have smaller installation footprints. ,hipSYCL,,
12/16/2021 5:28:06,Scientist/Researcher,University research group,United States,Yes,"C, C++",Traditional HPC / Simulation,Word of mouth,3,"Packages, Slack Discussions",develop,"RHEL 7, RHEL 8, Arch",10 - 100,3.7,I'd live (I can provide Python 3 somehow),Lmod,"Environments, Module generation, Stacks (matrices in environments), Build caches (binary packages), build-env (debug a build), spack external find, Externals in packages.yaml, Concretization preferences in packages.yaml, New concretizer (clingo), spack develop, spack test",No,No,"AMD, Intel, IBM Power","NVIDIA Ampere, NVIDIA Other, AMD MI200, Intel Xe (Ponte Vecchio)","gcc, Intel OneAPI / dpc++, NVHPC (new NVIDIA PGI compilers), LLVM, AMD ROCmCC / hipcc, nvcc (CUDA), IBM XL",Very Important,Critical,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Not Important,Slightly Important,Not Important,Somewhat important,Somewhat important,Very Important,Critical,Slightly Important,Very Important,,"Yes, I'd attend",Yes,"Documentation, Slack, GitHub",Monthly,No,Probably,Good,Excellent,Good,Good,"install spack, find system compilers, use spack env+stacks to install the common packages our group uses",installing common packages for the group,errors that don't indicate where the problem is and prevent (un/re)installing packages into an environment/spack install,support for gpus - I have not tried installing cuda enabled packages yet...,all the ones I use but haven't added yet :),thank you,
12/16/2021 5:32:42,Software Developer,"DOE/Office of Science Lab (e.g., ORNL/ANL/LBL)",United States,No,C++,High Energy Physics,Word of mouth,5,"Packages, Core Features, Slack Discussions, GitHub Discussions","0.17, develop",RHEL 7,"500-1,000",3.6,Do it!,"Spack environments, UPS","Environments, Chaining (upstreams), Build caches (binary packages), spack external find, New concretizer (clingo)",Yes -- several,My site has a front-end or extension to Spack,"AMD, Intel",NVIDIA T4,gcc,Somewhat important,Very Important,Very Important,Somewhat important,Somewhat important,Very Important,Slightly Important,Somewhat important,Slightly Important,Very Important,Very Important,Very Important,Slightly Important,Slightly Important,Very Important,,Maybe,No,"Documentation, Slack, Source Code",Monthly,Probably not,Probably,Good,Good,Good,Good,,Building ROOT on Cori and Theta with system compilers.,,,No,Great progress,
12/16/2021 5:37:43,Scientist/Researcher,"DOE/Office of Science Lab (e.g., ORNL/ANL/LBL)",United States,No,C++,High Energy Physics,Presentation,0,No,0.17,Ubuntu 18,10 - 100,3.7,Do it!,"spack load, Spack environments, spack view","Environments, spack load",Yes -- several,Yes,Intel,NVIDIA Other,"gcc, Intel Compilers, Intel OneAPI / dpc++, AMD ROCmCC / hipcc, nvcc (CUDA)",Very Important,Somewhat important,Very Important,Somewhat important,Somewhat important,Slightly Important,Slightly Important,Critical,Not Important,Somewhat important,Somewhat important,Critical,Very Important,Slightly Important,Slightly Important,,Maybe,No,"Documentation, Slack",Weekly,Probably not,Probably not,Good,Good,Good,Good,,,,,,,
12/16/2021 6:03:15,Scientist/Researcher,University research group,Germany,No,"C, Python","Traditional HPC / Simulation, Computer Science Research",Word of mouth,3,Packages,develop,"CentOS 7, Fedora",10 - 100,"3.7, 3.8, 3.9, 3.10",Do it!,"spack load, Spack environments","Environments, spack containerize, spack external find, Externals in packages.yaml, Concretization preferences in packages.yaml, spack load",Yes -- several,No,"AMD, Intel, ARM",NVIDIA Other,"gcc, Intel Compilers, Intel OneAPI / dpc++, LLVM",Very Important,Very Important,Not Important,Slightly Important,Somewhat important,Somewhat important,Not Important,Very Important,Not Important,Very Important,Critical,Critical,Very Important,Somewhat important,Somewhat important,,"Yes, I'd attend",Yes,"Documentation, Slack, GitHub, Source Code",Monthly,Probably not,Probably not,Good,Excellent,Good,Good,,,,,,,
12/16/2021 6:20:16,System Administrator,University HPC/Computing Center,United States,No,"Perl, sh/bash/other shell script","Traditional HPC / Simulation, AI/ML, Bioinformatics, High Energy Physics",Birds-of-a-feather (BOF) at conference,2,"Packages, Documentation, Issues","0.16, 0.17","RHEL 7, RHEL 8","> 1,000","3.6, 3.7",Do it!,Environment Modules (TCL modules),"Environments, Chaining (upstreams), spack-python (Python scripting), Externals in packages.yaml, Concretization preferences in packages.yaml, New concretizer (clingo)",Yes -- just one,No,"AMD, Intel","NVIDIA Volta, NVIDIA Ampere, NVIDIA Other","gcc, Intel Compilers, Intel OneAPI / dpc++, NVHPC (new NVIDIA PGI compilers), AMD ROCmCC / hipcc, nvcc (CUDA)",Very Important,Slightly Important,Slightly Important,Slightly Important,Not Important,Slightly Important,Not Important,Somewhat important,Not Important,Not Important,Slightly Important,Very Important,Slightly Important,Not Important,Slightly Important,,"Yes, I'd attend",Yes,"Documentation, Mailing List, Source Code",Monthly,Probably not,No,Good,Good,Good,Good,"We build a standard SW library for our HPC users.  For each support compiler/toolchain, we have one or more environments specifying packages/versions/variants for that toolchain.  We use homegrown wrapper scripts to try to prevent duplication of packages w/in environment, and other scripts to generate hierarchical Tcl env modulefiles from spack packages.  ",Leveraging the community support (via pakcage.py) for SW installations,"New clingo concretizer is not always honoring package.yaml concretization preferences, even when they are ""legal"".  E.g. package.yaml says pkg foo should have +bar variant, but spack solve foo, etc insists on foo~bar (but spack solve foo+bar works w/out errors/warnings/etc and as far as I can see the same values in Optimization criteria summary).  I see similar issues with versions (e.g. have python@3.7.7 built, trying to add a python package to it but spack tries to add to python@3.8 unless I explicitly give python@3.7.7 as dependency on command line).  (I have not opened an issue yet, but hope to do so w/in week or so)","Improve diagnostics re concretizer choices (or if already in solve --show all, documentation on how to read/use).",,,
12/16/2021 6:22:11,Software Developer,"DOE/Office of Science Lab (e.g., ORNL/ANL/LBL)",United States,No,"C, C++, Python, Perl, sh/bash/other shell script, Ruby","Computer Science Research, High Energy Physics, Compiler Testing",Word of mouth,5,"Packages, Core Features, Issues","0.14, 0.16","macOS, RHEL 7, CentOS 7, CentOS 8, Ubuntu 18",200 - 500,"2.7, 3.6, 3.9",I'd live (I can provide Python 3 somehow),"spack load, Spack environments, spack build-env, UPS","Environments, Module generation, Chaining (upstreams), build-env (debug a build), Python extensions (link python packages into interpreter prefix), Externals in packages.yaml, Concretization preferences in packages.yaml, New concretizer (clingo), spack test, spack load",Yes -- several,My site has a front-end or extension to Spack,"AMD, Intel, ARM",NVIDIA Other,"gcc, Intel Compilers, LLVM, armclang",Very Important,Somewhat important,Somewhat important,Very Important,Somewhat important,Somewhat important,Slightly Important,Somewhat important,Not Important,Very Important,Somewhat important,Very Important,Somewhat important,Slightly Important,Very Important,,"Yes, I'd attend",Yes,"Documentation, Slack, Source Code",Weekly,Probably not,No,Good,Good,Good,Good,"I have several:  I am using Spack to manage dependencies for locally developed server software, where I build a spack environment on my development system, test there, then install that environment on my production system's spack instance, and switch the environment name in the startup scripts to switch versions; Then I am working with HEP experiments at Fermilab to build their analysis frameworks under Spack, put binary packages in a site binary cache for distribution to their production systems and Cern CVMFS; and I have locally developed scripts to declare existing binary packages to a Spack instance so we can provide old binary UPS packages via Spack for execution with spack load and/or as dependencies for builds.","Learning to make good use of Spack environments to unify dependencies between different packages, and careful use of spack speck --install-status to make sure I'm not installing big parallel sets of dependencies.","Having to make different packages.yaml files to use system externals appropriately; we need another level between a build flag that's true or false, something like preferred...","Some sort of concretizer flag to prefer latest installed version of dependencies, or same dependencies as  previous build, rather than latest version; would save a lot of building huge spack spec command  lines to specify dependencies.",I have several I'm overdue to put in pull requests for..,In general I like Spack and the direction it seems to be heading in.,
12/16/2021 6:29:04,System Administrator,University HPC/Computing Center,United States,No,"Python, sh/bash/other shell script","Traditional HPC / Simulation, Computer Science Research, Bioinformatics",Presentation,2,"Packages, Slack Discussions","0.16, 0.17","RHEL 7, RHEL 8",100 - 200,"2.7, 3.6",Do it!,Lmod,"Environments, Module generation, spack external find, Externals in packages.yaml, Concretization preferences in packages.yaml",Yes -- just one,Yes,"AMD, Intel",NVIDIA Other,"gcc, Intel Compilers, Intel OneAPI / dpc++, NVHPC (new NVIDIA PGI compilers)",Critical,Somewhat important,Slightly Important,Somewhat important,Slightly Important,Slightly Important,Somewhat important,Slightly Important,Not Important,Very Important,Very Important,Somewhat important,Somewhat important,Slightly Important,Slightly Important,The documentation is very behind or simply missing in many cases.  Almost all of my learning of new features is based on what I find in the builtin repo.  So I'm sure I'm missing out on tricks and tips of what spack can do because I've not seen someone else doing it. ,Maybe,Yes,"Documentation, Slack, Mailing List, Source Code",Weekly,Probably not,Probably not,Bad,OK,Good,Good,"As manager of the software stack on our HPC system, I use spack to create the installed software base that our users access for research.  We do not (yet) provide spack to the end users.","We added a RHEL8 system in addition to our RHEL7 system, and bringing spack over to install the software stack on the new system was relatively pain free.  ","The ambiguous and vague error messages when something goes wrong.  Concretization used to be the worst, but they seem to have gotten a little better.  There seems to be little error catching in spack, so I'm following stack traces to find the problem, even if it's a bad character in a config file. Spack should be able to catch that and tell me clearly what the problem is.","Better error messages.  Sometimes the error message is just :  ""Error: lkskj34k6jglkjslkjl234j66h""   (literally).  It's clearly part of some hash, but that's all I get.  I usually do a spack concretize and a spack reindex and the message goes away.  Also, I tried using spack binary caches (caches of built/installed spack software) and it did not go well and I was told in the google groups that it wasn't quite ready for prime time.  That would save us a lot of time if we could use that, as builds of our entire stack take around 14 hours now.",,"The more I use spack, the more I'm impressed with what it handles, but I can also go for months without knowing about something spack can do because the documentation never told me about it.  That's a little frustrating.  I really do enjoy using spack to manage our software stack.  We update our stack twice a year, and in many many cases, it's as simple as adding the new version to the spack.yaml file and installing.",
12/16/2021 6:38:22,Software Developer,"DOE/Office of Science Lab (e.g., ORNL/ANL/LBL)",United States,Yes,"Fortran, C, C++, Perl",Traditional HPC / Simulation,Word of mouth,2,"Packages, Core Features, Slack Discussions, GitHub Discussions, Issues",develop,"macOS, RHEL 7, RHEL 8, CentOS 7, Ubuntu 18, Ubuntu 20, openSuSE, Cray XC, Cray EX","> 1,000","3.6, 3.7, 3.8, 3.9, 3.10",Do it!,"spack load, Spack environments, Lmod, Environment Modules (TCL modules), spack view","Environments, Module generation, Chaining (upstreams), Build caches (binary packages), spack external find, Externals in packages.yaml, Concretization preferences in packages.yaml, spack ci (generate GitLab Pipelines), Distributed Builds (srun/mpirun spack install), New concretizer (clingo), spack develop, spack load",Yes -- several,Yes,"AMD, Intel, IBM Power","NVIDIA Volta, NVIDIA Ampere, NVIDIA Other, AMD MI100, AMD MI200, AMD Other","gcc, NVHPC (new NVIDIA PGI compilers), LLVM, AMD ROCmCC / hipcc, nvcc (CUDA), IBM XL, CCE (Cray Compilers)",Critical,Somewhat important,Slightly Important,Somewhat important,Very Important,Very Important,Slightly Important,Very Important,Not Important,Slightly Important,Very Important,Slightly Important,Very Important,Critical,Very Important,,"Yes, I'd present something!",Yes,"Documentation, Slack, GitHub, Source Code",Weekly,Probably,Probably,Good,Excellent,Good,Excellent,"I use spack for package management on personal machines, and to set up development environments and CI environments on 6 platforms at two labs for a team of ~55 people to support development of two packages. I maintain a collection of spack environments in a private repo used to install our software stack on each machine for each version for each use case.",Stability of develop branch and Slack community support.,"Spack CI is brittle in my experience. We had a complicated workflow for two packages with many dependencies, and it ended up breaking so often I had to temporarily remove it from our pipelines. Scott has done great work, but CI and buildcaches could use more love. Here’s the most recent relevant issue: https://github.com/spack/spack/issues/27865","Clingo error messages are most important imo. I still need the original from time to time if something goes wrong. Build caches would be great, but are not as important.",Nope!,Spack has a fantastic community around fantastic software! Thanks for all your work!,
12/16/2021 6:49:24,DevOps/SRE,"DOE/NNSA Lab (e.g., LLNL/LANL/SNL)",United States,Yes,"Fortran, C, C++, Python","Traditional HPC / Simulation, Computer Science Research",Word of mouth,4,"Packages, Slack Discussions, GitHub Discussions, Issues","0.16, 0.17, develop","macOS, CentOS 7, CentOS 8, Ubuntu 20, Windows Subsystem for Linux (WSL), Cray XC","500-1,000","2.7, 3.6",I'd live (I can provide Python 3 somehow),"Lmod, Environment Modules (TCL modules)","Environments, Module generation, Chaining (upstreams), Stacks (matrices in environments), spack external find, Externals in packages.yaml, Concretization preferences in packages.yaml, New concretizer (clingo), spack load",Yes -- several,No,"AMD, Intel, IBM Power, ARM","NVIDIA Volta, NVIDIA Ampere, Intel Xe (Ponte Vecchio)","gcc, Intel Compilers, NVHPC (new NVIDIA PGI compilers), LLVM, AMD ROCmCC / hipcc, nvcc (CUDA), IBM XL, CCE (Cray Compilers)",Critical,Very Important,Slightly Important,Not Important,Slightly Important,Not Important,Not Important,Somewhat important,Not Important,Slightly Important,Slightly Important,Not Important,Somewhat important,Not Important,Slightly Important,,Maybe,Yes,"Documentation, Slack, Coworkers, Email",Weekly,Probably,Probably not,OK,Excellent,Good,OK,Build and deploy build and run environments for users,,Spack requires a system installation to be used as part of multistage CI pipelines due to relocation issues,,,,
12/16/2021 6:55:08,Software Developer,Company,United States,No,Python,Traditional HPC / Simulation,Word of mouth,0,"Slack Discussions, Issues","0.17, develop, custom fork","RHEL 8, CentOS 8, Ubuntu 20, Fedora",100 - 200,"3.6, 3.7, 3.8, 3.9, 3.10",Do it!,spack load,"Build caches (binary packages), spack-python (Python scripting), spack ci (generate GitLab Pipelines), New concretizer (clingo), spack develop",,No,"Intel, ARM",NVIDIA Ampere,"gcc, NVHPC (new NVIDIA PGI compilers), LLVM, armclang",Very Important,Not Important,Somewhat important,Not Important,Not Important,Not Important,Somewhat important,Slightly Important,Not Important,Not Important,Very Important,Not Important,Not Important,Not Important,Slightly Important,"Better behavior in a  CI/CD environment, separate repo for packages so issues with core spack are more visible.","Yes, I'd attend",No,"Documentation, Slack, GitHub, Source Code",Weekly,No,Probably,Good,Excellent,Good,OK,I use spack within a CI/CD environment. Spack is called by ReFrame to drive builds of packages.,regular releases with new features.,CI/CD behavior - multiple spack instances on the same user account: https://github.com/spack/spack/issues/26908,CI/CD behavior,none that I can think of,Thanks for your great work! Spack is an amazing achievement!,
12/16/2021 7:04:55,Computational Scientist,Other Public Research Lab,Germany,No,"Fortran, C, Python, Rust","Traditional HPC / Simulation, Statistics / Data Analysis, AI/ML, Visualization",Word of mouth,2,"Packages, Issues","0.17, develop","macOS, Debian 9, Debian 10, Debian 11",10 - 100,"3.8, 3.9, 3.10",Do it!,"spack load, Spack environments, Lmod, spack view","Environments, Module generation, Chaining (upstreams), Build caches (binary packages), Concretization preferences in packages.yaml, New concretizer (clingo), spack develop, spack test",No,No,"AMD, Intel","NVIDIA Volta, NVIDIA Ampere","gcc, Intel Compilers, nvcc (CUDA)",Not Important,Somewhat important,Not Important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Not Important,Not Important,Slightly Important,Not Important,Somewhat important,Somewhat important,Not Important,Not Important,,"Yes, I'd attend",Yes,"Documentation, Coworkers, GitHub, Source Code",Weekly,Probably not,Probably,Good,Excellent,Good,Excellent,"Using Spack to provide software on an HPC system. We plan to have a binary cache, and to offer the same environments for our (Linux) laptop users so that they have the same environment on HPC and laptop systems.",Spack as a product is great (compiling nearly arbitrary software from source in a flexible way.) ,,"Tutorial / documentation on best-practice and automatic deployment of spack on cluster would be nice. I would also like to run the smoke tests (or even testing in more detail for particular packages) of a completed spack installation (for example using reframe, to be able to schedule testing jobs via slurm).  Maybe this is trivial (I didn't have time to look into it yet). But some more pointers where to start, would be welcome.",,,
12/16/2021 7:21:56,DevOps/SRE,Other Public Research Lab,Russia,No,Python,High Energy Physics,Word of mouth,2,"Packages, Core Features, Issues","0.17, develop","CentOS 7, Ubuntu 20","500-1,000",3.8,Do it!,Spack environments,"Environments, Build caches (binary packages), spack external find, Externals in packages.yaml, Concretization preferences in packages.yaml, New concretizer (clingo), spack install --reuse, spack test, spack load",Yes -- several,Yes,"AMD, Intel, IBM Power, ARM",NVIDIA Other,"gcc, LLVM, nvcc (CUDA)",Critical,Somewhat important,Somewhat important,Not Important,Not Important,Not Important,Not Important,Somewhat important,Not Important,Somewhat important,Slightly Important,Critical,Not Important,Not Important,Not Important,,"Yes, I'd attend",Yes,"Documentation, Slack, GitHub, Source Code",Daily,Probably not,Probably,Good,Good,Good,Good,Spack is being evaluated as a tool to provide for CMS experiment,,,,,,
12/16/2021 7:32:05,Software Developer,Company,United States,No,"Python, Rust",Embedded Systems,Used at my site,1,No,0.16,"Ubuntu 18, Amazon Linux",10 - 100,3.8,Do it!,"Containers, Custom script or env vars","Build caches (binary packages), Concretization preferences in packages.yaml, spack develop, spack install --reuse, spack test",Yes -- several,Yes,"AMD, Intel",NVIDIA Other,"gcc, LLVM, armclang",Somewhat important,Critical,Somewhat important,Not Important,Slightly Important,Somewhat important,Not Important,Somewhat important,Not Important,Not Important,Not Important,Somewhat important,Not Important,Not Important,Slightly Important,Remote recipe repositories (e.g. S3 or Git),Maybe,Yes,"Documentation, Coworkers, Source Code",Weekly,Probably not,No,Bad,OK,OK,OK,,,"We have a lot of internal Spack recipes, but they can only be accessed on the local filesystem, which means we have to build our own system to update and distribute the recipes. Spack needs to support pulling recipes from a live, remote location like S3 or git server so we can publish latest recipes to one location for everyone to easily access them.",Make spack recipes accessible from online locations like S3 or a git server,,"The spack docs need more examples of workflows, especially for all the commands. for example, how is ""spack env list"" supposed to work? the docs are not helpful: https://spack.readthedocs.io/en/latest/command_index.html#spack-env-list",
12/16/2021 7:40:05,Software Developer,"DOE/NNSA Lab (e.g., LLNL/LANL/SNL)",United States,No,Python,"Traditional HPC / Simulation, AI/ML",Used at my site,2,Packages,"0.16, develop","RHEL 6, RHEL 7",1 - 10,"2.7, 3.6, 3.7, 3.8",I'd live (I can provide Python 3 somehow),Spack environments,"Environments, Build caches (binary packages), spack develop",No,No,"AMD, Intel, IBM Power","NVIDIA T4, NVIDIA Volta, NVIDIA Other","gcc, Intel Compilers, LLVM, nvcc (CUDA)",Very Important,Very Important,Slightly Important,Very Important,Not Important,Not Important,Not Important,Slightly Important,Not Important,Very Important,Slightly Important,Somewhat important,Very Important,Not Important,Not Important,some sort of central repo to get binaries from (cache),Maybe,Yes,Coworkers,Never,No,Probably not,OK,Good,OK,OK,"I use spack to create a root python with most ""big"" dependencies (torch, torchvision, horovod, lbann) and then my user build venv on top of it.",saves space and time  by having one common big root venv to start from,"rarely works out of the box for my use caes (e.g lbann, horovod, etc..)","i don't necessarily want a super optimized system, usually spack fails for me out of the box and I need to ""hack"" because ""it's a bug that's in a branch somewhere""",lbann? horovod?,help lbann team,
12/16/2021 7:55:11,Computational Scientist,University research group,United States,Yes,"C, C++, Python, Rust, sh/bash/other shell script, Julia","Traditional HPC / Simulation, AI/ML, Computer Science Research",Presentation,3,"Packages, Core Features, Slack Discussions, GitHub Discussions, Issues",develop,"macOS, RHEL 8, CentOS 7, CentOS 8, Fedora, Windows Subsystem for Linux (WSL), Gentoo",200 - 500,"2.7, 3.6, 3.7, 3.8, 3.9, 3.10",I'd live (I can provide Python 3 somehow),"spack load, Spack environments","Environments, spack containerize, Chaining (upstreams), Stacks (matrices in environments), build-env (debug a build), spack-python (Python scripting), Command Extensions, Python extensions (link python packages into interpreter prefix), spack external find, Externals in packages.yaml, Concretization preferences in packages.yaml, Distributed Builds (srun/mpirun spack install), New concretizer (clingo), spack develop, spack install --reuse, spack load",Yes -- several,Yes,"AMD, Intel, IBM Power, ARM","NVIDIA Volta, NVIDIA Ampere, Intel Xe (Ponte Vecchio)","gcc, Intel OneAPI / dpc++, NVHPC (new NVIDIA PGI compilers), LLVM, nvcc (CUDA)",Somewhat important,Critical,Somewhat important,Very Important,Very Important,Critical,Somewhat important,Somewhat important,Very Important,Critical,Very Important,Critical,Critical,Very Important,Very Important,I don’t really want current features removed?,Maybe,Yes,"Documentation, Slack, Source Code",Weekly,Probably,Probably not,Excellent,Excellent,Good,Excellent,I use spack environments to share a moderately complex (80 packages) software compression stack with collaborators.,The new concretizer makes specifying specs much easier.,"I feel like the most recent release was buggier that some of the previous releases and probably needs some time on bug fixes. 

Specifically clingo bootstrapping (specifically when a binary is not available, the build isn’t isolated as well and can fail unexpectedly, but installing clingo with the old concretizer works? I’m guessing it’s doing weird things with python detection), the python package ecosystem, and git versions all felt like they have had subtle bugs that I’ve had to work around since SC. Additionally the error messages from the new concretizer are not always as good as the old one.","There needs to be a way to specify kernel-level and kernel driver dependencies (i.e. for liburing, linux perf, cuda).  This breaks the GPU compressors which need matching driver and cuda versions.  Things like this are becoming more common in my experience and not less.",nvcomp-ext (proprietary compressor extensions for nvcomp) from Nvidia,"Don't take all of my complaining to mean that I am upset with the state of spack.  It is still better than last year, and still far better than the next best option.",
12/16/2021 8:33:12,Scientist/Researcher,University research group,Canada,No,"C++, Python, sh/bash/other shell script",High Energy Physics,Presentation,2,"Packages, Documentation, Slack Discussions, GitHub Discussions, Issues","0.16, 0.17, develop","CentOS 7, CentOS 8, Ubuntu 18, Ubuntu 20",200 - 500,"3.7, 3.8",Do it!,"Spack environments, spack view","Environments, spack containerize, Chaining (upstreams), Stacks (matrices in environments), Build caches (binary packages), spack external find, Externals in packages.yaml, Concretization preferences in packages.yaml, New concretizer (clingo), spack develop",Yes -- several,No,"AMD, Intel","NVIDIA Other, AMD Other","gcc, Intel Compilers, Intel OneAPI / dpc++, LLVM, nvcc (CUDA)",Somewhat important,Very Important,Very Important,Not Important,Slightly Important,Somewhat important,Not Important,Not Important,Not Important,Not Important,Not Important,Somewhat important,Somewhat important,Somewhat important,Not Important,"A more usable containerize that allows more container layer reuse or integrates better with other caching mechanims (docker buildkit caches, buildcache).","Yes, I'd attend",Yes,"Documentation, Slack, Source Code",Weekly,No,Probably,Excellent,Excellent,Excellent,Excellent,"Providing consistent software environments for large high energy physics collaboration in both design and production, and with a requirement for long-term reproducibility.",clingo,Updates in dependencies don't generate notification of maintainers of dependents.,Compilers as dependencies,"no, all my PRs are getting accepted quickly :-)",,
12/16/2021 9:12:29,Software Developer,Company,United States,No,"C, C++, Python, Rust, sh/bash/other shell script, MATLAB",Embedded Systems,Used at my site,2,"Slack Discussions, Issues",0.16,Ubuntu 18,200 - 500,"3.7, 3.8",Do it!,Spack environments,"Environments, spack containerize, Build caches (binary packages), build-env (debug a build), Concretization preferences in packages.yaml, spack develop",Yes -- just one,Yes,"Intel, ARM",NVIDIA Other,"gcc, AMD ROCmCC / hipcc",Very Important,Very Important,Not Important,Slightly Important,Slightly Important,Not Important,Not Important,Slightly Important,Not Important,Slightly Important,Very Important,Very Important,Not Important,Not Important,Critical,,"Yes, I'd attend",No,"Documentation, Slack, Coworkers, GitHub, Source Code",Daily,Probably not,Probably,Good,Excellent,Good,Good,"We use spack to develop software. It's our primary dependency management system. We have our own build cache, our own package repository, and some modifications to allow s3 as a source for resources/buildcaches.",Consistent builds across many teams working together!,Staged packages with versions from git branches do not update on subsequent installs. That means if you have ever staged a package (built from source) it will never update it unless you uninstall it / clean it out.,,,,
12/16/2021 9:17:14,System Administrator,University HPC/Computing Center,United States,No,"C, Python, Java","Traditional HPC / Simulation, Statistics / Data Analysis, AI/ML, Computer Science Research, Bioinformatics, High Energy Physics",Word of mouth,4,Packages,"0.17, develop","RHEL 7, RHEL 8, Fedora","500-1,000","2.7, 3.6, 3.9",I'd live (I can provide Python 3 somehow),Lmod,"Environments, Module generation, Concretization preferences in packages.yaml, New concretizer (clingo), spack install --reuse",Yes -- just one,No,"AMD, Intel","NVIDIA Volta, NVIDIA Ampere","gcc, Intel OneAPI / dpc++, LLVM, nvcc (CUDA)",Somewhat important,Somewhat important,Slightly Important,Slightly Important,Slightly Important,Very Important,Slightly Important,Very Important,Not Important,Somewhat important,Very Important,Very Important,Somewhat important,Slightly Important,Slightly Important,,Maybe,Yes,"Documentation, Slack, Source Code",Weekly,Probably not,Probably,Good,Excellent,Good,Excellent,"We have a couple clusters we manage. This allows us to more easily have a central software repository for our users, the environment I'm currently working the bugs out of has ~400 packages in it, and that's excluding a bunch of r- and py- packages.",Environments and the new concretizer.,"Adapting some of the more pain-in-the-ass implementations of build systems in academic software. Anything ncbi seems to put out is a nightmare. We tend to do many of the insane bioinformatics pipelines as containers since the sheer number of new packages might be large. I love when spack 'just works' from a 'spack create' but that's not always the case. These are not issues I expect to be resolved, they're just the nature of working with projects that no one really took care in designing to be used in a package manager.","This is probably me not fully groking the paradigm around environments, but I'd like it if I could provide a list of specs, with a given compiler(s) in an environment yaml and have spack boostrap the whole environment, compiler and all. With the end result being a directory containing the root, another containing the lmod modules and me being able to export those two dirs via nfs and have that mount on nodes and just work. My current environment is pretty close to this, but I have all the compilers for it in the regular spack (default environment?) with this environment referring to those.  This may already be possible and I've just not figured out how to do it.","Nothing immediately comes to mind, and we generally contribute them when we find them missing.",Not really. I like the project. I like how it's evolved. And I like how generally approachable it is.,
12/16/2021 9:17:55,Computational Scientist,Other Public Research Lab,Canada,No,"C++, Julia",Traditional HPC / Simulation,Birds-of-a-feather (BOF) at conference,4,"Packages, Core Features, GitHub Discussions, Issues","develop, custom fork","macOS, RHEL 7, Ubuntu 18, Ubuntu 20",10 - 100,"3.6, 3.7, 3.8, 3.9, 3.10",Do it!,spack view,"Environments, New concretizer (clingo)",No,No,"AMD, Intel, IBM Power, ARM","NVIDIA Volta, NVIDIA Ampere","gcc, NVHPC (new NVIDIA PGI compilers), LLVM, nvcc (CUDA)",Somewhat important,Very Important,Somewhat important,Very Important,Slightly Important,Slightly Important,Not Important,Not Important,Not Important,Not Important,Not Important,Not Important,Not Important,Not Important,Not Important,"Provide better structured documentation. I'm sure it's all there, but I can never find it.

- When I want to learn about a new future, the search function in the documentation is often quite useless; it points to many unrelated pages.
- The table of contents isn't structured in a way that helps me find things.
- Many concepts are introduced somewhere, but without the necessary details.
- The documentation mixes an outline of the fundamental concepts, introductory examples, and a technical reference.

There's a lot of documentation, and it doesn't seem that the current developers have both the expertise and the time to improve it significantly. I wonder whether hiring an expert would make sense. This isn't so much about adding some missing bits, but about overhauling the overall structure (maybe break it into several pieces for different audiences?) and ensuring that the ""user stories"" for the documentation's readers are all covered.",No,No,"Documentation, Slack, Source Code",Monthly,No,No,Bad,Good,Good,Good,"I want (as much as possible) identical toolchains on laptops and HPC systems. I want the same version of GCC, CUDA, HDF5, ... everywhere, since this makes it much simpler to install applications.",Environments with `concretization: together`,"Compilers are not first-class dependencies. That means I have to run Spack several times to first install a compiler, then ""find"" it, and then use it, and manually maintain separate `spack.yaml` files. Also, re-building a compiler often invalidates all installed packages, and Spack doesn't realize this, requiring a `spack uninstall --all %gcc@11.2` to avoid the inconsistencies.",Make compilers first-class dependencies. Or restructure the documentation. Either would be awesome.,,Please make compilers first-class dependencies. Handling this is the major complication that prevents me from pushing Spack as THE dependency handling tool for our application.,
12/16/2021 9:26:37,Research Software Engineer (RSE),University research group,United States,Yes,"C, C++, Python, sh/bash/other shell script",Computer Science Research,Todd told me years ago,5,"Packages, Slack Discussions, GitHub Discussions, Issues",develop,"macOS, RHEL 8, Ubuntu 18, Ubuntu 20, Cray XC, Cray XT",10 - 100,"2.7, 3.8",Do it!,"spack load, spack build-env","spack external find, Externals in packages.yaml, spack load, dev-build",No,No,"AMD, Intel, IBM Power, ARM","NVIDIA T4, NVIDIA Volta, NVIDIA Ampere, NVIDIA Other, AMD MI100, AMD MI200, AMD Other, Intel Xe (Ponte Vecchio)","gcc, Intel Compilers, Intel OneAPI / dpc++, PGI, NVHPC (new NVIDIA PGI compilers), LLVM, AMD ROCmCC / hipcc, nvcc (CUDA), CCE (Cray Compilers), armclang",Very Important,Very Important,Very Important,Slightly Important,Not Important,Not Important,Not Important,Very Important,Not Important,Critical,Very Important,Not Important,Critical,Not Important,Not Important,,"Yes, I'd attend",Yes,"Documentation, Slack, Coworkers, GitHub, spack help, Source Code",Monthly,No,Probably not,Good,Good,Good,Good,,,overwhelming options,,,,
12/16/2021 9:36:17,Scientist/Researcher,University research group,Germany,No,"C++, CUDA","Computer Science Research, Bioinformatics",Twitter,0,No,0.17,Ubuntu 20,1 - 10,3.8,Do it!,spack load,"Environments, Module generation, spack containerize, Build caches (binary packages), spack-python (Python scripting), Python extensions (link python packages into interpreter prefix), Concretization preferences in packages.yaml, New concretizer (clingo), spack install --reuse, spack load",No,Yes,"AMD, Intel, ARM","NVIDIA Volta, NVIDIA Ampere","gcc, NVHPC (new NVIDIA PGI compilers), LLVM, nvcc (CUDA), armclang",Very Important,Somewhat important,Slightly Important,Somewhat important,Very Important,Very Important,Somewhat important,Very Important,Not Important,Very Important,Very Important,Critical,Critical,Somewhat important,Somewhat important,—reuse in config files; build for multiple arch at once by default,Maybe,Yes,"Documentation, Slack, GitHub",Weekly,Probably not,Probably not,Good,OK,Good,Excellent,Mini lab cluster consisting of 6 very heterogenous nodes,,Pytorch does not build due to some MKL fuckup,Keep up the good work!,,,
12/16/2021 10:52:03,Research Software Engineer (RSE),"DOE/NNSA Lab (e.g., LLNL/LANL/SNL)",United States,Yes,"C, C++, Python, Perl, sh/bash/other shell script, MATLAB","Traditional HPC / Simulation, Statistics / Data Analysis, AI/ML, Computer Science Research, High Energy Physics, Compiler Testing",Word of mouth,3,"Packages, Core Features, Slack Discussions, GitHub Discussions, Issues","0.16, 0.17","macOS, RHEL 8, CentOS 7, CentOS 8, Ubuntu 18, Ubuntu 20, Debian 10, Debian 11",100 - 200,"2.7, 3.7, 3.8, 3.9, 3.10",I'd live (I can provide Python 3 somehow),"Spack environments, spack view","Environments, Build caches (binary packages), build-env (debug a build), spack external find, Externals in packages.yaml, Concretization preferences in packages.yaml, New concretizer (clingo), spack develop",Yes -- several,Yes,"AMD, Intel, IBM Power, ARM","NVIDIA T4, NVIDIA Volta, NVIDIA Ampere, AMD MI100, AMD MI200, AMD Other, Intel Xe (Ponte Vecchio)","gcc, Intel Compilers, LLVM, AMD ROCmCC / hipcc, nvcc (CUDA), IBM XL, CCE (Cray Compilers), armclang",Somewhat important,Somewhat important,Somewhat important,Slightly Important,Slightly Important,Very Important,Not Important,Very Important,Not Important,Critical,Very Important,Critical,Somewhat important,Slightly Important,Very Important,,Maybe,Yes,"Documentation, Slack, Coworkers, GitHub, Source Code, Email",Monthly,Probably not,No,Excellent,Good,OK,OK,"spack develop, llnl.wci hacking on packages.",getting the externals and such in place to make editing ,"There are lots of gotchas when using spack-- disabling home directories, fixing clang+cuda, knowing what an obscure error message means, working around NFS timing problems when using an environment with an attached view.",Take over the world so I don't have to figure out a new build system,"externals for hdf5 would be nice.  Libressl detection/building for macOS might be helpful, so I can find it as an external. Python modules are wonky-- whenever I build python modules I often need to build python as well or environments don't work.","Spack has replaced ""make"" for me in day to day work.",
12/16/2021 11:07:41,Software Developer,"DOE/NNSA Lab (e.g., LLNL/LANL/SNL)",United States,Yes,"C, Python, sh/bash/other shell script",Traditional HPC / Simulation,Used at my site,5,"Packages, GitHub Discussions, Issues",develop,"macOS, RHEL 7, RHEL 8",10 - 100,3.9,Do it!,Spack environments,"Environments, Externals in packages.yaml, Concretization preferences in packages.yaml, spack develop",No,No,"AMD, Intel, IBM Power, ARM",NVIDIA Volta,"gcc, LLVM, CCE (Cray Compilers)",Slightly Important,Very Important,Somewhat important,Slightly Important,Slightly Important,Very Important,Somewhat important,Somewhat important,Slightly Important,Critical,Slightly Important,Somewhat important,Slightly Important,Slightly Important,Slightly Important,,Maybe,Yes,"Documentation, Slack, Coworkers, spack help",Monthly,No,Probably not,Good,Good,Good,Good,develop multiple packages which depend on each other,developer environments,,move packages out of mainline spack repo,,,
12/16/2021 11:22:18,Computational Scientist,Other Public Research Lab,France,No,"Fortran, Perl",Traditional HPC / Simulation,Word of mouth,0,"Packages, Issues","0.17, develop","macOS, RHEL 7, RHEL 8, CentOS 7, Ubuntu 18, Ubuntu 20",1 - 10,"2.7, 3.6, 3.8",Do it!,"spack load, Spack environments, Environment Modules (TCL modules), spack view","Environments, Module generation, Chaining (upstreams), build-env (debug a build), spack external find, Externals in packages.yaml, New concretizer (clingo), spack develop",Yes -- several,No,"AMD, Intel, ARM",NVIDIA Ampere,"gcc, Intel Compilers, Intel OneAPI / dpc++, NVHPC (new NVIDIA PGI compilers), LLVM, AMD ROCmCC / hipcc, armclang",Very Important,Somewhat important,Somewhat important,Not Important,Slightly Important,Somewhat important,Not Important,Somewhat important,Not Important,Very Important,Slightly Important,Very Important,Very Important,Not Important,Slightly Important,,Maybe,No,"Documentation, Coworkers, spack help",Daily,Probably,No,Excellent,Good,OK,Excellent,"My private code became very complicated to compile with many optional dependencies, such as MPI, OpenMP, gsl, mpfr, HYPRE, Silo, and targetting many OS/Compilers was a pain. I also had VisIt's plugins to provide (VisIt from LLNL). With spack, it all became easy. ","Install packages on a company computer as a user, not admin. Very easily manage variants,  especially for Hypre from LLNL.","Well, very deep dependencies, but that's unavoidable. I use the external feature to cut deps on basic tools, but it is a bit artisanal since many libs do not have an external feature.","I would be happy some basic libs to provide an ""external find"" feature (Christmas is soon). This could be connected with the already available modules on the host. My company uses Esaybuild to set modules, which I very often want to use as external packages so that both I do not waste resource to compile an existing stuff and I use the corporate recommended version - unless I'm not satisfied with it. ","VisIt from LLNL is in spack as a baby. I would like it to be made robust. Right now it is VERY difficult to compile succesfully. I would be happy to contribute, but I can't do it without help from visit developers.","Spack is the thing I dreamed of 20 years long, without thinking it could be possible. You made it, waooh ! For my job, it forced me to be more clear in how I organized my code and services. I found help and kindness from many (key) reviewers when I contributed to packages, that was a very nice experience.",
12/16/2021 11:54:43,Computational Scientist,"DOE/NNSA Lab (e.g., LLNL/LANL/SNL)",United States,Yes,"C++, Python, sh/bash/other shell script","Traditional HPC / Simulation, Computer Science Research, Compiler Testing",Used at my site,0,Core Features,"0.17, develop","RHEL 8, Ubuntu 20, Arch, Windows Subsystem for Linux (WSL)",200 - 500,"2.7, 3.8",I'd live (I can provide Python 3 somehow),"spack load, Spack environments","Environments, spack containerize, Chaining (upstreams), Build caches (binary packages), build-env (debug a build), spack-python (Python scripting), Externals in packages.yaml, New concretizer (clingo), spack install --reuse",Yes -- several,No,"AMD, Intel, IBM Power","NVIDIA Volta, NVIDIA Ampere, AMD MI200, AMD Other","gcc, Intel OneAPI / dpc++, LLVM, AMD ROCmCC / hipcc, nvcc (CUDA), CCE (Cray Compilers)",Slightly Important,Critical,Slightly Important,Not Important,Slightly Important,Somewhat important,Not Important,Very Important,Slightly Important,Critical,Critical,Not Important,Very Important,Not Important,Very Important,,"Yes, I'd attend",Yes,Coworkers,Daily,Probably,Probably,Bad,OK,OK,OK,Use spack to manage tpls for the Spheral project at LLNL. Currently using it in our workflow to generate TPLs and host configs with CachedCmakePackage,Setting up a fully automated TPL system  for all of our build configurations is a god send.,"Speed of concretizer, manually defining a large list of system level packages, gpg keys for build caches are also difficult to work with at times. Generally the documentation is difficult to navigate and find answers with full fleshed out examples for more complex spack features.","Documentation review / restructuring, a lot of features and commands are hard to find documentation on outside of --help. A deeper understanding of what each command actually does under the hood would be really useful. Developer / spack scripting documentation would be useful too. Writing custom scripts can require traversing the spack source code to find what is needed.",,,
12/16/2021 12:33:06,Scientist/Researcher,"DOE/NNSA Lab (e.g., LLNL/LANL/SNL)",United States,No,C++,Traditional HPC / Simulation,Word of mouth,2,"Issues, Mattermost discussions",c8f58c5f1d660bfdb5f4f50d1d2a9f294435ee4d,"Fedora, TOSS",1 - 10,"2.7, 3.7",I'd live (I can provide Python 3 somehow),,"Externals in packages.yaml, Concretization preferences in packages.yaml, uberenv",Yes -- just one,Yes,"AMD, Intel",NVIDIA Volta,"gcc, LLVM",Critical,Slightly Important,Slightly Important,Slightly Important,Slightly Important,Slightly Important,Not Important,Slightly Important,Somewhat important,Somewhat important,Slightly Important,Slightly Important,Somewhat important,Somewhat important,Slightly Important,Support for old branches (not just move to a completely new release),Maybe,No,"I've tried Mattermost, but I basically haven't gotten the support I need. The spack build on my local machine has been broken for months.",Monthly,Probably not,Probably,OK,Bad,OK,OK,"The LiDO project uses spack to build the third-party libraries it needs. The VBL++ project tried to use spack to build tools and libraries on an old version of Oracle Linux. We couldn't get any support, so we eventually replaced spack with a hand written Bourne shell.",,"Getting support from the spack team. It seems that the spack team is not willing to address issues on old releases. I run into a problem with spack, I try to get help, nothing happens, and I give up building on my Fedora 33 machine.",Budget enough resources to address LLNL code teams.,,,
12/16/2021 12:51:11,Research Software Engineer (RSE),"DOE/NNSA Lab (e.g., LLNL/LANL/SNL)",United States,Yes,"C++, Python",AI/ML,Word of mouth,3,No,develop,"macOS, RHEL 7, RHEL 8",10 - 100,3.7,Do it!,"spack load, Spack environments","Environments, Module generation, build-env (debug a build), spack external find, New concretizer (clingo)",No,Yes,"AMD, Intel, IBM Power","NVIDIA Volta, NVIDIA Ampere, AMD MI100, AMD MI200","gcc, LLVM, AMD ROCmCC / hipcc, nvcc (CUDA)",Critical,Very Important,Somewhat important,Slightly Important,Very Important,Not Important,Not Important,Somewhat important,Not Important,Critical,Critical,Somewhat important,Very Important,Not Important,Slightly Important,,Maybe,Yes,"Documentation, Coworkers, GitHub",Monthly,Probably,"Yes, definitely!",Good,Excellent,Good,OK,,,,,,,
12/16/2021 12:57:54,DevOps/SRE,"DOE/NNSA Lab (e.g., LLNL/LANL/SNL)",United States,Yes,"Fortran, C, C++, Python, sh/bash/other shell script",Traditional HPC / Simulation,Word of mouth,5,"Packages, Issues",0.16,"RHEL 7, RHEL 8","> 1,000",2.7,I'd live (I can provide Python 3 somehow),,,Yes -- several,No,"AMD, Intel, IBM Power, ARM","NVIDIA Ampere, NVIDIA Other, AMD MI200, AMD Other","gcc, Intel Compilers, Intel OneAPI / dpc++, PGI, NVHPC (new NVIDIA PGI compilers), LLVM, AMD ROCmCC / hipcc, nvcc (CUDA), IBM XL, CCE (Cray Compilers), armclang",Very Important,Not Important,Slightly Important,Not Important,Not Important,Slightly Important,Not Important,Somewhat important,Not Important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Slightly Important,Critical,,"Yes, I'd attend",Yes,Coworkers,Yearly,No,No,Good,Good,Bad,Good,,,,,,,
12/16/2021 13:09:59,Scientist/Researcher,University research group,United States,No,"Python, sh/bash/other shell script",AI/ML,Word of mouth,5,"Packages, Core Features, Documentation, Slack Discussions, GitHub Discussions, Issues, Mailing List, Tools/integrations",develop,"macOS, Ubuntu 18","> 1,000","3.6, 3.8, 3.9",Do it!,"spack load, Spack environments","Environments, spack external find, Externals in packages.yaml, Concretization preferences in packages.yaml, New concretizer (clingo), spack install --reuse, spack test, spack load",No,No,"AMD, Intel",NVIDIA Other,"gcc, LLVM, nvcc (CUDA)",Critical,Somewhat important,Very Important,Very Important,Very Important,Somewhat important,Not Important,Not Important,Slightly Important,Slightly Important,Slightly Important,Not Important,Slightly Important,Not Important,Not Important,,"Yes, I'd present something!",Yes,"Documentation, Slack, GitHub, spack help, Source Code",Weekly,No,No,Excellent,Excellent,Excellent,Excellent,,,"Clingo concretization error messages are useless, separate concretization of build deps (Jupyter ecosystem requires conflicting versions of jupyter-packaging), need publicly available binary packages, need build testing for every PR (not just E4S packages)",Public binary cache,,,
12/16/2021 14:09:56,Research Software Engineer (RSE),"DOE/NNSA Lab (e.g., LLNL/LANL/SNL)",United States,Yes,"C, sh/bash/other shell script",Traditional HPC / Simulation,Used at my site,3,Packages,develop,"macOS, RHEL 7, RHEL 8, Cray XC",100 - 200,"2.7, 3.6, 3.7",I'd live (I can provide Python 3 somehow),"spack load, Spack environments","Environments, spack containerize, build-env (debug a build), spack external find, Externals in packages.yaml, Concretization preferences in packages.yaml, New concretizer (clingo), spack load, spack diff (compare two specs)",No,No,"AMD, Intel, IBM Power, ARM",NVIDIA T4,"gcc, Intel Compilers, IBM XL, CCE (Cray Compilers)",Slightly Important,Slightly Important,Not Important,Not Important,Not Important,Not Important,Not Important,Slightly Important,Not Important,Very Important,Somewhat important,Somewhat important,Not Important,Somewhat important,Somewhat important,,Maybe,Yes,"Documentation, Slack, Mailing List, Coworkers, GitHub, Email",Weekly,Probably not,Probably,Good,Excellent,Good,Good,"Set up env for building/testing, activate env, develop software",Convenience of testing various build/version environments,N/A,N/A,N/A,N/A,
12/16/2021 16:20:46,Research Software Engineer (RSE),"DOE/Office of Science Lab (e.g., ORNL/ANL/LBL)",United States,Yes,Python,"Traditional HPC / Simulation, AI/ML, Ensembles",Presentation,3,"Packages, Slack Discussions, Issues",develop,"RHEL 8, Ubuntu 20, SLES12, SLES15, Cray XC",10 - 100,"3.7, 3.8, 3.9, 3.10",Do it!,"spack load, Lmod","Module generation, Externals in packages.yaml, Distributed Builds (srun/mpirun spack install), spack test, spack load",No,No,"AMD, Intel, IBM Power, ARM","NVIDIA Volta, NVIDIA Ampere, AMD MI100, Intel Xe (Ponte Vecchio)","gcc, Intel Compilers, Intel OneAPI / dpc++, LLVM, CCE (Cray Compilers)",Very Important,Not Important,Not Important,Somewhat important,Slightly Important,Not Important,Not Important,Somewhat important,Not Important,Very Important,Slightly Important,Somewhat important,Not Important,Not Important,Slightly Important,Easier to express packages in packages.yaml (or spack.yaml) and keep up to date. E.g. Say use any python dependency you can find for this python (numpy/scipy in site-packages etc). Or tell it to use the most recent python module on the system (or the current default). Same for other modules MPI/compiler etc.,"Yes, I'd attend",No,"Documentation, Slack, GitHub",Monthly,Probably not,Probably not,Bad,OK,Good,OK,"I build mainly with python packages at the top, with many non-python dependencies, on various HPC platforms as well as laptop. ","My use of Spack has been sporadic, generally coinciding with testing for software releases. Help with getting smoke tests working was good.","The documentation may be good in a lot of aspects, but for python, its sometimes been difficult to work out the best approach, given the need to load modules. Then ""spack load -r"" seemed to no longer exist. A walk-through example of building a software stack which includes python packages would be useful. I also found incorporation of testing confusing, though I had help with this from E4S/LLNL, which was good.

It is often very hard to work out what to do when one of your dependencies fails to build with Spack, or it says cannot run C programs, even though the compiler is found and listed.

It is frustrating dealing with packages.yaml, or spack.yaml as these are generally out of date. As mentioned, ability to specify using default module or something that would keep these up to date would be useful.",,,,
12/16/2021 16:34:50,Software Developer,Other Public Research Lab,United States,No,"Fortran, C",Traditional HPC / Simulation,Used at my site,0,"Packages, Issues",develop,"macOS, CentOS 7, Ubuntu 18, Ubuntu 20",100 - 200,3.8,I'd live (I can provide Python 3 somehow),"Spack environments, Lmod, spack view, Containers","Environments, Module generation, Stacks (matrices in environments), spack external find, Externals in packages.yaml, Concretization preferences in packages.yaml, New concretizer (clingo)",Yes -- just one,Yes,"AMD, Intel",NVIDIA Other,"gcc, Intel Compilers, Intel OneAPI / dpc++, NVHPC (new NVIDIA PGI compilers), LLVM, CCE (Cray Compilers)",Somewhat important,Critical,Very Important,Not Important,Slightly Important,Not Important,Not Important,Critical,Not Important,Somewhat important,Slightly Important,Somewhat important,Not Important,Very Important,Not Important,"LMod module customization per package (prereq, try-load, etc)",Maybe,No,"Documentation, Slack, GitHub, Source Code",Weekly,Probably not,Probably not,Good,Excellent,Good,Good,We use Spack for to distribute our software stack to users to use themselves and for central installations on several HPC systems using Spack environments.,"We had a home-rolled solution similar in spirit to Spack using Bash scripts, but not nearly as advanced, and Spack offers many more features and a better package format with package.py.","Compilers not being treated as proper dependencies and having to separate it out into two steps to bootstrap a compiler.

I would like to be able to re-use or include a Spack environment's spec list in multiple spack.yaml configs. For example, we have configurations for multiple HPC systems with their own compilers.yaml, packages.yaml, and we include those in spack.yaml, but you have to edit the spack.yaml for each platform. It would be nice to also be able to include the spec list so each machine can have its own spack.yaml just for itself without duplicating the spec list or having to edit the file.

Per-package setting of compiler flags through packages.yaml

Better support/documentation for generating an LMod hierarchy using external compilers (meta modules)
",,,,
12/16/2021 16:57:01,User Support Staff,University HPC/Computing Center,United States,No,"Fortran, R, sh/bash/other shell script","Traditional HPC / Simulation, Statistics / Data Analysis",Birds-of-a-feather (BOF) at conference,5,Slack Discussions,0.16,"CentOS 8, openSuSE","> 1,000","3.7, 3.8",Do it!,"Spack environments, Lmod","Environments, Module generation, Chaining (upstreams), Stacks (matrices in environments), Build caches (binary packages), build-env (debug a build), Externals in packages.yaml, Concretization preferences in packages.yaml",Yes -- just one,Yes,"AMD, Intel","NVIDIA T4, NVIDIA Ampere","gcc, Intel Compilers, Intel OneAPI / dpc++, NVHPC (new NVIDIA PGI compilers), nvcc (CUDA)",Very Important,Very Important,Very Important,Very Important,Somewhat important,Somewhat important,Slightly Important,Critical,Not Important,Very Important,Critical,Critical,Critical,Somewhat important,Somewhat important,,"Yes, I'd attend",Yes,"Documentation, Slack",Monthly,No,No,Excellent,Excellent,Excellent,Excellent,"have a cluster with mixed architecture - Ivybridge, Haswell, Broadwell, Skylake, CascadeLake and AMD Rome cpu. Use spack environments to build for ivybridge, haswell and skylake targets",ability to build environment for different architectures,none yet,haven't tried out 0.17 to recommend improvements maybe allowing modules hierarchy in LMOD for system architectures similar to TCL modules. currently I use a different lmod_root for each architecture. ,,Thanks for all your hard work.,
12/16/2021 18:31:26,Software Developer,Company,Canada,No,"Python, Go",Traditional HPC / Simulation,Word of mouth,2,Packages,develop,"macOS, CentOS 7, Ubuntu 20",100 - 200,"3.6, 3.7, 3.8, 3.9",Do it!,Spack environments,"Environments, build-env (debug a build), spack external find, Externals in packages.yaml, spack install --reuse",Yes -- just one,No,"AMD, Intel","NVIDIA Volta, NVIDIA Ampere","gcc, Intel OneAPI / dpc++, LLVM",Somewhat important,Very Important,Slightly Important,Critical,Very Important,Slightly Important,Not Important,Not Important,Not Important,Critical,Slightly Important,Slightly Important,Slightly Important,Critical,Critical,,"Yes, I'd attend",Yes,"Documentation, Slack, GitHub",Weekly,Probably,Probably,Excellent,Excellent,OK,Good,Replace bash scripts we used to install dependencies for software. Distribute to arbitrary clusters,The devs/community is very active/helpful,Pulling develop for a bug fix pulls new packages which causes large (unnecessary reinstalls),Separate repo for packages (Ties in to my answer for biggest pain point).,No! Thanks!!,,
12/16/2021 21:42:50,Computational Scientist,University HPC/Computing Center,United States,No,"C, C++, Python, Go, sh/bash/other shell script, Java",Traditional HPC / Simulation,Word of mouth,0,"Packages, Core Features, Issues","0.17, develop, custom fork",RHEL 7,100 - 200,3.9,Do it!,Lmod,"Module generation, Externals in packages.yaml, Concretization preferences in packages.yaml, New concretizer (clingo)",No,Yes,"AMD, Intel",NVIDIA Volta,"gcc, Intel Compilers, Intel OneAPI / dpc++, LLVM",Very Important,Not Important,Not Important,Not Important,Not Important,Somewhat important,Not Important,Slightly Important,Not Important,Somewhat important,Very Important,Not Important,Not Important,Not Important,Not Important,,Maybe,Yes,"Documentation, Slack, spack help, Source Code",Weekly,Probably not,"Yes, definitely!",Excellent,Excellent,OK,Excellent,"BYU HPC- we use spack to centrally install software for hundreds of researchers in all fields (the whole university). Typically a user will request software, then we will go and install it with spack or else try to make a new spack package for the software. Sometimes we install things externally and add them to packages.yaml ",Saved so much time tracking down dependencies! Used to do everything 100% by hand from source.,Permissions on group-accessible locations,I probably won’t be using it anymore since I’m graduating and leaving the university for a software engineer job so I’m not sure,,Thank you for all the help getting BYU going with Spack! You have been great to work with! -Paul Spencer,
12/17/2021 0:02:52,Computational Scientist,University research group,Germany,No,C++,Traditional HPC / Simulation,Word of mouth,4,Packages,develop,"macOS, CentOS 7, Ubuntu 20",10 - 100,3.8,Do it!,"Spack environments, Environment Modules (TCL modules)","Environments, Externals in packages.yaml, Concretization preferences in packages.yaml",No,No,"AMD, Intel","NVIDIA Volta, AMD MI200","gcc, Intel Compilers",Somewhat important,Very Important,Very Important,Not Important,Critical,Very Important,Not Important,Slightly Important,Not Important,Very Important,Slightly Important,Very Important,Somewhat important,Slightly Important,Not Important,,"Yes, I'd attend",No,"Documentation, GitHub",Monthly,Probably not,Probably not,Excellent,Good,Good,Good,Install packages via slack environment to provide software on our computing custer ,Environments ,,,,,
12/17/2021 0:44:09,Software Developer,University research group,Switzerland,No,"C++, Python, Rust, sh/bash/other shell script","Traditional HPC / Simulation, Statistics / Data Analysis",Word of mouth,4,"Packages, Slack Discussions, Issues","0.16, 0.17","RHEL 7, Ubuntu 20","> 1,000","3.6, 3.7, 3.8, 3.9",Do it!,"spack load, Spack environments, Environment Modules (TCL modules), spack build-env, spack view, Custom script or env vars","Environments, Module generation, Chaining (upstreams), Stacks (matrices in environments), build-env (debug a build), spack-python (Python scripting), Command Extensions, Python extensions (link python packages into interpreter prefix), Externals in packages.yaml, Concretization preferences in packages.yaml, Distributed Builds (srun/mpirun spack install), New concretizer (clingo), spack develop, spack install --reuse, spack test, spack load, spack diff (compare two specs)",Yes -- just one,Yes,"AMD, Intel",NVIDIA Volta,"gcc, Intel Compilers, Intel OneAPI / dpc++, NVHPC (new NVIDIA PGI compilers), LLVM, nvcc (CUDA)",Critical,Very Important,Very Important,Not Important,Not Important,Slightly Important,Not Important,Somewhat important,Not Important,Not Important,Critical,Critical,Critical,Slightly Important,Very Important,,"Yes, I'd present something!",No,"Documentation, Slack, GitHub, Source Code",Weekly,Probably not,Probably,Excellent,Excellent,Good,Good,"I'm both providing a continuous deployment with Spack as well as developing software with the help of Spack.

For the continuous deployment, we have a multi-stage GitLab setup that uses chains/upstreams and externals. Modern compilers and tools are provided as externals, our scientific software stack is then build with those and provided as upstreams as well as modules to users.

We generally run the build pipeline several times a day, and heavily rely on Spack to keep our C++/Python software stack updated.",Everything,"The current external / provider preference behavior with the new concretizer: when providers are also externals, the provider preference in packages.yaml is voided.","Build dependencies independently considered of link dependencies! I'd like to build a single spec in a DAG with Intel, and the whole rest with GCC… that's currently a bit of a pain.",Everything good :),Keep up the great work!,
12/17/2021 0:53:26,Scientist/Researcher,Other Public Research Lab,Italy,No,"C++, Python","Traditional HPC / Simulation, AI/ML",Word of mouth,4,Packages,0.17,"CentOS 7, Arch",200 - 500,"3.6, 3.9",Do it!,"spack load, Spack environments, Environment Modules (TCL modules)","Environments, Module generation, spack external find, New concretizer (clingo), spack load",No,No,"AMD, Intel","NVIDIA Ampere, AMD Other","gcc, Intel Compilers, LLVM",Somewhat important,Very Important,Very Important,Slightly Important,Somewhat important,Somewhat important,Not Important,Very Important,Not Important,Critical,Very Important,Critical,Somewhat important,Somewhat important,Slightly Important,,"Yes, I'd attend",Yes,"Documentation, Mailing List, Coworkers",Weekly,Probably not,Probably,Good,Excellent,Good,Good,Build software for our cluster and local machines in the most portable way possible,Started using spack environments,spack external find is not very reproducible on different linux distros,test on more distros,,,
12/17/2021 1:24:05,User Support Staff,University HPC/Computing Center,Switzerland,No,"sh/bash/other shell script, Lua",Traditional HPC / Simulation,Word of mouth,4,"GitHub Discussions, Issues",custom fork,CentOS 7,"500-1,000",2.7,I'd live (I can provide Python 3 somehow),Lmod,Module generation,Yes -- just one,Yes,"AMD, Intel","NVIDIA Volta, NVIDIA Ampere, NVIDIA Other","gcc, Intel Compilers, Intel OneAPI / dpc++, nvcc (CUDA)",Very Important,Not Important,Not Important,Not Important,Not Important,Not Important,Not Important,Very Important,Not Important,Somewhat important,Not Important,Not Important,Not Important,Not Important,Not Important,,Maybe,No,"Documentation, GitHub, Source Code",Monthly,Probably not,Probably not,Excellent,Excellent,Excellent,Excellent,I use spack to provide toolchains and parts of the software stacks on our universities HPC cluster. It is very usefull to install a lot of standard packages. But I don't exclusively use spack for everything. There are certain things that I prefer to install manually or through other means,Nothing special to point out here. It is just a great software that makes my life easier,Nothing special to point out here,"Keep it stable, don't make too many changes which are not backwards compatible, such that  people using older versions can still backport new packages etc.",No,You are doing a great job. Thank you for providing such a good software,
12/17/2021 7:35:45,Research Software Engineer (RSE),University HPC/Computing Center,Switzerland,No,"C, C++, Python, sh/bash/other shell script, Julia",Traditional HPC / Simulation,Used at my site,2,"Packages, Core Features, Documentation, Slack Discussions, GitHub Discussions, Issues","0.17, develop, custom fork","Ubuntu 20, SLES15",100 - 200,3.8,I'd live (I can provide Python 3 somehow),Spack environments,"Environments, Module generation, spack containerize, Build caches (binary packages), build-env (debug a build), spack-python (Python scripting), spack external find, Externals in packages.yaml, Concretization preferences in packages.yaml, New concretizer (clingo), spack develop, spack diff (compare two specs)",No,Yes,"AMD, Intel, ARM","NVIDIA Volta, NVIDIA Ampere, AMD MI200","gcc, LLVM",Very Important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Very Important,Somewhat important,Somewhat important,Not Important,Very Important,Very Important,Very Important,Very Important,Somewhat important,Very Important,,"Yes, I'd attend",No,"Slack, Coworkers, GitHub",Monthly,No,Probably not,Good,Good,Good,Good,,,,,,,
12/17/2021 7:59:15,User Support Staff,"DOE/Office of Science Lab (e.g., ORNL/ANL/LBL)",United States,Yes,"Python, sh/bash/other shell script",Traditional HPC / Simulation,Word of mouth,3,"Documentation, Slack Discussions, Issues",0.17,"SLES15, Cray XC, Cray EX","> 1,000","3.6, 3.7",Do it!,"Spack environments, Lmod, Environment Modules (TCL modules)","Environments, Module generation, Stacks (matrices in environments), Build caches (binary packages), spack external find, Externals in packages.yaml, Concretization preferences in packages.yaml, spack ci (generate GitLab Pipelines), Distributed Builds (srun/mpirun spack install), New concretizer (clingo), spack install --reuse, spack test, spack load",No,No,AMD,NVIDIA Ampere,"gcc, NVHPC (new NVIDIA PGI compilers), CCE (Cray Compilers)",Somewhat important,Very Important,Somewhat important,Not Important,Slightly Important,Slightly Important,Somewhat important,Slightly Important,Not Important,Slightly Important,Somewhat important,Somewhat important,Critical,Very Important,Somewhat important,,"Yes, I'd attend",Yes,"Documentation, Slack, GitHub, spack help, Source Code",Daily,Probably not,No,Excellent,Excellent,OK,Good,,,,,,,
12/17/2021 10:32:54,Scientist/Researcher,"DOE/NNSA Lab (e.g., LLNL/LANL/SNL)",United States,Yes,"C, Python, R, sh/bash/other shell script",Computer Science Research,Used at my site,1,Packages,"0.17, develop","macOS, RHEL 7",200 - 500,3.8,Do it!,spack load,"Environments, build-env (debug a build), spack external find, spack load, spack diff (compare two specs)",Yes -- just one,No,"AMD, Intel, ARM","NVIDIA Ampere, AMD MI200","gcc, NVHPC (new NVIDIA PGI compilers), AMD ROCmCC / hipcc, nvcc (CUDA)",Very Important,Very Important,Not Important,Slightly Important,Somewhat important,Somewhat important,Not Important,Not Important,Not Important,Very Important,Very Important,Somewhat important,Very Important,Not Important,Slightly Important,,Maybe,Yes,"Documentation, Coworkers, spack help",Weekly,Probably,Probably,Good,Good,OK,Excellent,(1) Easily (most of the times) install packages on my Mac laptop. (2) Provide recipes for my software packages so that others (including myself) can install them easily. ,Installing hwloc with the appropriate configuration for GPUs (I contributed to the hwloc recipe),"Some packages do not work well, particularly on my Mac. Installing MPIs, PMIx, Slurm, Flux can be difficult. ",Better support for Mac would be great (my development machine) ,tap and pycotap,"Great work, much appreciated. ",
12/17/2021 10:45:19,Scientist/Researcher,University research group,Czech Republic,No,"C, Python, sh/bash/other shell script, D, julia",Traditional HPC / Simulation,Search,5,"Packages, Issues",0.16,"Ubuntu 18, Ubuntu 20",1 - 10,"3.7, 3.8",Do it!,"Lmod, Environment Modules (TCL modules)","Environments, Module generation, build-env (debug a build), Externals in packages.yaml, Concretization preferences in packages.yaml",Yes -- several,No,"AMD, Intel","NVIDIA Other, AMD Other","gcc, LLVM",Somewhat important,Somewhat important,Slightly Important,Not Important,Slightly Important,Somewhat important,Not Important,Not Important,Not Important,Somewhat important,Very Important,Very Important,Somewhat important,Slightly Important,Slightly Important,,Maybe,No,"Documentation, Mailing List, GitHub",Monthly,Probably not,Probably not,Good,Excellent,Excellent,Good,,,,,,,
12/17/2021 12:17:49,Code user/analyst,"DOE/Office of Science Lab (e.g., ORNL/ANL/LBL)",United States,Yes,C++,Traditional HPC / Simulation,Used at my site,4,"Packages, Issues",0.17,Ubuntu 20,10 - 100,3.8,Do it!,Environment Modules (TCL modules),"Environments, New concretizer (clingo)",No,No,"AMD, Intel","NVIDIA Volta, NVIDIA Ampere, AMD MI200","gcc, LLVM, AMD ROCmCC / hipcc, nvcc (CUDA), CCE (Cray Compilers)",Slightly Important,Somewhat important,Very Important,Slightly Important,Critical,Not Important,Not Important,Slightly Important,Not Important,Critical,Not Important,Critical,Critical,Not Important,Not Important,,Maybe,No,"Documentation, GitHub",Monthly,No,No,Good,Good,Good,Good,,,,,,,
12/17/2021 12:22:02,Software Developer,Other Public Research Lab,United States,No,"C++, Python",Statistics / Data Analysis,Tutorial,2,"Packages, Slack Discussions, Issues",develop,"RHEL 7, Ubuntu 20",1 - 10,3.8,Do it!,"spack load, Spack environments, spack view","Environments, build-env (debug a build), spack external find, New concretizer (clingo), spack develop, spack load",Yes -- several,No,"Intel, IBM Power, ARM","NVIDIA Volta, NVIDIA Ampere","gcc, nvcc (CUDA)",Very Important,Very Important,Somewhat important,Slightly Important,Slightly Important,Very Important,Not Important,Slightly Important,Not Important,Slightly Important,Slightly Important,Somewhat important,Somewhat important,Not Important,Somewhat important,,"Yes, I'd attend",Yes,"Documentation, Slack, spack help, Source Code",Weekly,No,Probably not,Good,Excellent,Good,Excellent,"As a developer working on various packages on various machines, Spack has become essential in my daily work. Easily maintaining build environments in various configurations is invaluable.",spack develop,Easier maintenance of build caches would help with getting other developers on a team on the Spack train.,"Improve error messages when using the Clingo concretizer, add language variants (e.g, c++ language standards)","I tend to roll my own Spack package files for missing packages that aren't too complicated, and I haven't identified any missing packages that don't fit this description",,
12/17/2021 12:39:35,Scientist/Researcher,NREL,United States,Yes,C++,Visualization,Used at my site,1,No,0.17,CentOS 7,1 - 10,3.9,Do it!,spack load,spack load,No,Yes,Intel,NVIDIA Ampere,"gcc, LLVM",Critical,Very Important,Very Important,Somewhat important,Somewhat important,Somewhat important,Slightly Important,Somewhat important,Slightly Important,Somewhat important,Very Important,Very Important,Somewhat important,Slightly Important,Slightly Important,direnv-like support also better ability to easily create local Spack installs to isolate builds,Maybe,No,Documentation,Monthly,Probably not,Probably,OK,OK,Good,OK,We use Spack to do the legwork in bringing in deps for our custom code,Has most of what we need in the package repo,"If the package is not in the repo, it's relatively painful. Latest software takes a bit to get integrated. We find users are creating their own Spack installs all over, which is bloating disk usage.","Perhaps get closer with Guix and other kinds of package management tools. There is too much fragmentation going on, and each additional package system adds more stress. One doesn't have to replace the other, but sharing as much as possible would be great.",,,
12/17/2021 12:45:53,Scientist/Researcher,"DOE/Office of Science Lab (e.g., ORNL/ANL/LBL)",United States,Yes,"C, C++, Python, R, Julia","Traditional HPC / Simulation, High Energy Physics",Tutorial,2,No,"0.16, develop","RHEL 7, CentOS 7",1 - 10,3.8,Do it!,"Spack environments, Lmod","Environments, Module generation, Stacks (matrices in environments), spack external find, Externals in packages.yaml",No,No,"AMD, Intel, IBM Power","NVIDIA Volta, NVIDIA Ampere, AMD MI200","gcc, Intel Compilers, Intel OneAPI / dpc++, LLVM, nvcc (CUDA)",Very Important,Critical,Critical,Somewhat important,Somewhat important,Critical,Slightly Important,Very Important,Not Important,Critical,Somewhat important,Very Important,Very Important,Slightly Important,Very Important,1) Absolute separation of spack state from spack configuration and make configuration invariant. 2) Manage spack state in sqlite and not YAML.,"Yes, I'd attend",Yes,Documentation,Weekly,No,"Yes, definitely!",Good,Good,Bad,Good,Build compiler toolchains and HPC software frameworks and libraries.,Nothing. It currently takes much longer to build complicated environments since it takes many spack build iterations to get things right. ,"Poor quality of package default option settings. Building many ""false"" dependencies because of the way compilers and existing external packages are handled.",Cleanly separate spack state and environment initial configuration. Redesign the way compilers factor into spack specifications.,,Spack is very promising. Maybe spack 1.0 will resolve the current pain points.,
12/17/2021 12:47:43,Computational Scientist,"DOE/Office of Science Lab (e.g., ORNL/ANL/LBL)",United States,Yes,"C++, Python",Traditional HPC / Simulation,Used at my site,4,No,develop,"macOS, CentOS 7",1 - 10,"3.6, 3.7",Do it!,"Spack environments, Environment Modules (TCL modules)",Environments,No,No,"AMD, Intel, IBM Power, ARM","NVIDIA T4, NVIDIA Volta, NVIDIA Ampere, NVIDIA Other, AMD MI100, AMD MI200, AMD Other, Intel Xe (Ponte Vecchio)","gcc, Intel Compilers, Intel OneAPI / dpc++, LLVM, nvcc (CUDA)",Somewhat important,Critical,Critical,Critical,Somewhat important,Somewhat important,Not Important,Somewhat important,Not Important,Somewhat important,Critical,Critical,Critical,Critical,Somewhat important,,Maybe,No,Coworkers,Yearly,Probably not,Probably,OK,OK,OK,Good,,,,,,,
12/17/2021 12:56:08,Computational Scientist,"DOE/NNSA Lab (e.g., LLNL/LANL/SNL)",United States,Yes,"C, C++, Python, sh/bash/other shell script",Traditional HPC / Simulation,Presentation,3,Packages,"0.16, 0.17","macOS, RHEL 7, Ubuntu 20",10 - 100,3.9,Do it!,"Environment Modules (TCL modules), Custom script or env vars","Module generation, spack external find, Externals in packages.yaml, Concretization preferences in packages.yaml, New concretizer (clingo), spack test",No,Yes,"AMD, Intel, IBM Power, ARM","NVIDIA Ampere, AMD MI200, Intel Xe (Ponte Vecchio)","gcc, Intel Compilers, Intel OneAPI / dpc++, LLVM, AMD ROCmCC / hipcc, nvcc (CUDA), IBM XL, CCE (Cray Compilers)",Very Important,Somewhat important,Not Important,Slightly Important,Somewhat important,Somewhat important,Not Important,Somewhat important,Not Important,Very Important,Critical,Somewhat important,Critical,Somewhat important,Somewhat important,,"Yes, I'd attend",Yes,"Documentation, Coworkers, GitHub, spack help, Source Code",Monthly,Probably not,No,Good,Good,Good,Excellent,"I'm a math library developer and use spack to install our dependencies for development and CI testing on various systems (Mac laptops, RHEL desktops, and HPC systems from various vendors). On my laptop and desktop, I generally install a specific version of spack and use modules to access the installed software.",Makes it easy to install a bunch of software. I used to have so many shell scripts to build different libraries.  ,"For some packages that are already installed on my system and listed as buildable: false in my packages.yaml file e.g., CMake, I have to modify the package file in spack to remove conflicts like 
```
conflicts('%gcc platform=darwin',
                msg='CMake does not compile with GCC on macOS yet, '
                'please use %apple-clang. '
                'See: https://gitlab.kitware.com/cmake/cmake/-/issues/21135')
```
because it will cause a build failure with installing another package with gcc that depends on CMake.","Faster builds. Some packages build as fast as if I installed them myself others seem to take much longer.

""Spack Environments for Dummies"" I often install the same development environment on many systems and I think spack environments is the solution I should be using but I'm still running a shell script with all the necessary commands.",,,
12/17/2021 13:02:50,Research Software Engineer (RSE),"DOE/Office of Science Lab (e.g., ORNL/ANL/LBL)",United States,Yes,"C++, Python",Traditional HPC / Simulation,Word of mouth,3,No,develop,"Ubuntu 18, Ubuntu 20, Debian 10, Debian 11","> 1,000","3.8, 3.9",Do it!,Lmod,"Environments, Module generation, Concretization preferences in packages.yaml",No,No,"AMD, Intel","NVIDIA Volta, NVIDIA Ampere, AMD MI100, AMD MI200","gcc, Intel Compilers, Intel OneAPI / dpc++, NVHPC (new NVIDIA PGI compilers), LLVM, AMD ROCmCC / hipcc, CCE (Cray Compilers), armclang",Very Important,Critical,Critical,Somewhat important,Somewhat important,Very Important,Somewhat important,Very Important,Not Important,Very Important,Somewhat important,Very Important,Very Important,Somewhat important,Somewhat important,,Maybe,No,"Documentation, GitHub",Yearly,Probably not,"Yes, definitely!",Excellent,Excellent,Excellent,Excellent,,,,,,,
12/17/2021 13:48:01,Scientist/Researcher,"DOE/Office of Science Lab (e.g., ORNL/ANL/LBL)",United States,Yes,"C, C++, Python, R, sh/bash/other shell script","Traditional HPC / Simulation, Statistics / Data Analysis",Birds-of-a-feather (BOF) at conference,2,Packages,develop,"macOS, RHEL 8, Ubuntu 20, Alpine",10 - 100,"2.7, 3.9",I'd live (I can provide Python 3 somehow),spack load,"Environments, Build caches (binary packages), spack load",Yes -- several,No,"Intel, IBM Power","NVIDIA Volta, NVIDIA Ampere","gcc, Intel Compilers, LLVM, CCE (Cray Compilers)",Somewhat important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Slightly Important,Very Important,Not Important,Very Important,Very Important,Somewhat important,Somewhat important,Very Important,Somewhat important,,"Yes, I'd attend",Yes,"Documentation, GitHub, spack help",Monthly,Probably not,Probably,Good,Good,Good,Good,,,,,,,
12/17/2021 15:23:34,Research Software Engineer (RSE),"DOE/NNSA Lab (e.g., LLNL/LANL/SNL)",United States,Yes,"C, C++, sh/bash/other shell script","Traditional HPC / Simulation, Computer Science Research, Bioinformatics",Presentation,4,"Packages, Issues","develop, E4S latest","RHEL 8, SLES15, Cray XC, Cray EX, Scientific Linux",10 - 100,3.6,Do it!,"Lmod, Environment Modules (TCL modules)","spack external find, Externals in packages.yaml, spack test",No,No,"AMD, Intel, IBM Power","NVIDIA Volta, AMD MI200, Intel Xe (Ponte Vecchio)","gcc, Intel Compilers, Intel OneAPI / dpc++, PGI, NVHPC (new NVIDIA PGI compilers), LLVM, AMD ROCmCC / hipcc, nvcc (CUDA), CCE (Cray Compilers)",Very Important,Very Important,Not Important,Not Important,Slightly Important,Slightly Important,Not Important,Somewhat important,Not Important,Very Important,Somewhat important,Not Important,Somewhat important,Not Important,Not Important,Decoupling package repo from Spack infrastructure repo,Maybe,Yes,"Documentation, Source Code",Monthly,Probably not,No,OK,Good,Good,OK,I'm a package producer/maintainer.,Ability to to reach a wider audience for my software as a package maintainer,"1. As far as the outside world is concerned, Spack has two ""products"" - the package catalog (describing the software users ultimately want) and the Spack infrastructure that serves it (the ""necessary evil""). Currently the Spack release cadence is driven by the latter, to the significant detriment of the former, which is completely backwards. Software packages are being released all the time, but anyone who wants to use a ""vetted""/stable Spack release is stuck using packages that are often many months stale relative to the latest releases of those software packages.

2. Spack's poor/fragile support for the Cray Programming Environment and compiler wrappers has been a problem for years.","Make it easy/default for users to get the latest fully vetted Spack release version WITH up-to-the-minute packages.  The most obvious way to do this is split the repo, so that users can pull a Spack release from one repo and the very latest set of package files from a different one. Don't ""wait until the Spack DSL stops changing"" -- that will never happen. Find a way to manage such changes today by using branches in the package repo. However the expectation should be that package maintainers usually test against and PR to the branch corresponding to the CURRENT (most recent) Spack release (and optionally an upcoming one), instead of the other way around (how it works today).",,"spackbot-app is nice, but I'd like a way to ""watch"" for PRs on certain packages, EVEN if I'm not listed as a maintainer.",
12/17/2021 17:02:15,Scientist/Researcher,"DOE/NNSA Lab (e.g., LLNL/LANL/SNL)",United States,Yes,"Python, Go",Computer Science Research,Used at my site,5,Issues,0.17,"RHEL 7, CentOS 7, CentOS 8",1 - 10,3.8,Do it!,"Spack environments, Custom script or env vars","Environments, spack external find, Externals in packages.yaml",No,No,"AMD, Intel, ARM",NVIDIA Other,"gcc, Intel Compilers, LLVM, CCE (Cray Compilers)",Very Important,Somewhat important,Not Important,Slightly Important,Not Important,Slightly Important,Not Important,Not Important,Not Important,Somewhat important,Not Important,Slightly Important,Not Important,Not Important,Not Important,,No,Yes,"Documentation, GitHub",Daily,Probably not,No,OK,Good,OK,Good,Make available a local piece of software with many dependencies.,Automatically installing software not available locally.,"Conflicts among packages (minimum version of X needed by package A and maximum version of X needed by package B) and complexity of working with pre-installed software (e.g., MPI, compilers, system tools), mostly from modules.","Make it easier to force a particular compiler, MPI, etc.  I shouldn't have to edit configuration files for that.",,,
12/17/2021 17:43:59,Computational Scientist,University HPC/Computing Center,United States,Yes,"Fortran, C, C++, Python, sh/bash/other shell script, Julia","Computer Science Research, High Energy Physics",Word of mouth,3,"Packages, Slack Discussions, Issues","0.16, 0.17","RHEL 8, Ubuntu 20, Debian 11, Arch, SLES15",100 - 200,"3.6, 3.7, 3.8, 3.9",Do it!,"spack load, Spack environments","Environments, spack external find, Externals in packages.yaml, spack load",Yes -- just one,No,"AMD, Intel, IBM Power","NVIDIA Volta, NVIDIA Ampere, AMD MI100, AMD MI200, Intel Xe (Ponte Vecchio)","gcc, Intel Compilers, Intel OneAPI / dpc++, LLVM, AMD ROCmCC / hipcc, nvcc (CUDA), CCE (Cray Compilers)",Somewhat important,Very Important,Somewhat important,Somewhat important,Slightly Important,Slightly Important,Not Important,Somewhat important,Not Important,Critical,Somewhat important,Somewhat important,Critical,Somewhat important,Slightly Important,,Maybe,Yes,"Documentation, Slack, Coworkers, GitHub",Monthly,Probably not,Probably,Good,Excellent,Good,Good,"Set up dependencies for ECP application when not available on HPC machines as modules, and on dev machines.","Managing multiple multiple environments with different MPI and GPU vendor stacks for testing application in different configuraitons, without having to do manual builds.",Failed installs when system dependencies are not detected or non standard in some way,,"Newer GPU stacks for AMD and Intel, better external detection",,
12/18/2021 23:38:46,Research Software Engineer (RSE),Company,Japan,No,"Fortran, C, sh/bash/other shell script",Traditional HPC / Simulation,Word of mouth,3,Packages,0.17,"RHEL 8, CentOS 8",10 - 100,3.8,I'd live (I can provide Python 3 somehow),spack load,"Module generation, Chaining (upstreams), Build caches (binary packages), Externals in packages.yaml, spack load",Yes -- several,No,"AMD, Intel, ARM",No GPUs,"gcc, NVHPC (new NVIDIA PGI compilers), LLVM, Fujitsu Compilers, armclang",Slightly Important,Somewhat important,Somewhat important,Slightly Important,Slightly Important,Slightly Important,Slightly Important,Very Important,Not Important,Somewhat important,Slightly Important,Slightly Important,Slightly Important,Slightly Important,Very Important,"give an enduser a trivial option to privately ""extend"" a public read-only repository. upstream repo is an option but a bit too convoluted : private & public spacks are not necessarily in sync, and the upstream.yaml has to be manually configured.",Maybe,Yes,"Documentation, GitHub, Source Code, twitter",Monthly,Probably not,Probably not,Good,Excellent,Good,Excellent,Install packages on Fugaku,Quick and reproducible installation of softwares,locally install packages on top of an existing public read-only spack. leverage binary cache to quickly build containers.,see above.,,"Great software and community, keep rolling!",
12/18/2021 0:36:28,DevOps/SRE,University HPC/Computing Center,China,No,"Fortran, C, C++, Rust, Go, Java",Traditional HPC / Simulation,Tutorial,2,Packages,develop,"macOS, RHEL 8, Ubuntu 20, Debian 10",100 - 200,3.1,Do it!,spack load,build-env (debug a build),Yes -- just one,Yes,"AMD, ARM","NVIDIA Volta, AMD MI200","Intel OneAPI / dpc++, NVHPC (new NVIDIA PGI compilers), AMD ROCmCC / hipcc",Not Important,Not Important,Not Important,Not Important,Not Important,Not Important,Not Important,Not Important,Not Important,Not Important,Not Important,Not Important,Not Important,Not Important,Critical,,"Yes, I'd attend",Yes,"Documentation, Slack, Source Code",Daily,"Yes, definitely!",Probably,OK,OK,OK,OK,,,,,,,
12/18/2021 0:54:28,Research Software Engineer (RSE),Other Public Research Lab,France,No,"C++, Python","Traditional HPC / Simulation, Visualization",Search,2,Packages,"0.17, develop","RHEL 7, RHEL 8, Ubuntu 20","500-1,000","3.8, 3.9, 3.10",Do it!,Environment Modules (TCL modules),"Module generation, spack external find, Externals in packages.yaml, Concretization preferences in packages.yaml, New concretizer (clingo), spack install --reuse",Yes -- several,My site has a front-end or extension to Spack,"AMD, Intel, ARM","NVIDIA Volta, NVIDIA Ampere, AMD MI100, AMD MI200","gcc, Intel Compilers, Intel OneAPI / dpc++, NVHPC (new NVIDIA PGI compilers), AMD ROCmCC / hipcc, nvcc (CUDA)",Very Important,Somewhat important,Very Important,Somewhat important,Slightly Important,Very Important,Not Important,Very Important,Not Important,Critical,Very Important,Critical,Critical,Somewhat important,Very Important,,"Yes, I'd attend",No,"Documentation, Coworkers, GitHub",Weekly,Probably,Probably,Good,OK,OK,Good,,,,,,,
12/18/2021 0:56:59,undergraduate student,University research group,China,No,"C, C++, Python, sh/bash/other shell script, Java","Traditional HPC / Simulation, AI/ML",Word of mouth,2,No,0.17,"Ubuntu 16, Ubuntu 18, Ubuntu 20, Debian 10, Debian 11",10 - 100,3.9,I'd live (I can provide Python 3 somehow),spack load,"spack containerize, spack external find, spack load",Yes -- several,Yes,"AMD, Intel","NVIDIA Volta, NVIDIA Ampere","gcc, Intel Compilers, Intel OneAPI / dpc++",Critical,Critical,Critical,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Slightly Important,Not Important,Critical,Critical,Critical,Somewhat important,Somewhat important,,Maybe,Yes,Documentation,Monthly,No,Probably,Good,OK,Excellent,Excellent,To install libraries (e.g. BLAS pnetcdf) with proper mpi config ( e.g. mpi with ib) ,,,,,,
12/18/2021 3:07:11,Code user/analyst,University research group,China,No,"C, C++, Python, Rust, Go, sh/bash/other shell script","Traditional HPC / Simulation, AI/ML",Word of mouth,2,No,"0.16, 0.17","CentOS 7, Ubuntu 20, Debian 11",10 - 100,"3.7, 3.9",Do it!,spack load,"spack external find, Externals in packages.yaml, Distributed Builds (srun/mpirun spack install)",Yes -- just one,Yes,"AMD, Intel, ARM","NVIDIA Volta, NVIDIA Ampere","gcc, Intel Compilers, nvcc (CUDA)",Critical,Critical,Critical,Critical,Critical,Critical,Critical,Somewhat important,Not Important,Critical,Critical,Critical,Critical,Not Important,Not Important,,"Yes, I'd attend",Yes,"Documentation, GitHub, Source Code",Monthly,Probably not,"Yes, definitely!",Good,Good,Good,Good,,,,,,,
12/18/2021 5:15:10,Scientist/Researcher,University research group,United States,No,"C, C++, Python, R, sh/bash/other shell script","Statistics / Data Analysis, AI/ML, Bioinformatics",Word of mouth,5,"Packages, Documentation, Slack Discussions, GitHub Discussions, Issues, Mailing List",develop,"RHEL 6, RHEL 7, Debian 10, Gentoo, PureOS 10.0 (a Debian derivative)",10 - 100,"3.6, 3.7, 3.8",Do it!,"spack load, Environment Modules (TCL modules)","Environments, Module generation, spack external find, Externals in packages.yaml, New concretizer (clingo), spack develop, spack load",Yes -- just one,No,"AMD, Intel",NVIDIA Other,gcc,Somewhat important,Not Important,Not Important,Very Important,Not Important,Very Important,Not Important,Not Important,Not Important,Somewhat important,Critical,Slightly Important,Not Important,Not Important,Slightly Important,"I don't have the bandwidth to train my users and would love to see an interactive ""spack tutorial"" command that they can go through and get constructive feedback on learning the system.  For my use case, it would be geared toward someone with familiarity with the command line and an HPC module system.","Yes, I'd attend",Yes,"Documentation, Slack, Mailing List, GitHub, spack help, Source Code",Monthly,Probably,No,Good,Excellent,OK,Good,"I'm in between jobs at the moment.  Next year I'll be starting a research group that runs HPC simulations primarily on XSEDE but also a private lab cluster and occasionally the university cluster.  I installed spack on my professor's research lab server that we still use, but no one else in the lab has interest in learning about it and they report the most trivial of errors for me to help them with.  Until May this year, I was a graduate assistant HPC sysadmin.  My former boss told me about spack after learning about it at the Supercomputing conference.  We used it from 2016 onward to install large dependencies that were complex to do by hand, though I used spack in more trivial cases because I could then report to the user how to reproducibly create the same setup we have on their laptop or research server.  This means I extensively used spack environments, externals, and created packages for code they were using.  On our cluster, we duplicate your module file and add our usage command logging scripts.  In most cases, the code our need were not written by them, and used ad hoc Makefiles with package manager unfriendly assumptions.  So it wasn't always possible to contribute those packages back and more contributions were made with fixing dependencies.  For some of our more proficient users, we tried providing e-mail instructions for them to setup and manage their own spack directories, but few seem to continue this workflow after an initial attempt.  We think this is because spack has a higher learning curve for someone who occasionally compiles software, and they are unfamiliar with reaching out for help with spack like they could with a colleague when compiling by hand.","For HPC work, it fulfills a nice role between Singularity containers and compiling by hand  But often only when a package works out of the box.  It's been hard to get other members of my former HPC staff to write packages; we did peer coding a few times with one team member, but they would regress to compiling by hand.  Unfortunately, we create separate spack installations for each package we install because there isn't enough team familiarity with underspecifying variants, etc.","For our share research lab server work, spack lowers the barrier to installing current versions of bioinformatics software, but there is a measure of frustration from our casual lab users with not having support for troubleshooting errors when they arise.","Making it more accessible to people aren't experts in compiling software.  In the field of bioinformatics, this may mean integrating your module into the curriculum of courses at the Cold Spring Harbor Laboratory, the Marine Biological Laboratory, etc.  In other words, anything under the umbrella of more formal training that isn't marketed as ""learn spack"" but rather learn whatever domain specific skill a PI would normally pay for.","A lot of the atmospheric sciences packages are pain to work with as sysadmins, and clearly something that spack would provide benefit to.  Having someone on the spack core team look into these would be especially helpful, because many of these packages require direct editing of Fortran source files for adjusting parameters, and spack needs a thoughtful solution this type of legacy workflow.","It would be nice to get some traditional academic recognition for contributing to spack, but c'est la vie!",
12/18/2021 7:30:43,DevOps/SRE,University HPC/Computing Center,China,No,"C, Python","Traditional HPC / Simulation, AI/ML",Birds-of-a-feather (BOF) at conference,3,"Packages, Documentation",0.17,"RHEL 7, RHEL 8",100 - 200,"2.7, 3.6",I'd live (I can provide Python 3 somehow),"Lmod, Environment Modules (TCL modules)",Module generation,Yes -- several,No,"Intel, ARM","NVIDIA Volta, NVIDIA Ampere","gcc, Intel Compilers, Intel OneAPI / dpc++",Somewhat important,Somewhat important,Very Important,Somewhat important,Slightly Important,Somewhat important,Somewhat important,Somewhat important,Slightly Important,Slightly Important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,,"Yes, I'd attend",Yes,"Documentation, Slack, Mailing List, GitHub",Weekly,Probably not,"Yes, definitely!",Good,Good,Good,Good,Spack are used on our X86 and ARM clusters. Packages are upgraded monthly.,"Spack helps us better manage compiler suites including GCC, Intel and CUDA.",Installed packages cannot be reused prior to v0.17.0 .,Maybe an approach to integrate Spack with a containerized workflow like Docker or Singularity.,,,
12/18/2021 14:38:01,Research Software Engineer (RSE),Company,United States,Yes,"C, C++, R, sh/bash/other shell script","Traditional HPC / Simulation, Visualization",Word of mouth,5,Packages,develop,openSuSE,10 - 100,"3.6, 3.9",I'd live (I can provide Python 3 somehow),spack load,spack ci (generate GitLab Pipelines),No,No,"AMD, Intel",No GPUs,"gcc, Intel OneAPI / dpc++, LLVM, nvcc (CUDA), IBM XL",Very Important,Critical,Somewhat important,Critical,Critical,Very Important,Somewhat important,Somewhat important,Critical,Somewhat important,Critical,Critical,Critical,Critical,Somewhat important,,Maybe,No,"Documentation, Coworkers, Source Code",Monthly,Probably,"Yes, definitely!",Good,OK,Good,Excellent,,,,,,,
12/19/2021 7:58:55,Research Software Engineer (RSE),NSCCJN,China,No,"C++, Python, Rust, sh/bash/other shell script, Java, C#, Ruby, node.js","Traditional HPC / Simulation, AI/ML, Computer Science Research, Web applications, Visualization, Embedded Systems, MGE",Used at my site,3,Packages,"0.16, develop, custom fork","CentOS 7, Debian 10","> 1,000",3.6,Do it!,"spack load, Spack environments, Containers","Environments, Module generation, spack containerize, Chaining (upstreams), Build caches (binary packages), build-env (debug a build), spack external find, Externals in packages.yaml, Concretization preferences in packages.yaml, spack ci (generate GitLab Pipelines), Distributed Builds (srun/mpirun spack install), spack load",Yes -- several,Yes,"AMD, Intel","NVIDIA Ampere, No GPUs","gcc, Intel OneAPI / dpc++, LLVM",Very Important,Critical,Critical,Critical,Critical,Critical,Somewhat important,Critical,Critical,Critical,Critical,Critical,Critical,Critical,Critical,,"Yes, I'd present something!",Yes,"Documentation, GitHub, Source Code",Weekly,Probably not,"Yes, definitely!",Excellent,OK,Good,Excellent,Solution for HPC App management.,Time Saver,compiler flags will cause reinstallation of ALL dependencies!,compiler flags not passing to dependencies (not reinstalling all dependencies when using compiler flags),graphical ui software,,
12/19/2021 17:36:01,Scientist/Researcher,"DOE/NNSA Lab (e.g., LLNL/LANL/SNL)",United States,Yes,"C, C++, Python, Rust, Go, sh/bash/other shell script, Lua","Traditional HPC / Simulation, Computer Science Research, Compiler Testing",Used at my site,5,"Packages, Core Features, Documentation, Slack Discussions, GitHub Discussions, Issues",develop,"macOS, RHEL 7, RHEL 8, CentOS 7, CentOS 8, Ubuntu 20, Windows Subsystem for Linux (WSL)",200 - 500,"3.8, 3.9, 3.10",Do it!,"Spack environments, spack build-env, spack view","Environments, Build caches (binary packages), build-env (debug a build), spack-python (Python scripting), spack external find, Externals in packages.yaml, Distributed Builds (srun/mpirun spack install), New concretizer (clingo), spack install --reuse",No,No,"AMD, Intel, IBM Power, ARM","NVIDIA Volta, NVIDIA Ampere, AMD MI100, AMD MI200, AMD Other, Intel Xe (Ponte Vecchio), No GPUs","gcc, Intel OneAPI / dpc++, NVHPC (new NVIDIA PGI compilers), LLVM, AMD ROCmCC / hipcc, nvcc (CUDA), IBM XL, CCE (Cray Compilers)",Very Important,Critical,Very Important,Critical,Slightly Important,Very Important,Not Important,Very Important,Not Important,Very Important,Slightly Important,Slightly Important,Somewhat important,Not Important,Somewhat important,,"Yes, I'd attend",No,"Documentation, Slack, Coworkers, GitHub, spack help, Source Code",Weekly,Probably not,Probably not,Good,Excellent,OK,Good,,,,,,,
12/19/2021 19:12:08,Research Software Engineer (RSE),"DOE/Office of Science Lab (e.g., ORNL/ANL/LBL)",United States,Yes,"C++, Python","Traditional HPC / Simulation, High Energy Physics",Twitter,5,"Packages, Core Features, Documentation, Slack Discussions, Issues, Tools/integrations","0.17, develop","macOS, RHEL 8, CentOS 8, Ubuntu 20, Windows Subsystem for Linux (WSL), Cray XC","> 1,000","3.8, 3.9, 3.10",Do it!,"spack load, Spack environments, Containers, UPS, Fedex, USPS","Environments, Chaining (upstreams), Stacks (matrices in environments), Build caches (binary packages), build-env (debug a build), spack external find, Externals in packages.yaml, Concretization preferences in packages.yaml, New concretizer (clingo), spack develop, spack install --reuse, spack test, spack load",Yes -- just one,No,"AMD, Intel, IBM Power, ARM","NVIDIA T4, NVIDIA Volta, NVIDIA Ampere, NVIDIA Other, AMD MI200, AMD Other, Intel Xe (Ponte Vecchio)","gcc, Intel Compilers, Intel OneAPI / dpc++, NVHPC (new NVIDIA PGI compilers), LLVM, AMD ROCmCC / hipcc, nvcc (CUDA), CCE (Cray Compilers), Fujitsu Compilers, armclang",Very Important,Very Important,Very Important,Very Important,Somewhat important,Very Important,Slightly Important,Slightly Important,Slightly Important,Somewhat important,Somewhat important,Slightly Important,Very Important,Very Important,Slightly Important,,"Yes, I'd attend",Yes,"Documentation, Slack, GitHub, spack help, Source Code",Weekly,Probably not,Probably,Good,Excellent,Excellent,Excellent,I am a scientific application developer & computational physicist. I use Spack to spin up development environments locally and in some of my CI workflows.,Quick updating of packages locally and rapid mainlining.,"I would like to use it on DOE/NNSA clusters to let our developers spin up development environments there, but tracking all the patched vendor externals (looking at you Cray/IBM MPI stack + libfabric + I/O libs + what not) is too painful for me / hard to document & too many steps to automate and there are no blueprints/configs shared that are community-wide maintained to make this simple. Just cloning Spack and spinning up vanilla builds does not work (well) on those systems, and systems that already use Spack do not document for us ""users"" how to stack on them properly. Going to multi-arch systems, e.g., Cori makes this even harder.

For local development, I would need build caches to come to a similar speed of deployment as with conda (build caches for compiler + dependencies for all three major platforms including several releases and macM1 binary packages). So all-in-all, Spack usage remains a niche for experienced developers in our group (maybe <30% of developers). This makes me sad, because I wish it was as easy & fast as spinning up a conda or brew dev env for them.

The macOS developer experience is still really painful. For instance, all I need are C/C++ compilers and C/C++ dependencies, but Spack MPI still forces me by default into having Fortran compilers installed. Missing binary packages on this platform in turn make bootstrapping this with Spack a multi-hour endeavor. Using an external package manager for getting those is a tricky business, since one needs to manually re-configure the AppleClang compiler yaml settings to add a gfortran, for instance. This is a common workflow and needs to be automated somehow. Using only GCC on macOS does not really work to spin up a serious Spack env, since most major packages (e.g., CPython) do only test/support AppleClang in their macOS CI.
Try this: take a brand new Mac M1 laptop and install mpi4py + Jupyter notebook on it. Count the manual steps and compilation minutes. Compare to the ""git clone and go"" workflow advertised in the docs. We are not there yet.","(1) Share for every DOE LCF machine a documentation how to stack on them when adding own/newer software with Spack. Update/maintain these docs/configs centrally.
(2) Add/abstract compilers as dependencies.",More/working Jupyter(lab) extensions. A Fortran-free way to install MPI.,Spack <3,
12/19/2021 21:51:38,Scientist/Researcher,University research group,China,No,"C++, Python","Traditional HPC / Simulation, AI/ML",Word of mouth,4,No,develop,"Ubuntu 16, Ubuntu 18, Ubuntu 20",10 - 100,"3.7, 3.8, 3.9, 3.10",Do it!,spack load,"Environments, Externals in packages.yaml, spack load",No,Yes,"AMD, Intel","NVIDIA Volta, NVIDIA Ampere","gcc, Intel Compilers, LLVM",Critical,Somewhat important,Not Important,Somewhat important,Very Important,Not Important,Not Important,Critical,Not Important,Very Important,Somewhat important,Critical,Somewhat important,Not Important,Not Important,,No,Yes,"Documentation, Coworkers, Source Code",Yearly,No,Probably not,OK,OK,OK,OK,,,,,,,
12/20/2021 7:09:42,Software Developer,"DOE/NNSA Lab (e.g., LLNL/LANL/SNL)",United States,Yes,"C++, Python","Traditional HPC / Simulation, Visualization",Used at my site,4,"Packages, Core Features, Documentation, Slack Discussions, GitHub Discussions, Issues",develop,"macOS, RHEL 7","500-1,000","3.6, 3.7, 3.8, 3.9",Do it!,"spack load, Spack environments, Environment Modules (TCL modules), spack view","Environments, Module generation, Stacks (matrices in environments), spack-python (Python scripting), Command Extensions, Python extensions (link python packages into interpreter prefix), spack external find, Externals in packages.yaml, Distributed Builds (srun/mpirun spack install), New concretizer (clingo), spack develop, spack install --reuse, spack load",Yes -- just one,My site has a front-end or extension to Spack,"AMD, Intel, IBM Power, ARM","NVIDIA Volta, NVIDIA Ampere, AMD MI100, AMD MI200","gcc, Intel Compilers, Intel OneAPI / dpc++, LLVM, AMD ROCmCC / hipcc, nvcc (CUDA), CCE (Cray Compilers)",Critical,Critical,Somewhat important,Somewhat important,Very Important,Not Important,Slightly Important,Very Important,Not Important,Somewhat important,Very Important,Very Important,Critical,Very Important,Very Important,Ability to force spack to never go to the internet (SNL SCN),"Yes, I'd present something!",No,"Documentation, Slack, Coworkers, spack help, Source Code",Daily,Probably not,Probably not,OK,Excellent,Good,Good,"I use spack to orchestrate my entire software work flow.  From building software, to developing software, to distributing it to others","Spack developers helping me implement the features I need, and the --reuse flag","1) Not having compilers as dependencies is a pretty big pain.  It is the one thing that makes me break my workflow into multiple environments. Especially standing up on a new machine. 
2) No really good ways to test how changes in spack are going to affect my environments and builds.  `--reuse` eliminates some of this, but unless I'm really staying on top of the PR's for spack I've always got some concern that things will break.  It would be really good to have a way to have some form of testing available for end users. Something like this https://github.com/spack/spack/discussions/26334
3) having my environments (spack.yaml) get modified by spack without me requesting it is a pain
4) paths are kind of all over the place in the configs. some allow you to use environment variables and others do not.
5) spack unit-tests are slow! this is a pain when trying to develop a new feature for spack", I think the outlined list in the first section is pretty on point.,"I think just codifying the GPU support, and maybe adding some documentation would be good.  I add the packages I need.","You all are doing great.  Spack is a great tool that has made my life much easier.  I think one of the biggest successes is the developer support, and agility of the dev team.  If that wasn't there I would probably have a much different view of spack.",
12/20/2021 7:27:39,Manager,University HPC/Computing Center,Germany,Yes,C++,Traditional HPC / Simulation,Presentation,3,No,develop,macOS,1 - 10,"2.7, 3.8",Do it!,Custom script or env vars,spack containerize,No,No,"AMD, Intel, ARM","NVIDIA Volta, NVIDIA Ampere, AMD MI200, AMD Other, Intel Xe (Ponte Vecchio)","gcc, Intel Compilers, Intel OneAPI / dpc++, AMD ROCmCC / hipcc, nvcc (CUDA), armclang",Very Important,Somewhat important,Somewhat important,Somewhat important,Not Important,Somewhat important,Not Important,Slightly Important,Not Important,Not Important,Not Important,Slightly Important,Very Important,Very Important,Somewhat important,,Maybe,No,Coworkers,Yearly,Probably not,Probably,OK,Good,Good,Good,,,,,,,
12/20/2021 8:56:38,Computational Scientist,"DOE/Office of Science Lab (e.g., ORNL/ANL/LBL)",United States,Yes,"C++, Python","Traditional HPC / Simulation, AI/ML",Used at my site,2,Packages,develop,"macOS, RHEL 8",10 - 100,"3.7, 3.8",Do it!,"spack load, Environment Modules (TCL modules)",,No,No,"AMD, Intel, IBM Power","NVIDIA Volta, NVIDIA Ampere, AMD MI100, AMD MI200, Intel Xe (Ponte Vecchio)","gcc, Intel Compilers, Intel OneAPI / dpc++, LLVM, AMD ROCmCC / hipcc, nvcc (CUDA)",Somewhat important,Very Important,Somewhat important,Slightly Important,Slightly Important,Somewhat important,Slightly Important,Somewhat important,Not Important,Very Important,Somewhat important,Slightly Important,Very Important,Somewhat important,Somewhat important,,"Yes, I'd attend",No,"Documentation, Coworkers, GitHub",Monthly,Probably not,Probably,Good,Excellent,OK,Excellent,I want to easily install all packages for a specific application.,Getting someone running an application (with many dependencies) quickly.,Locally verifying updates/changes to my packages work,Make more dependent package options (e.g. Kokkos/RAJA packages inherit those PPL details),My apps :),,
12/20/2021 9:17:43,User Support Staff,Company,United States,No,"Python, sh/bash/other shell script","Traditional HPC / Simulation, AI/ML, Computer Science Research",Tutorial,4,"Packages, Issues","0.16, 0.17, develop","RHEL 7, RHEL 8, Amazon Linux, I don't directly use Ubuntu, but I do add Spack into Singularity/Docker containers that pull from upstream Nvidia registries that are usually Ubuntu/Debian based.","500-1,000","3.8, 3.9",Do it!,"Lmod, Environment Modules (TCL modules)","Module generation, spack containerize, build-env (debug a build), spack external find, Externals in packages.yaml, Concretization preferences in packages.yaml, spack load, spack diff (compare two specs)",Yes -- just one,No,Intel,"NVIDIA Volta, NVIDIA Ampere","gcc, Intel Compilers, Intel OneAPI / dpc++, nvcc (CUDA)",Critical,Very Important,Somewhat important,Somewhat important,Not Important,Somewhat important,Somewhat important,Somewhat important,Slightly Important,Somewhat important,Somewhat important,Very Important,Very Important,Slightly Important,Somewhat important,,"Yes, I'd attend",Yes,"Documentation, GitHub",Monthly,Probably,No,Excellent,Excellent,OK,Excellent,"We use Spack to deliver production packages on my company's HPC environment.  The current HPC environment dates to 2018 and in that time has amassed about 2500 spack packages across several versions of spack. Most packages are dependencies and not exposed to end users.  User-exposed packages are most commonly compilers and Linux utilities: e.g., gcc, jdk, emacs,vim, git, tmux, bash, anaconda, cuda, openmpi.  Occasionally domain specific applications are installed with Spack, but these are frequently difficult or tedious to build with the required specificity in spack, and as a result are often built outside of Spack (using Spack dependencies). 

We build spack packages with a cluster admin account, generate tcl modulefiles (because non-hierarchical lmod lua is not possible), configure the tcl naming scheme to put modules for each package in an independent directory, 

  tcl:
    hash_length: 4
    naming_scheme: '${PACKAGE}/${VERSION}-${COMPILERNAME}-${COMPILERVER}'

and sym link the applications that we want to expose to users into the cluster MODULEPATH.  
",It's hard to overstate the impact that having a robust from-source package manager has on the productivity of staff and scientists that use HPC.,"Generally, packages that fail to build are a constant challenge.  ","Anything that speeds the debugging process for failed builds.  Not that it's been an issue, but, cloud/AWS compute continues to grow in importance, so Amazon Linux support is appreciated.  ",Robust packages for Tensorflow and friends,,
12/20/2021 16:04:57,Computational Scientist,"DOE/NNSA Lab (e.g., LLNL/LANL/SNL)",United States,Yes,C++,"Traditional HPC / Simulation, Computer Science Research",Presentation,4,No,develop,"macOS, RHEL 7, RHEL 8",1 - 10,"3.7, 3.8",Do it!,"Spack environments, Lmod, Environment Modules (TCL modules)","Environments, Module generation, spack containerize, Concretization preferences in packages.yaml",No,Yes,"AMD, Intel, IBM Power, ARM","NVIDIA Volta, AMD MI100, AMD MI200","gcc, Intel Compilers, Intel OneAPI / dpc++, LLVM, AMD ROCmCC / hipcc, nvcc (CUDA), IBM XL, armclang",Very Important,Slightly Important,Very Important,Not Important,Very Important,Very Important,Not Important,Very Important,Not Important,Critical,Very Important,Somewhat important,Critical,Not Important,Not Important,Simple path for getting consistent library dependencies. It's frustrating when I build two TPLs that have a common dependency but they compile that dependency with different incompatible versions. I have to manually hack files to force consistency.,Maybe,Yes,"Documentation, Coworkers, Give up and compile TPLS by hand",Yearly,No,Probably not,OK,Good,OK,Bad,About twice a year I need to build a handful of TPLs or maybe a new compler+mpi stack on a new system.,Nothing. Both times I tried this year I spent 2 days of frustration before manually compiling the libraries.,"Need TPL dependencies to be consistent for all packages in a spack build for final linking. If my app requires A and B at link, but A and B both require C, I frequently get two incompatible versions of C - one for A and one for B. This is very frustrating. Tried multiple paths from documentation but in the end had to hack package.py with preferred=true to force consistency.",Not require the world to be built. Almost every system has a working python. Making it easier to redirect to system libraries is important.  ,No.,No.,
12/20/2021 17:06:06,Software Developer,Private Research Lab,United States,No,"C, C++, Python","Traditional HPC / Simulation, Computer Science Research",Presentation,5,"Packages, Issues",develop,"RHEL 6, CentOS 8, Ubuntu 20, SLES15, Fedora, Cray XC, Cray XT",100 - 200,"3.5, 3.6, 3.7, 3.8, 3.9",Do it!,"Spack environments, Lmod, Environment Modules (TCL modules)","Environments, Module generation, build-env (debug a build), spack external find, Externals in packages.yaml, Concretization preferences in packages.yaml, New concretizer (clingo), spack develop",No,Yes,"AMD, Intel, IBM Power, ARM","NVIDIA Volta, NVIDIA Other, AMD MI200, AMD Other","gcc, Intel Compilers, Intel OneAPI / dpc++, PGI, NVHPC (new NVIDIA PGI compilers), nvcc (CUDA), CCE (Cray Compilers)",Somewhat important,Somewhat important,Somewhat important,Somewhat important,Slightly Important,Slightly Important,Slightly Important,Slightly Important,Not Important,Somewhat important,Somewhat important,Slightly Important,Somewhat important,Somewhat important,Very Important,,"Yes, I'd attend",Yes,"Documentation, Mailing List, GitHub, spack help",Weekly,Probably not,Probably not,Good,Good,Good,Excellent,"Probably typical use: compile, load modules, execute our tool",Consistency in the build process.,PRs that take months to get approved once reviewed.,Faster response from spack reviewers.,Not that I'm aware of at this point.,,
12/20/2021 23:11:50,System Administrator,University HPC/Computing Center,Germany,No,sh/bash/other shell script,Traditional HPC / Simulation,Word of mouth,2,No,"0.16, 0.17",CentOS 7,10 - 100,3.7,Do it!,Environment Modules (TCL modules),Module generation,No,Yes,"AMD, Intel",NVIDIA Ampere,"gcc, Intel Compilers, Intel OneAPI / dpc++",Very Important,Somewhat important,Somewhat important,Very Important,Slightly Important,Slightly Important,Not Important,Very Important,Not Important,Somewhat important,Slightly Important,Somewhat important,Somewhat important,Slightly Important,Not Important,,Maybe,Yes,Documentation,Monthly,Probably not,Probably not,Excellent,Excellent,Excellent,Excellent,,Saved so much time for me due to automatic dependency handling and environment module generation! Really thank you for spack!,,,,,
12/20/2021 23:22:18,Scientist/Researcher,University research group,United Kingdom,No,"Fortran, C, C++, Python, sh/bash/other shell script","Traditional HPC / Simulation, Statistics / Data Analysis, AI/ML",Word of mouth,2,No,develop,"CentOS 6, Ubuntu 20, Windows Subsystem for Linux (WSL)",10 - 100,"3.8, 3.9",Do it!,"spack load, Spack environments","Environments, spack external find, spack test, spack load",No,Yes,"AMD, Intel",No GPUs,"gcc, Intel Compilers",Somewhat important,Slightly Important,Very Important,Slightly Important,Very Important,Somewhat important,Slightly Important,Very Important,Slightly Important,Slightly Important,Slightly Important,Very Important,Somewhat important,Somewhat important,Very Important,,No,Yes,"Documentation, GitHub, Source Code",Weekly,Probably not,"Yes, definitely!",Good,Good,Good,Good,,,,,,,
12/20/2021 23:37:12,User Support Staff,University HPC/Computing Center,Switzerland,No,"Fortran, Python, Go","Traditional HPC / Simulation, Statistics / Data Analysis, AI/ML, Bioinformatics",Used at my site,4,"Packages, Slack Discussions, Issues","0.16, 0.17","RHEL 8, CentOS 8",200 - 500,3.6,Do it!,"Spack environments, Lmod","Environments, Module generation, spack containerize, Chaining (upstreams), Stacks (matrices in environments), build-env (debug a build), Externals in packages.yaml, Concretization preferences in packages.yaml, New concretizer (clingo), spack install --reuse, spack load",Yes -- just one,No,AMD,NVIDIA Ampere,"gcc, Intel Compilers, LLVM",Somewhat important,Very Important,Slightly Important,Not Important,Slightly Important,Somewhat important,Slightly Important,Very Important,Not Important,Not Important,Somewhat important,Somewhat important,Very Important,Not Important,Somewhat important,,"Yes, I'd attend",No,"Documentation, Slack, GitHub",Weekly,Probably not,No,Excellent,Excellent,Good,Excellent,HPC software stack. Spack environments with spec matrices and separate module paths to allow for different architectures / OS in the same spack instance,All of it!,"Broken package recipes 

Updating spack updates the default versions of packages",Separate the core spack and the builtin package repository,,Keep up the good work,
12/21/2021 0:11:50,Computational Scientist,Other Public Research Lab,France,No,"Fortran, C++",Traditional HPC / Simulation,Word of mouth,3,Packages,"0.17, develop","CentOS 7, Ubuntu 20, Arch, Windows Subsystem for Linux (WSL)",1 - 10,3.9,Do it!,"spack load, spack build-env","build-env (debug a build), spack diff (compare two specs)",No,No,"AMD, Intel, ARM",No GPUs,"gcc, LLVM",Critical,Somewhat important,Not Important,Slightly Important,Somewhat important,Very Important,Not Important,Somewhat important,Not Important,Slightly Important,Somewhat important,Very Important,Not Important,Not Important,Not Important,,Maybe,Yes,GitHub,Yearly,No,"Yes, definitely!",Good,Good,Good,Excellent,,,,,,,
12/21/2021 1:14:06,System Administrator,University HPC/Computing Center,China,No,"Python, Java","AI/ML, Computer Science Research",Tutorial,2,No,develop,CentOS 7,100 - 200,3.5,Do it!,"spack load, Environment Modules (TCL modules)","Environments, Module generation, spack load",No,No,"Intel, ARM","NVIDIA Volta, NVIDIA Ampere","gcc, Intel OneAPI / dpc++, nvcc (CUDA)",Very Important,Very Important,Very Important,Very Important,Slightly Important,Slightly Important,Slightly Important,Slightly Important,Slightly Important,Slightly Important,Somewhat important,Slightly Important,Somewhat important,Slightly Important,Slightly Important,"For some reasons, accessing GitHub from mainland China is not stable. Hope there's some quick configurations for Chineses users to use a proxy. For example, github.com.cnpmjs.org is a proxy of github.com. With this proxy, I can quickly clone repos without accessing the original github.com DNS.","Yes, I'd attend",Yes,"Documentation, Slack",Monthly,Probably,"Yes, definitely!",Good,Good,Good,Excellent,,,"For some reasons, accessing GitHub from mainland China is not stable. Hope there's some quick configurations for Chineses users to use a proxy. For example, github.com.cnpmjs.org is a proxy of github.com. With this proxy, I can quickly clone repos without accessing the original github.com DNS.",,,,
12/21/2021 1:17:55,Software Developer,Company,United Kingdom,No,"Fortran, Python",Traditional HPC / Simulation,Word of mouth,0,No,0.16,"CentOS 6, CentOS 7, openSuSE",100 - 200,3.8,Do it!,"spack load, Spack environments","Environments, Build caches (binary packages), spack external find, New concretizer (clingo), spack develop, spack load",Yes -- just one,No,"AMD, Intel",NVIDIA Other,"gcc, Intel Compilers, Intel OneAPI / dpc++, NVHPC (new NVIDIA PGI compilers), LLVM",Somewhat important,Somewhat important,Very Important,Very Important,Slightly Important,Not Important,Not Important,Somewhat important,Not Important,Somewhat important,Very Important,Very Important,Slightly Important,Not Important,Slightly Important,,No,Yes,"Documentation, Mailing List",Weekly,Probably not,Probably,Good,Good,Good,Good,"Originally it was seen as a better way to build standard toolchains for our codes than our existing cumbersome build scripts that needed rewriting every time we upgraded stuff. 

Now it's become an internal standard for development and maintenance across many codes.

A major customer also uses spack and it's a better way to deliver hpc codes with all dependencies so they can build them easily (especially on air-gapped systems). 
",It's made it easier to get consistent builds across many projects with several developers,Seem to just sometimes hit a wall and have to start all over again.,I'd probably say more robustness but I can see how much it does and how completely non-trivial the problems you are solving are.,No,Keep up the good work!,
12/21/2021 1:27:29,Research Software Engineer (RSE),"DOE/Office of Science Lab (e.g., ORNL/ANL/LBL)",United Kingdom,Yes,"C, C++, Python, sh/bash/other shell script","Traditional HPC / Simulation, Statistics / Data Analysis, AI/ML, Computer Science Research",Word of mouth,5,"Packages, Slack Discussions, GitHub Discussions, Issues",develop,"macOS, Ubuntu 20, Debian 11, Cray XC","500-1,000",3.9,Do it!,Spack environments,"Environments, spack external find, Externals in packages.yaml, Concretization preferences in packages.yaml, New concretizer (clingo), spack develop, spack install --reuse",Yes -- several,No,"AMD, Intel, IBM Power, ARM",No GPUs,"gcc, LLVM",Very Important,Somewhat important,Very Important,Slightly Important,Slightly Important,Somewhat important,Not Important,Very Important,Not Important,Somewhat important,Very Important,Critical,Not Important,Slightly Important,Somewhat important,,"Yes, I'd attend",Yes,"Documentation, Slack, Coworkers, GitHub",Weekly,Probably not,Probably,Good,Excellent,Good,Good,"Setup an environment for the dependencies needed by a particular code or experiment, install this environment and activate it to develop said code or run said experiment. Make environment + scripts available with doc for reproducibility.",Automatizing setup for reproducible experiments.,"Recently, clingo making strange decisions that need to be manually overridden (e.g. not picking the latest version of a package).",Improve clingo's decisions.,deephyper (https://deephyper.readthedocs.io/en/latest/),,
12/21/2021 5:40:46,Scientist/Researcher,University research group,Germany,No,"C++, Python, sh/bash/other shell script",Traditional HPC / Simulation,Word of mouth,3,"Packages, Documentation, Slack Discussions","0.17, develop","Ubuntu 20, Arch",10 - 100,"3.8, 3.9, 3.10",Do it!,Spack environments,"Environments, spack external find, Externals in packages.yaml, New concretizer (clingo), spack install --reuse, spack load",Yes -- just one,No,"AMD, Intel",No GPUs,"gcc, LLVM, AMD ROCmCC / hipcc",Very Important,Somewhat important,Very Important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Not Important,Very Important,Very Important,Very Important,Slightly Important,Not Important,Somewhat important,,"Yes, I'd attend",Yes,"Documentation, Slack",Monthly,Probably not,Probably not,OK,Excellent,Good,Good,"Installation of software on various servers and supercomputers for simulations =. Common packages: PETSc, FEniCS, preCICE, compilers (mainly GCC). I often work with environment such that collects contains all dependencies that I need for a project. I do write/develop software. I do not use the software development features of Spack because I have not fully understand them yet.","Slack community, haampie, and especially Adam J. Stewart in GitHub issues.","Finding information I am looking for in the documentation. Complexity of Spack, its commands and the different levels of configuration files.",Make Spack configuration in home directory optional. At my location the home directory is the same for every machine (of which we have at least 10 different). This means the configuration is often not fitting (perfectly) to the host I am on.,,You are doing great work and have an awesome community. Spack is one of my favorite projects to contribute to. There is valuable feedback given in pull requests instead of just telling one to fix problems and pull requests are handled quickly.,
12/21/2021 7:47:23,System Administrator,University HPC/Computing Center,United States,No,"C, Python, sh/bash/other shell script, Lisp",Traditional HPC / Simulation,Search,3,"Packages, Issues",develop,CentOS 7,100 - 200,3.8,Do it!,"Lmod, Environment Modules (TCL modules)","Module generation, Chaining (upstreams), build-env (debug a build), spack-python (Python scripting), spack external find, Externals in packages.yaml, Concretization preferences in packages.yaml, New concretizer (clingo), spack test, spack load",No,No,Intel,"NVIDIA T4, NVIDIA Volta, NVIDIA Ampere, NVIDIA Other","gcc, Intel Compilers, Intel OneAPI / dpc++, LLVM, nvcc (CUDA)",Very Important,Slightly Important,Very Important,Somewhat important,Somewhat important,Slightly Important,Not Important,Very Important,Not Important,Slightly Important,Slightly Important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,,Maybe,Yes,"Documentation, Slack, GitHub",Weekly,Probably not,No,OK,Excellent,OK,Good,,,,,,,
12/21/2021 8:15:08,Scientist/Researcher,Private Research Lab,United States,No,"C++, Python",Traditional HPC / Simulation,Word of mouth,1,"GitHub Discussions, Issues",develop,"macOS, CentOS 8, Ubuntu 20",100 - 200,3.9,Do it!,Spack environments,"Environments, Build caches (binary packages), spack external find, Externals in packages.yaml, Concretization preferences in packages.yaml, New concretizer (clingo)",No,Yes,"AMD, Intel, ARM","NVIDIA Volta, NVIDIA Ampere","gcc, NVHPC (new NVIDIA PGI compilers), LLVM",Very Important,Very Important,Slightly Important,Slightly Important,Very Important,Slightly Important,Slightly Important,Somewhat important,Not Important,Very Important,Very Important,Very Important,Very Important,Very Important,Very Important,,Maybe,Yes,GitHub,Weekly,No,No,OK,Excellent,Good,Good,"I work in computational chemistry/physics. I work on several different clusters and also (when possible) like to program on my Mac. I always try to work with environments so I can load a ""clean environment"" and share that spack.yaml file on all the clusters I'm working on.",Build an HPC environment based on the newest C++ compilers so I can use C++20 in my research.,"Since I work in environments, I often find that an environment will concretize together just fine and then 60% of the way through building all the packages, one will fail and I'll have to start again. I use the concretize_together keyword and might be able to avoid this problem by not using this, but it feels the safest for my need. Anyway, it feels that sometimes, the concretizer misses things and these build failures could be avoided with extra warning/info at concretization time. This is also partly due to warnings not existing in certain packages I use (or tried to use like FlexiBLAS) so it is not entirely on Spack. ",,,"Thank you so much for working on and maintaining this package. Software development is often a thankless task and you all are doing great!! Your support on GitHub is THE best I've ever seen and when people ask about things like Issue/PR templates, I always send them to look at yours because I think they're exactly what every open-source project should use.",
12/21/2021 10:03:27,Software Developer,"DOE/NNSA Lab (e.g., LLNL/LANL/SNL)",United States,Yes,C++,Traditional HPC / Simulation,Used at my site,2,No,develop,CentOS 8,10 - 100,"2.7, 3.6",I'd live (I can provide Python 3 somehow),Spack environments,"Environments, Externals in packages.yaml, Concretization preferences in packages.yaml, spack load",No,No,"AMD, Intel, IBM Power, ARM","NVIDIA Other, AMD Other, Intel Xe (Ponte Vecchio)","gcc, Intel Compilers, Intel OneAPI / dpc++, LLVM, IBM XL, CCE (Cray Compilers)",Critical,Not Important,Very Important,Somewhat important,Very Important,Slightly Important,Not Important,Very Important,Not Important,Very Important,Somewhat important,Critical,Not Important,Not Important,Slightly Important,When I use build_type=Debug please retain the source tree.  Otherwise the debugger cannot show me the code.,Maybe,Yes,Coworkers,Never,Probably not,Probably not,OK,Good,Bad,Horrible,"I'm building a dependency set for our FleCSI project.  I need to employ different versions of the packages.  I'll create a new environment and install the new version. Sometimes I use patch() to make changes to a version of the package. Eventually, I'll get so bogged down in Spack failures that the only way forward is to git clone Spack somewhere new and start all over. Right now, Spack uses over 100 GB for myself alone.","The FleCSI project has transitioned to using Spack.  So, I have to use Spack to build it.","==> Error: 'CommentedMap' object has no attribute 'split'
putting +shared in the right places
Finding the right ~/.spack/packages.yaml for my system
Getting Spack MPI installations to work with Slurm.
",Improve reliability,,"Building dependencies is still as painful as it was 30 years ago.  We still pass around ""recipes"" of commands to give Spack in order to be able to build our projects.",
12/21/2021 14:02:46,Software Developer,"DOE/Office of Science Lab (e.g., ORNL/ANL/LBL)",United States,Yes,Python,Computer Science Research,Tutorial,2,Packages,,Ubuntu 20,1 - 10,"3.7, 3.8",Do it!,spack load,,No,No,"AMD, Intel",No GPUs,gcc,Very Important,Slightly Important,Not Important,Not Important,Critical,Not Important,Not Important,Not Important,Not Important,Not Important,Not Important,Not Important,Not Important,Not Important,Not Important,,Maybe,Yes,Coworkers,Yearly,Probably,No,OK,OK,OK,OK,,,,,,,
12/21/2021 15:07:06,Scientist/Researcher,University research group,United States,Yes,"C, C++, sh/bash/other shell script","Statistics / Data Analysis, Computer Science Research",Word of mouth,2,Issues,develop,"RHEL 7, RHEL 8, Debian 11",100 - 200,"3.7, 3.8, 3.9",Do it!,"spack load, Spack environments","Environments, Stacks (matrices in environments), spack-python (Python scripting), Externals in packages.yaml, Concretization preferences in packages.yaml, New concretizer (clingo), spack load",No,Yes,"AMD, Intel, IBM Power, ARM","NVIDIA Ampere, AMD MI200, Intel Xe (Ponte Vecchio)","gcc, Intel Compilers, Intel OneAPI / dpc++, LLVM, AMD ROCmCC / hipcc, nvcc (CUDA)",Very Important,Critical,Critical,Not Important,Somewhat important,Not Important,Not Important,Slightly Important,Not Important,Not Important,Critical,Not Important,Very Important,Slightly Important,Slightly Important,"- Support for versions generated from arbitrary Git hashes (foobar@git.1c2d3fe.as.v12.3 is foobar commit 1c2d3fe built with the recipe for v12.3).
- First-class dependencies for the standalone/smoke test phase (e.g. bison is not used by the library but is required for the post-installation testing code).
- First-class command support + documentation for bootstrapping compilers.",Maybe,No,"Documentation, GitHub, Source Code",Weekly,Probably,"Yes, definitely!",Good,Excellent,OK,OK,"Quick instancing of development versions of my work on remote machines (including all dependencies, and some variants for specific use cases).","Spack almost always ""does the right thing"" on a new machine with minimal additional configuration (for MPI and CUDA).","- Meson support is rough around the edges in many places, see e.g. https://github.com/spack/spack/issues/20721.
- `spack dev-build` is difficult to use in an edit-compile-run development loop (when editing the application sources, not package.py). It constantly requires extra `spack uninstall` commands and it re-does the entire build instead of just compiling the changed sources.",,,,
12/22/2021 6:04:28,Software Developer,University HPC/Computing Center,France,No,Tcl,Traditional HPC / Simulation,Birds-of-a-feather (BOF) at conference,4,Packages,develop,"RHEL 7, RHEL 8",10 - 100,3.6,Do it!,Environment Modules (TCL modules),Environments,No,No,AMD,AMD MI100,"gcc, Intel Compilers",Somewhat important,Somewhat important,Somewhat important,Slightly Important,Somewhat important,Somewhat important,Very Important,Somewhat important,Somewhat important,Very Important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,,Maybe,No,"Slack, GitHub",Monthly,Probably not,Probably,Excellent,Good,Good,Good,,,,,,,
12/22/2021 6:49:02,User Support Staff,"DOE/NNSA Lab (e.g., LLNL/LANL/SNL)",United States,Yes,"C++, Python",Traditional HPC / Simulation,Word of mouth,2,Packages,,RHEL 7,10 - 100,3.6,I'd live (I can provide Python 3 somehow),,"build-env (debug a build), spack external find, spack diff (compare two specs)",Yes -- just one,No,"AMD, Intel, ARM",AMD MI100,"gcc, Intel OneAPI / dpc++, AMD ROCmCC / hipcc, nvcc (CUDA), CCE (Cray Compilers)",Very Important,Somewhat important,Not Important,Slightly Important,Somewhat important,Slightly Important,Not Important,Somewhat important,Not Important,Very Important,Slightly Important,Very Important,Somewhat important,Somewhat important,Somewhat important,,Maybe,No,Documentation,Monthly,Probably,Probably not,OK,OK,Good,Good,,,,,,,
12/22/2021 10:34:11,Scientist/Researcher,University research group,United States,Yes,"C++, Python, R","Traditional HPC / Simulation, Compiler Testing, Systems tools, performance analysis",ECP,2,"Packages, Slack Discussions, Issues",develop,"RHEL 8, CentOS 8, Ubuntu 18, Ubuntu 20, SLES15",100 - 200,"3.6, 3.7, 3.8",Do it!,"Lmod, Custom script or env vars","Module generation, Externals in packages.yaml, New concretizer (clingo), spack develop, spack test",No,No,"AMD, Intel, IBM Power, ARM",No GPUs,"gcc, Intel OneAPI / dpc++, NVHPC (new NVIDIA PGI compilers), LLVM, AMD ROCmCC / hipcc, nvcc (CUDA), CCE (Cray Compilers)",Somewhat important,Critical,Somewhat important,Not Important,Not Important,Slightly Important,Not Important,Very Important,Not Important,Critical,Somewhat important,Not Important,Not Important,Very Important,Slightly Important,spack load gcc/11.0.1' would load all packages built with gcc-11.0.1.,"Yes, I'd attend",Yes,"Documentation, Slack, spack help, Source Code",Weekly,No,No,Good,Excellent,Excellent,Good,,,,,,,
12/22/2021 12:23:06,Scientist/Researcher,Company,United States,No,"Fortran, C, C++, Python, sh/bash/other shell script",Traditional HPC / Simulation,Presentation,5,No,"0.16, 0.17","RHEL 6, RHEL 7, RHEL 8, CentOS 6, CentOS 7, CentOS 8, Ubuntu 18","> 1,000","3.7, 3.8, 3.9",I'd live (I can provide Python 3 somehow),"spack load, Lmod, Environment Modules (TCL modules), Containers","Environments, Module generation, spack external find, Externals in packages.yaml, Concretization preferences in packages.yaml, New concretizer (clingo), spack install --reuse, spack load",No,No,"AMD, Intel, IBM Power, ARM","NVIDIA T4, NVIDIA Volta, NVIDIA Ampere, NVIDIA Other, AMD MI100, AMD MI200, AMD Other, Intel Xe (Ponte Vecchio)","gcc, Intel Compilers, Intel OneAPI / dpc++, PGI, NVHPC (new NVIDIA PGI compilers), LLVM, AMD ROCmCC / hipcc, nvcc (CUDA), IBM XL, armclang",Very Important,Very Important,Very Important,Very Important,Somewhat important,Somewhat important,Slightly Important,Very Important,Not Important,Very Important,Very Important,Critical,Very Important,Slightly Important,Somewhat important,Better coverage of O/S options by binary caches - right now a lot of them are not very useful when trying to install an E4S installation for example.,"Yes, I'd attend",Yes,"Documentation, Slack",Weekly,Probably not,Probably,OK,Good,OK,Good,Setting things up for my group's users to do actual development/production/benchmarking work.,Environments and the ability to rebuild E4S,Things now working on different OS/compiler cases from the ones that have been tested,Improve the binary cache picture or provide working tarballs of something like XSDK/E4S with a standard install location (e.g. /opt/spack) or a relocation script. The improved binary cache  picture would be easier I guess.,,,
12/23/2021 9:29:54,Software Developer,"DOE/NNSA Lab (e.g., LLNL/LANL/SNL)",United States,Yes,"C++, Python",Traditional HPC / Simulation,Used at my site,5,"Packages, Slack Discussions, GitHub Discussions, Issues","0.16, 0.17, develop, custom fork","macOS, RHEL 7, RHEL 8, Ubuntu 18, Ubuntu 20, Cray XC, Cray EX, Cray XT","500-1,000","2.7, 3.6, 3.7, 3.8, 3.9",I'd live (I can provide Python 3 somehow),Custom script or env vars,"Environments, Python extensions (link python packages into interpreter prefix), spack external find, Externals in packages.yaml, Concretization preferences in packages.yaml, spack develop",Yes -- several,No,"AMD, Intel, IBM Power","NVIDIA Volta, NVIDIA Ampere, NVIDIA Other, AMD MI100, AMD MI200, AMD Other, Intel Xe (Ponte Vecchio)","gcc, NVHPC (new NVIDIA PGI compilers), LLVM, AMD ROCmCC / hipcc, nvcc (CUDA), CCE (Cray Compilers)",Somewhat important,Slightly Important,Not Important,Somewhat important,Critical,Not Important,Not Important,Slightly Important,Slightly Important,Somewhat important,Very Important,Very Important,Critical,Slightly Important,Very Important,,"Yes, I'd attend",Yes,"Documentation, Slack, Coworkers, GitHub, spack help",Weekly,No,Probably not,Excellent,Excellent,Excellent,Excellent,,,,,,,
12/25/2021 5:44:43,Scientist/Researcher,University research group,Czech Republic,No,"Fortran, C, Python, sh/bash/other shell script","Traditional HPC / Simulation, ultrashort laser",Word of mouth,0,No,0.17,CentOS 7,1 - 10,3.7,I'd live (I can provide Python 3 somehow),"spack load, Environment Modules (TCL modules)","Module generation, spack install --reuse, spack load",No,No,"AMD, Intel","NVIDIA Volta, NVIDIA Ampere","gcc, Intel Compilers, LLVM, AMD ROCmCC / hipcc, nvcc (CUDA)",Critical,Critical,Somewhat important,Critical,Somewhat important,Critical,Not Important,Critical,Slightly Important,Critical,Critical,Critical,Very Important,Not Important,Not Important,,Maybe,No,"Documentation, spack help",Weekly,Probably not,"Yes, definitely!",Good,OK,Excellent,Excellent,"For now, I use it to install dependencies of Octopus TDDFT for several architectures (Intel and AMD). I also use it to administrate a Linux server at work. ",It also helped to install latest packages to circumvent very old packages in CentOS 7. ,Compilation for AMD using BLIS library instead of BLAS. Didn't succeed so far. ,I'm not sufficiently advanced for that. ,,This soft is a super tool I needed to discover long time ago. ,
12/28/2021 9:13:02,Scientist/Researcher,University research group,Belgium,No,"Fortran, Python",Traditional HPC / Simulation,Search,0,Packages,0.17,Arch,1 - 10,"3.9, 3.10",Do it!,spack build-env,spack load,No,No,"AMD, Intel",No GPUs,"gcc, Intel Compilers, Intel OneAPI / dpc++",Somewhat important,Not Important,Not Important,Not Important,Somewhat important,Slightly Important,Not Important,Somewhat important,Not Important,Somewhat important,Not Important,Not Important,Not Important,Somewhat important,Slightly Important,,Maybe,No,"Documentation, GitHub, spack help, Source Code",Monthly,Probably not,Probably,Good,Good,Excellent,Excellent,I mainly use it to distribute my software. But I recommended it to the HPC staff.,the general idea,"I don't remember exactly, but just updating recipes did not result in a new build for some reasons",,,,
12/31/2021 3:52:03,User Support Staff,Other Public Research Lab,Japan,No,"Fortran, C++",Traditional HPC / Simulation,Birds-of-a-feather (BOF) at conference,2,No,0.17,RHEL 8,1 - 10,3.8,Do it!,"spack load, Environment Modules (TCL modules)","Chaining (upstreams), spack load",Yes -- just one,No,ARM,NVIDIA Ampere,"gcc, LLVM, Fujitsu Compilers",Somewhat important,Very Important,Very Important,Critical,Slightly Important,Somewhat important,Somewhat important,Very Important,Not Important,Slightly Important,Somewhat important,Critical,Somewhat important,Somewhat important,Very Important,,Maybe,Yes,"Documentation, Coworkers, GitHub",Monthly,Probably not,Probably not,OK,OK,OK,OK,,,,,,,
1/3/2022 7:20:51,"dev, devops, sysadmin, comp scientist, and manager","DOE/Office of Science Lab (e.g., ORNL/ANL/LBL)",United States,Yes,C++,"Traditional HPC / Simulation, We are applications people forced to test compilers due to the state of play",Presentation,4,"Packages, GitHub Discussions, Issues",develop,"macOS, RHEL 8, Ubuntu 20, Cray XT",100 - 200,3.9,Do it!,spack load,"Externals in packages.yaml, Concretization preferences in packages.yaml, New concretizer (clingo), spack load",No,No,"AMD, Intel, IBM Power, ARM","NVIDIA Volta, NVIDIA Ampere, AMD MI100, AMD MI200, AMD Other, Intel Xe (Ponte Vecchio)","gcc, Intel Compilers, Intel OneAPI / dpc++, PGI, NVHPC (new NVIDIA PGI compilers), LLVM, AMD ROCmCC / hipcc, nvcc (CUDA), CCE (Cray Compilers), armclang",Somewhat important,Somewhat important,Slightly Important,Not Important,Slightly Important,Slightly Important,Not Important,Slightly Important,Somewhat important,Slightly Important,Critical,Very Important,Very Important,Slightly Important,Slightly Important,,Maybe,Yes,"Documentation, Slack, GitHub, Source Code",Monthly,Probably,"Yes, definitely!",Excellent,Excellent,Excellent,Excellent,"Installing a large matrix of software build dependencies (compilers, libraries, python, python packages...) to support testing QMCPACK compilation and testing",It is a huge time saver,Multiple near duplicate packages installed. (Going to reinvestigate environments early in 2022 hoping that they have matured since the last time we failed to use them successfully.),Automate upgrading and testing of new compiler and critical library versions. e.g. Q. Why is the latest version of HDF5 not the preferred version? A. Too many packages would break. Create a robot to save us from this situation and handle updates and version restrictions automagically.,It is more that there are stale packages that don't have the latest release version. ,,
1/3/2022 10:38:11,Manager,Xtreme-D.net,United States,No,"C++, Python, sh/bash/other shell script",Computer Science Research,Word of mouth,5,Issues,0.16,"RHEL 7, CentOS 7",10 - 100,3.6,Do it!,"spack load, Containers","spack external find, spack install --reuse, spack load",Yes -- just one,No,"AMD, Intel, ARM","NVIDIA T4, NVIDIA Other","gcc, Intel Compilers, Intel OneAPI / dpc++",Very Important,Very Important,Somewhat important,Somewhat important,Slightly Important,Slightly Important,Slightly Important,Very Important,Not Important,Very Important,Very Important,Very Important,Very Important,Somewhat important,Very Important,Repository of applications and case studies on using Spack. ,"Yes, I'd attend",Yes,"Documentation, Slack, GitHub",Weekly,Probably,Probably,OK,OK,Good,Excellent,We have general compute clusters so we have a number of users using spack to get their codes operational,adding flexibility of the environment to our HPC compute clusters,"Getting different codes compiled and configured for reuse.  Intel OneAPI compilers...
",Development of a case studies repositories on best ways to configure and reuse applications like OpenFOAM or other open source products.,Aim for the top 50 packages in the HPC space,Keep up the great work,
1/3/2022 10:46:05,Manager,University HPC/Computing Center,United States,No,"Fortran, C, Python, R, sh/bash/other shell script","Traditional HPC / Simulation, Statistics / Data Analysis, AI/ML, Computer Science Research, Bioinformatics, High Energy Physics",Birds-of-a-feather (BOF) at conference,5,Slack Discussions,0.16,"macOS, CentOS 8, openSuSE","500-1,000",3.8,Do it!,Lmod,"Environments, Module generation, Chaining (upstreams), Stacks (matrices in environments)",Yes -- just one,Yes,"AMD, Intel","NVIDIA T4, NVIDIA Ampere","gcc, Intel Compilers, Intel OneAPI / dpc++, NVHPC (new NVIDIA PGI compilers), nvcc (CUDA)",Very Important,Very Important,Very Important,Somewhat important,Somewhat important,Somewhat important,Slightly Important,Critical,Not Important,Very Important,Very Important,Very Important,Very Important,Somewhat important,Somewhat important,,"Yes, I'd attend",Yes,"Documentation, Slack, GitHub",Monthly,Probably not,Probably,Good,Excellent,Excellent,Excellent,,,,,,,
1/3/2022 10:47:26,Software Developer,Company,United States,No,"C++, Python",Dependency and package management,SBIR call for proposals,0,No,0.17,"Ubuntu 20, Windows Subsystem for Linux (WSL)",10 - 100,3.8,Do it!,Spack environments,Environments,No,No,Intel,No GPUs,gcc,Very Important,Slightly Important,Somewhat important,Very Important,Slightly Important,Slightly Important,Not Important,Not Important,Critical,Very Important,Somewhat important,Slightly Important,Slightly Important,Slightly Important,Somewhat important,,"Yes, I'd attend",Yes,"GitHub, Source Code",Monthly,Probably not,Probably,Good,Excellent,OK,Excellent,,,,,,,
1/3/2022 10:51:10,Computational Scientist,University research group,Germany,No,"Fortran, C, C++, Python, sh/bash/other shell script",Traditional HPC / Simulation,Word of mouth,1,Packages,"0.16, develop","Arch, openSuSE",10 - 100,"3.7, 3.10",Do it!,"Lmod, Environment Modules (TCL modules)",Module generation,No,No,"AMD, Intel",No GPUs,"gcc, Intel Compilers, Intel OneAPI / dpc++, NVHPC (new NVIDIA PGI compilers), LLVM, NAG, flang, f18, lfortran",Critical,Very Important,Very Important,Slightly Important,Slightly Important,Slightly Important,Not Important,Slightly Important,Not Important,Slightly Important,Slightly Important,Slightly Important,Slightly Important,Slightly Important,Slightly Important,,Maybe,No,Documentation,Monthly,No,No,Good,Good,Good,Good,Installing software and compilers when I don't want to bother my admin,Compiling compilers,Building LLVM from source and failing after wasting 1.5hrs to display one line of compiler error message.,,,,
1/3/2022 10:54:17,Scientist/Researcher,Company,France,No,"Fortran, C++, Python, C#",Traditional HPC / Simulation,Presentation,0,Packages,0.17,"Ubuntu 20, Fedora, Windows",10 - 100,"3.8, 3.9, 3.10",Do it!,"spack load, Spack environments, Lmod","Environments, spack install --reuse, spack load, spack diff (compare two specs)",Yes -- several,No,"Intel, ARM",NVIDIA Other,"gcc, Intel Compilers, Intel OneAPI / dpc++, LLVM",Slightly Important,Somewhat important,Somewhat important,Somewhat important,Slightly Important,Not Important,Slightly Important,Very Important,Very Important,Very Important,Critical,Critical,Very Important,Slightly Important,Not Important,--reuse as the default !,"Yes, I'd attend",Yes,"Documentation, GitHub",Weekly,Probably not,"Yes, definitely!",Good,Good,Good,Good,Setup all my hpc libraries,Automate compilation of complex fea libraries for multiple architecture/compilers/options,"--reuse option is not very clear
Windows release
deb/rpm packages file to install spack",YouTube videos/tutorials,"Some packages are not well setup (freefem), you may develop a quality indicator.",Keep going !,
1/3/2022 10:55:22,System Administrator,University HPC/Computing Center,United States,No,sh/bash/other shell script,Traditional HPC / Simulation,Word of mouth,3,No,"0.11, 0.16, 0.17","macOS, CentOS 7, Fedora",100 - 200,"2.7, 3.9",Unacceptable,Environment Modules (TCL modules),"Module generation, New concretizer (clingo), spack install --reuse",No,Yes,Intel,"NVIDIA Volta, NVIDIA Other","gcc, Intel Compilers, Intel OneAPI / dpc++",Somewhat important,Very Important,Slightly Important,Slightly Important,Slightly Important,Somewhat important,Not Important,Slightly Important,Not Important,Somewhat important,Slightly Important,Slightly Important,Somewhat important,Not Important,Slightly Important,"Better messaging on how external MPI packages should be what you want to use.  Interally compiled MPI has tripped me up before and the important difference is not something I recall from training, perhaps it's different now.","Yes, I'd attend",Yes,Slack,Monthly,No,Probably not,Good,Good,OK,Good,Compiling cluster packages and doing test compiles for things I might want to put on the cluster.,The fact it automates builds and mostly hides dependency complexity from you and the software end user.,"I don't want to show end users every spack compiled packages in environmental modules, so whitelisting specific packages for modules is the only minor annoyance I recall.",,,,
1/3/2022 10:56:15,System Administrator,University HPC/Computing Center,United States,No,"Fortran, Python",Traditional HPC / Simulation,Birds-of-a-feather (BOF) at conference,2,No,0.17,"macOS, RHEL 8",100 - 200,"3.8, 3.10",Do it!,"spack load, Lmod","Environments, Module generation, Stacks (matrices in environments), Build caches (binary packages), build-env (debug a build), spack external find, Externals in packages.yaml, Concretization preferences in packages.yaml, New concretizer (clingo)",Yes -- just one,No,"AMD, Intel, ARM",No GPUs,"gcc, Intel OneAPI / dpc++, NVHPC (new NVIDIA PGI compilers), LLVM",Somewhat important,Somewhat important,Not Important,Somewhat important,Slightly Important,Not Important,Not Important,Not Important,Not Important,Somewhat important,Very Important,Somewhat important,Not Important,Not Important,Very Important,,Maybe,No,"Documentation, Slack, GitHub",Daily,Probably not,"Yes, definitely!",OK,Excellent,OK,Good,"I am a sysadmin for multiple small HPC clusters, and attempt to use spack to install software for users (such that the existence of spack is invisible to them)",Complex software installs are easy!,Lmod hierarchies (and Lmod in general) seem barely supported ,Improve Lmod support ,"Ansys software and DoD Create-RF - of course, neither of these have public download URLs",Thanks so much for this wonderful tool!,
1/3/2022 11:04:02,Scientist/Researcher,University research group,United States,Yes,"C++, Python","Traditional HPC / Simulation, Computer Science Research, High Energy Physics",Used at my site,3,"Packages, Slack Discussions, GitHub Discussions, Issues",develop,"RHEL 7, RHEL 8, Ubuntu 20",10 - 100,3.6,Do it!,"spack load, Spack environments, Lmod, spack view","Environments, Module generation, Chaining (upstreams), spack external find, Externals in packages.yaml, Concretization preferences in packages.yaml, New concretizer (clingo), spack develop, spack test, spack load",Yes -- several,No,"AMD, Intel, IBM Power, ARM","NVIDIA Volta, NVIDIA Other, AMD MI100, AMD MI200, Intel Xe (Ponte Vecchio)","gcc, Intel Compilers, LLVM, nvcc (CUDA), IBM XL",Critical,Critical,Very Important,Somewhat important,Somewhat important,Somewhat important,Slightly Important,Somewhat important,Critical,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Critical,,Maybe,Yes,"Documentation, Slack",Weekly,Probably not,Probably,OK,Excellent,Good,Excellent,,,,,,,
1/3/2022 11:11:04,System Administrator,University HPC/Computing Center,United States,No,sh/bash/other shell script,Traditional HPC / Simulation,Tutorial,4,Issues,0.16,"CentOS 7, CentOS 8, Ubuntu 20",10 - 100,"2.7, 3.5",I'd live (I can provide Python 3 somehow),Spack environments,"Environments, Module generation",Yes -- several,No,"AMD, Intel",NVIDIA Other,"gcc, Intel Compilers, LLVM, nvcc (CUDA)",Very Important,Very Important,Very Important,Somewhat important,Somewhat important,Very Important,Slightly Important,Very Important,Not Important,Somewhat important,Very Important,Very Important,Somewhat important,Somewhat important,Somewhat important,not sure,"Yes, I'd attend",Yes,"Documentation, Slack, spack help, Email",Monthly,"Yes, definitely!",Probably,Excellent,Good,Good,Good,I build software for my HPC system,Building most common softwares with out compiling from my end,When version changes in the spack packages or URL for the packages. Different compiler and MPI version. ,add more packages by talking to HPC communities. You can get help from them. Have more workshops and training.  Teach users in depth of spack build. ,Yes. Many!!,I love spack. It is one of the beast free tools and support in HPC community. Get support from HPC community so that you can get more funding. It should become a part of HPC cluster like OS is part of computer. ,
1/3/2022 11:23:38,System Administrator,"DOE/Office of Science Lab (e.g., ORNL/ANL/LBL)",United States,Yes,,Traditional HPC / Simulation,Tutorial,4,"Packages, Documentation, Slack Discussions","0.17, develop","macOS, RHEL 8, CentOS 8, SLES15, Windows Subsystem for Linux (WSL)",200 - 500,3.7,Do it!,"Spack environments, Lmod","Environments, Module generation, Chaining (upstreams)",Yes -- just one,No,"AMD, Intel, IBM Power","NVIDIA Ampere, AMD MI200","gcc, Intel Compilers, NVHPC (new NVIDIA PGI compilers), AMD ROCmCC / hipcc, nvcc (CUDA)",Critical,Critical,Critical,Not Important,Very Important,Slightly Important,Not Important,Very Important,Not Important,Very Important,Not Important,Very Important,Critical,Slightly Important,Slightly Important,,"Yes, I'd attend",Yes,"Documentation, Slack, Coworkers",Weekly,Probably,No,Good,OK,OK,Excellent,Installing software onto HPC systems with an environment,,,,,,
1/3/2022 11:24:41,Scientist/Researcher,Other Public Research Lab,France,No,"C++, Python",High Energy Physics,Presentation,2,"Slack Discussions, Issues","0.17, develop","macOS, RHEL 8, Ubuntu 20",100 - 200,"3.8, 3.9",Do it!,"spack load, Spack environments, spack build-env","Environments, Build caches (binary packages), build-env (debug a build), Python extensions (link python packages into interpreter prefix), spack external find, Externals in packages.yaml, Concretization preferences in packages.yaml, New concretizer (clingo), spack develop, spack install --reuse, spack load, spack diff (compare two specs)",Yes -- several,No,"Intel, ARM",No GPUs,"gcc, LLVM, Apple Clang",Somewhat important,Very Important,Slightly Important,Critical,Slightly Important,Somewhat important,Not Important,Slightly Important,Slightly Important,Somewhat important,Very Important,Very Important,Somewhat important,Slightly Important,Very Important,More support for Apple M1 ?,"Yes, I'd attend",Yes,"Documentation, Slack, GitHub, spack help, Source Code",Weekly,Probably not,Probably,Good,Good,OK,OK,Install (custom) HEP stacks,Spack develop ,Integration of Fortran packages on a M1 (not only Spack’s fault I realize ),Build caches for more platforms (Mac),,,
1/3/2022 11:26:24,System Administrator,University HPC/Computing Center,Germany,No,"Fortran, sh/bash/other shell script","Traditional HPC / Simulation, AI/ML, Computer Science Research, Bioinformatics",Word of mouth,3,"GitHub Discussions, Issues","0.16, 0.17","CentOS 7, CentOS 8, Ubuntu 18, Ubuntu 20",10 - 100,"2.7, 3.6",Do it!,Environment Modules (TCL modules),"Module generation, Chaining (upstreams), Externals in packages.yaml, Concretization preferences in packages.yaml, New concretizer (clingo)",Yes -- several,Yes,"AMD, Intel","NVIDIA Volta, NVIDIA Ampere, NVIDIA Other","gcc, Intel Compilers, Intel OneAPI / dpc++, NVHPC (new NVIDIA PGI compilers), LLVM, nvcc (CUDA)",Very Important,Somewhat important,Very Important,Slightly Important,Slightly Important,Slightly Important,Not Important,Very Important,Not Important,Slightly Important,Somewhat important,Somewhat important,Somewhat important,Slightly Important,Slightly Important,,Maybe,No,"Documentation, Coworkers, GitHub",Monthly,Probably not,Probably not,OK,OK,OK,OK,,,"concretization should be less picky for uncritical parts; it should not make any difference which compiler was used to build automake, make, tar, ...",,,,
1/3/2022 11:30:45,Research Software Engineer (RSE),University HPC/Computing Center,United States,No,"Python, R",Statistics / Data Analysis,Used at my site,2,"Slack Discussions, Issues","0.16, 0.17","CentOS 7, Ubuntu 20",100 - 200,3.8,Do it!,Lmod,"Environments, spack load",No,Yes,Intel,NVIDIA Other,gcc,Critical,Critical,Very Important,Somewhat important,Very Important,Somewhat important,Slightly Important,Slightly Important,Not Important,Somewhat important,Somewhat important,Somewhat important,Very Important,Somewhat important,Somewhat important,,Maybe,Yes,"Documentation, GitHub",Monthly,Probably not,Probably,Good,Good,Good,Excellent,,,,,,,
1/3/2022 11:30:58,Software Developer,University research group,United States,No,Julia,"Traditional HPC / Simulation, AI/ML, Computer Science Research, Compiler Testing, Compiler and Runtime development",Presentation,2,"Packages, Slack Discussions, Issues, Tools/integrations",develop,Arch,10 - 100,3.1,Do it!,spack view,"Environments, Chaining (upstreams), spack external find, Externals in packages.yaml, Concretization preferences in packages.yaml, New concretizer (clingo), spack develop",Yes -- several,Yes,"AMD, IBM Power","NVIDIA Ampere, AMD MI200","gcc, LLVM",Critical,Critical,Very Important,Somewhat important,Very Important,Very Important,Not Important,Slightly Important,Very Important,Somewhat important,Somewhat important,Critical,Slightly Important,Somewhat important,Very Important,Support for Julia packages and environments,"Yes, I'd present something!",No,"Documentation, Slack",Weekly,Probably not,Probably,Good,Excellent,Good,Excellent,,,,,,,
1/3/2022 11:31:04,Research Software Engineer (RSE),Company,United States,No,"C++, Python, sh/bash/other shell script, Java, PHP, Racket, Scala","Traditional HPC / Simulation, Statistics / Data Analysis, AI/ML, Computer Science Research, Web applications",Twitter,0,"Packages, Slack Discussions, GitHub Discussions, Issues",custom fork,"macOS, Ubuntu 20, Windows Subsystem for Linux (WSL)",10 - 100,3.8,I'd live (I can provide Python 3 somehow),"Spack environments, spack view","Environments, Stacks (matrices in environments), Build caches (binary packages), build-env (debug a build), Python extensions (link python packages into interpreter prefix), spack external find, Externals in packages.yaml, Concretization preferences in packages.yaml, spack ci (generate GitLab Pipelines), New concretizer (clingo), spack diff (compare two specs)",Yes -- several,Yes,"AMD, Intel","NVIDIA T4, NVIDIA Other","gcc, LLVM",Not Important,Somewhat important,Somewhat important,Not Important,Not Important,Somewhat important,Not Important,Very Important,Not Important,Critical,Slightly Important,Somewhat important,Slightly Important,Critical,Somewhat important,,Maybe,No,"Documentation, Slack, Source Code",Weekly,No,Probably,OK,Good,OK,Good,creating buildcaches for environments to allow compiled dependency reuse across teams at a research-oriented startup. All of our projects use CMake.,buildcaches on S3,"spliced builds, figuring out how to correctly author uninstallation of extension packages for languages with their own built-in package management.",better tests for PRs impacting S3 functionality,C++ tensorflow API should be a variant for tensorflow,,
1/3/2022 12:04:14,Software Developer,Company,United States,Yes,"C, C++, Python, sh/bash/other shell script","Traditional HPC / Simulation, Visualization",Working on ECP SDKs,0,"Packages, Documentation, Slack Discussions, GitHub Discussions, Issues","develop, custom fork","RHEL 8, Ubuntu 18, Ubuntu 20, Fedora, Cray EX",100 - 200,"3.6, 3.7, 3.8, 3.9",Do it!,"Spack environments, Lmod, Containers","Environments, Module generation, spack containerize, spack external find, Externals in packages.yaml, Distributed Builds (srun/mpirun spack install), New concretizer (clingo), spack develop, spack test",No,Yes,"AMD, Intel, ARM","NVIDIA Ampere, AMD MI100, Intel Xe (Ponte Vecchio)","gcc, Intel Compilers, Intel OneAPI / dpc++, NVHPC (new NVIDIA PGI compilers), LLVM, AMD ROCmCC / hipcc, nvcc (CUDA), CCE (Cray Compilers), armclang",Very Important,Somewhat important,Slightly Important,Not Important,Not Important,Slightly Important,Not Important,Somewhat important,Not Important,Very Important,Critical,Critical,Critical,Slightly Important,Very Important,"Uniform specification of shared/static library deps

Packages should do better to limit themselves to providing variants that are useful, testable, and well defined vs possible because a project allows it.

Packages that provide many, many tools, looking at LLVM in particular, should provide them as virtual packages.

Allow virtual packages to have ""virtual"" variant mappings.

Allow definition of variants that are self-propagating, ie. ecp-data-vis-sdk +adios2 +hdf5 could say that hdf5 is a propagating variant, so all packages that have a +hdf5 variant will automatically inherit +hdf5 from ecp-data-vis-sdk. Another good example would be linkage=shared and all packages that specify the linkage type would inherit the parent, unless it was explicitly overridden.","Yes, I'd attend",Yes,"Documentation, Slack, Coworkers, spack help, Source Code",Daily,Probably not,Probably not,Good,Excellent,OK,Good,"Currently I am testing the ecp-data-vis-sdk packages and configurations on emerging platforms, namely Frontier (Spock), Perlmutter, and eventually Aurora. I usually spend a week or more getting a system package.yaml configured for external packages and fixing the auto-generated compilers.yaml. Once those work building zlib, I create an environment which contains all of the target configurations for the system using the SDK package and install all of them. Then I dig through the build logs for failures and work out what was wrong package by package and make environment and package updates as needed until everything works.","Working with/on Spack has taught me a lot of skills that I would otherwise not have learned, and it has saved me a lot of time building packages that I would have otherwise had to build by hand.","Error messages have been in flux from good to bad to unusable depending on the situation. Inconsistency in how variants are implemented has made it difficult to figure some things out, requiring opening up the source to get information I need. Some packages have so many options that it is quite easy to find edge cases that are broken due to a lack of checking variant combinations that are not compatible or overly constrained dependencies.","From the slack and github conversations I think the answer is to keep pushing in the direction you are going. The spack maintainers are great at community engagement and listening to user needs, so keep it up!",No,"Thanks for your hard work, I am glad to be a part of this great community!",
1/3/2022 12:14:46,DevOps/SRE,University HPC/Computing Center,Switzerland,Yes,"C, C++, Python, sh/bash/other shell script",Traditional HPC / Simulation,Used at my site,2,"Packages, Slack Discussions, Issues","0.17, develop","CentOS 8, Arch",200 - 500,"3.6, 3.7, 3.10",Do it!,"spack load, Spack environments, spack build-env, Custom script or env vars","Environments, spack containerize, build-env (debug a build), spack external find, Externals in packages.yaml, Concretization preferences in packages.yaml, New concretizer (clingo), spack install --reuse, spack load",Yes -- just one,No,"AMD, Intel, IBM Power","NVIDIA Volta, AMD MI100","gcc, LLVM, AMD ROCmCC / hipcc, nvcc (CUDA), CCE (Cray Compilers)",Critical,Very Important,Very Important,Critical,Somewhat important,Very Important,Somewhat important,Somewhat important,Slightly Important,Very Important,Very Important,Somewhat important,Critical,Somewhat important,Somewhat important,,"Yes, I'd attend",No,"Documentation, Slack, GitHub, spack help, Source Code",Weekly,Probably,Probably not,Good,Excellent,Good,Good,,"I use spack to build the dependencies of a project I am developing. The dependency tree is non-trivial, Spack provides an easy and concise way to specify the exact dependency configurations.",The recent introduction of the `--reuse` flag has resolved my biggest pain point.,"One thing (even though not so big) that I would like to see handled better are packages that have a post-installation step requiring `sudo` access (such as Singularity). Instead of just issuing a message, I think it would be better to issue an interactive prompt for a password  ",,,
1/3/2022 13:21:56,Computational Scientist,Cloud Provider,United States,No,"Fortran, C, C++, Python, Go, MATLAB",Traditional HPC / Simulation,Used at my site,3,"Packages, Core Features, Documentation, Slack Discussions, GitHub Discussions, Issues","0.15, 0.16, 0.17, develop","CentOS 7, CentOS 8, Ubuntu 16, Ubuntu 18, Ubuntu 20, Amazon Linux","> 1,000","2.7, 3.8, 3.9, 3.10",I'd live (I can provide Python 3 somehow),"spack load, Environment Modules (TCL modules), Containers","Environments, Module generation, spack containerize, Chaining (upstreams), Stacks (matrices in environments), Build caches (binary packages), build-env (debug a build), spack external find, Externals in packages.yaml, Concretization preferences in packages.yaml, spack ci (generate GitLab Pipelines), Distributed Builds (srun/mpirun spack install), New concretizer (clingo), spack install --reuse, spack load, spack diff (compare two specs)",Yes -- several,Yes,"AMD, Intel, ARM","NVIDIA T4, NVIDIA Volta, NVIDIA Ampere, NVIDIA Other, AMD MI100, AMD MI200, AMD Other, Intel Xe (Ponte Vecchio)","gcc, Intel Compilers, Intel OneAPI / dpc++, NVHPC (new NVIDIA PGI compilers), LLVM, AMD ROCmCC / hipcc, nvcc (CUDA), NAG, armclang",Slightly Important,Critical,Very Important,Critical,Very Important,Somewhat important,Somewhat important,Somewhat important,Slightly Important,Critical,Slightly Important,Slightly Important,Slightly Important,Somewhat important,Not Important,Revised documentation or dedicated tutorial for CI pipelines. Ability to offline Spack by pointing to local object storage mirror. ,"Yes, I'd attend",Yes,"Documentation, Slack, GitHub",Weekly,"Yes, definitely!",Probably,Good,Excellent,Good,Excellent,,"""reuse""","LLVM (~10GB) imported as part of OneAPI, CUDA, and other packages, but does not export as virtual. This results in significant bloat. ",Add S3 lazy loads for binary cache. ,,,
1/3/2022 15:07:54,Software Developer,University research group,United States,No,"C, Python, Rust, Go, sh/bash/other shell script","Traditional HPC / Simulation, Computer Science Research",Word of mouth,2,"Packages, Slack Discussions, GitHub Discussions",develop,"macOS, CentOS 8, Ubuntu 18, Ubuntu 20",200 - 500,"3.8, 3.9",Do it!,"Spack environments, spack view","Environments, spack containerize, Build caches (binary packages), spack-python (Python scripting), spack external find, New concretizer (clingo)",Yes -- just one,No,"AMD, Intel, ARM",NVIDIA Volta,"gcc, LLVM",Very Important,Critical,Very Important,Critical,Critical,Slightly Important,Not Important,Slightly Important,Not Important,Somewhat important,Somewhat important,Very Important,Somewhat important,Critical,Critical,Remote Package Installation (eg. spack install github.com/user/repo) which looks for a top level package.py declaration in the repo.,"Yes, I'd present something!",Yes,"Documentation, Slack, Source Code",Monthly,Probably,"Yes, definitely!",Good,Good,OK,OK,"spack env create  --with-view /path/to/view environment
spack env activate environment
spack install {PACKAGES}",,Unfortunetly the most common error I run into with Spack is some package failing to build after it has been updated.,Improve testing of PRs and packages on updates.,,,
1/3/2022 16:01:29,Scientist/Researcher,"DOE/Office of Science Lab (e.g., ORNL/ANL/LBL)",United States,No,"C++, Python, sh/bash/other shell script","Traditional HPC / Simulation, Statistics / Data Analysis, AI/ML, Computer Science Research",Word of mouth,3,Slack Discussions,,"CentOS 7, Ubuntu 20",100 - 200,"3.7, 3.8, 3.9",Do it!,Lmod,"Module generation, spack external find, spack load",No,No,"Intel, ARM",NVIDIA Volta,"gcc, Intel Compilers, Intel OneAPI / dpc++, LLVM, nvcc (CUDA)",Somewhat important,Very Important,Very Important,Very Important,Not Important,Slightly Important,Not Important,Somewhat important,Not Important,Slightly Important,Somewhat important,Slightly Important,Somewhat important,Somewhat important,Somewhat important,spack upgrade,"Yes, I'd attend",Yes,"Documentation, Slack",Weekly,Probably not,Probably,Good,OK,Excellent,Excellent,"I use spack to set up a development environment for heterogeneous parallelism (multicore, GPU, MPI).",Being able to reliably access packages I need -- without needing root privileges.,"Being able to re-install a package (e.g., to upgrade or change config) -- it would be nice if prior configurations were ""sticky"" or easy to recover in some way so that I could reliably build new versions of a program with the same configurations as a previous one.",spack upgrade -- to upgrade all (or some) installed packages to latest (or designated) version.,,,
1/3/2022 17:51:38,Scientist/Researcher,University research group,United States,No,"C++, Python","Statistics / Data Analysis, nuclear physics, dark matter",Search,4,"No, Issues",0.17,"RHEL 6, CentOS 7",1 - 10,3.7,Do it!,Containers,Environments,No,No,Intel,No GPUs,gcc,Somewhat important,Critical,Slightly Important,Somewhat important,Very Important,Somewhat important,Somewhat important,Somewhat important,Not Important,Not Important,Somewhat important,Critical,Somewhat important,Somewhat important,Somewhat important,Increased end-user outreach - my collaboration probably should be using Spack but few are familiar with it and those who have taken a look are intimidated by the documentation. ,Maybe,Yes,GitHub,Yearly,Probably not,Probably,OK,Good,Good,OK,I've tried to use Spack to install gcc with support for C++11 on (very) old systems that I do not have administrative access on.  I've also used Spack to build software in containers.,"Spack lets me build software in containers easy-peasy, wonderful!",Can't get the ROOT installation to work on my random system.  Been trying for four years!  Luckily the system was updated this year.,compilers as true dependencies!,,,
1/3/2022 21:21:32,Software Developer,Company,United States,No,"C++, Python","Traditional HPC / Simulation, AI/ML",Word of mouth,2,Packages,0.17,CentOS 7,1 - 10,3.7,I'd live (I can provide Python 3 somehow),Lmod,Environments,No,No,Intel,No GPUs,gcc,Slightly Important,Slightly Important,Slightly Important,Not Important,Not Important,Somewhat important,Not Important,Not Important,Not Important,Slightly Important,Slightly Important,Slightly Important,Not Important,Not Important,Not Important,,No,No,Documentation,Monthly,Probably not,Probably,Excellent,Good,Good,Good,,,Installing clingo on an airgapped cluster,,,,
1/3/2022 23:28:40,System Administrator,University HPC/Computing Center,Germany,No,"Python, sh/bash/other shell script","Traditional HPC / Simulation, AI/ML, Bioinformatics",Tutorial,1,Packages,"0.16, develop","CentOS 7, Arch",100 - 200,"3.8, 3.9, 3.10",Do it!,"spack load, Lmod","Environments, Module generation, Distributed Builds (srun/mpirun spack install)",Yes -- several,Yes,"AMD, Intel","NVIDIA Volta, NVIDIA Ampere","gcc, Intel Compilers, NVHPC (new NVIDIA PGI compilers)",Very Important,Somewhat important,Somewhat important,Not Important,Somewhat important,Slightly Important,Not Important,Somewhat important,Not Important,Slightly Important,Very Important,Very Important,Very Important,Somewhat important,Somewhat important,,"Yes, I'd attend",No,"Documentation, Slack, Coworkers, GitHub",Weekly,Probably,Probably not,Good,Excellent,Excellent,Excellent,I'm an sysadmin on a HPC system. I do most of my software installs first as a user on the cluster and then (if everything works out) for as admin for all users. Recently I've started to dabble with packaging and create the packages locally first and then upstream it.,Many packages could be installed without a hassle from the spack repo,"1. Dependencies on outdated packages. 2. Multiple versions of a package due to some not directly clear version problem. E.g. when I run `spack install py-sphinx py-sphinxcontrib-programoutput py-sphinx-rtd-theme graphviz git mercurial subversion` as noted in the contribution guide, you will end up with two versions of sphinx and need to find out what happened. (Mentioned here: https://github.com/spack/spack/issues/27644#issuecomment-978797134).",Make version conflicts and problems a bit more clear. It's sometimes hard to find out what exactly went wrong. Spack is sometimes quite verbose and you miss the most important line...,,Keep up the good work!,
1/4/2022 0:39:23,Software Developer,CINECA,Italy,No,"C++, Python","Traditional HPC / Simulation, Visualization",Word of mouth,3,Packages,"0.13, 0.16","RHEL 7, CentOS 8",200 - 500,3.6,Do it!,"Environment Modules (TCL modules), Custom script or env vars","Environments, Module generation, Chaining (upstreams), spack external find, Externals in packages.yaml, Concretization preferences in packages.yaml",Yes -- just one,No,"AMD, Intel","NVIDIA Volta, NVIDIA Ampere, AMD MI100","gcc, Intel Compilers, AMD ROCmCC / hipcc, nvcc (CUDA)",Somewhat important,Somewhat important,Critical,Somewhat important,Somewhat important,Slightly Important,Slightly Important,Somewhat important,Slightly Important,Very Important,Very Important,Somewhat important,Very Important,Slightly Important,Somewhat important,,"Yes, I'd attend",Yes,"Documentation, Coworkers, GitHub",Monthly,Probably not,Probably,Good,Excellent,Excellent,Excellent,,,,,,,
1/4/2022 0:42:58,Scientist/Researcher,University research group,Norway,No,"Fortran, C++, Python, Julia",Traditional HPC / Simulation,Word of mouth,2,No,0.16,"Debian 10, Debian 11",10 - 100,"3.6, 3.7",Do it!,"Spack environments, Lmod","Environments, Module generation, spack containerize, Chaining (upstreams), New concretizer (clingo), spack test",Yes -- just one,Yes,Intel,"NVIDIA T4, NVIDIA Volta","gcc, Intel OneAPI / dpc++, NVHPC (new NVIDIA PGI compilers)",Very Important,Somewhat important,Somewhat important,Very Important,Somewhat important,Slightly Important,Slightly Important,Very Important,Not Important,Very Important,Critical,Very Important,Slightly Important,Not Important,Not Important,,"Yes, I'd attend",Yes,"Documentation, Slack, Mailing List",Weekly,Probably not,Probably not,Good,Excellent,Good,Good,I use spack for managing the software stacks on our groups local HPC cluster. ,The spack community and slack,Debian seems not always to work smoothly with spack. We have had issues with e.g. OpenMPI package when it comes to the path to pmi. We have to comment a few lines in the package.py each time a new spack version is rolled out. ,,The slatec library (an old Fortran math library);  https://github.com/MehdiChinoune/SLATEC,"Keep up the good work. We, the community really appreciate all your efforts.",
1/4/2022 5:41:18,Architect,Cloud Provider,United Kingdom,No,"Python, sh/bash/other shell script","Traditional HPC / Simulation, Bioinformatics, High Energy Physics",Word of mouth,2,No,"0.14, 0.16","CentOS 7, Ubuntu 18, Ubuntu 20, Amazon Linux",10 - 100,"2.7, 3.8, 3.9, 3.10",Do it!,spack load,"Externals in packages.yaml, spack load",No,Yes,"AMD, Intel, ARM","NVIDIA T4, NVIDIA Other, AMD Other","gcc, Intel Compilers, Intel OneAPI / dpc++, armclang",Critical,Critical,Somewhat important,Somewhat important,Very Important,Somewhat important,Somewhat important,Very Important,Not Important,Not Important,Not Important,Very Important,Not Important,Not Important,Not Important,Easier debug when a build fails.,"Yes, I'd present something!",No,Coworkers,Weekly,Probably,Probably not,Bad,OK,OK,Good,installing open source apps on HPC clusters,building some apps with compelx dependencies,debugging when a build fails,support the packages and test if they work on a regular basis,quite a few european hpc codes eg efispec3d,get everything working you already have first.,
1/4/2022 7:33:19,Scientist/Researcher,"DOE/NNSA Lab (e.g., LLNL/LANL/SNL)",United States,Yes,"C++, Python","Traditional HPC / Simulation, AI/ML, Computer Science Research",Used at my site,3,No,Don't know,RHEL 7,1 - 10,3.7,I'd live (I can provide Python 3 somehow),Custom script or env vars,,Yes -- several,My site has a front-end or extension to Spack,Intel,No GPUs,"gcc, Intel Compilers",Not Important,Not Important,Not Important,Not Important,Not Important,Not Important,Not Important,Not Important,Not Important,Not Important,Not Important,Not Important,Not Important,Not Important,Not Important,Usability improvements --- Using spack after a month or two off takes costs me 1-2 days each time.,No,No,Coworkers,Never,No,No,Horrible,OK,Bad,Horrible,Custom spack wrappers for our code,Nothing really.,The fact that it never works the same way each time.  Something always changes requiring my workflow to change.,Improve usability.  Also the developer mode documentation is terrible.,Don't care --- we'd don't use pre-provided spack packages,,
1/4/2022 7:56:42,Software Developer,"DOE/NNSA Lab (e.g., LLNL/LANL/SNL)",United States,Yes,"C, C++, Python","Traditional HPC / Simulation, Computer Science Research",Used at my site,1,No,0.17,"RHEL 7, RHEL 8, CentOS 7, CentOS 8",10 - 100,"3.7, 3.8",Do it!,"Spack environments, Containers","Environments, Module generation, spack containerize, Build caches (binary packages), spack external find, Concretization preferences in packages.yaml, spack load",No,No,"AMD, Intel","NVIDIA Volta, NVIDIA Ampere, AMD MI100","gcc, AMD ROCmCC / hipcc, CCE (Cray Compilers)",Very Important,Somewhat important,Somewhat important,Slightly Important,Somewhat important,Somewhat important,Slightly Important,Somewhat important,Not Important,Somewhat important,Somewhat important,Somewhat important,Very Important,Slightly Important,Somewhat important,,Maybe,Yes,Coworkers,Monthly,Probably not,Probably not,Good,Excellent,Good,Excellent,,,,,,,
1/4/2022 8:19:39,Computational Scientist,"DOE/Office of Science Lab (e.g., ORNL/ANL/LBL)",United States,Yes,"C, C++, Python, sh/bash/other shell script","Traditional HPC / Simulation, Statistics / Data Analysis, AI/ML",Word of mouth,2,"Packages, GitHub Discussions, Issues",develop,"macOS, RHEL 8, Ubuntu 18, SLES12, Alpine, Cray XC","500-1,000","3.6, 3.7, 3.8, 3.9",Do it!,"spack load, Lmod, spack find -p","Environments, Module generation, spack containerize, Chaining (upstreams), build-env (debug a build), New concretizer (clingo), spack develop, spack test, spack load",Yes -- several,Yes,"AMD, Intel, IBM Power","NVIDIA Volta, NVIDIA Ampere, AMD MI200","gcc, Intel Compilers, LLVM, AMD ROCmCC / hipcc, nvcc (CUDA), CCE (Cray Compilers)",Very Important,Somewhat important,Very Important,Somewhat important,Not Important,Somewhat important,Not Important,Very Important,Slightly Important,Critical,Somewhat important,Very Important,Critical,Very Important,Slightly Important,Collaboration with distros like Debian as an open-source alternative to Snap,Maybe,Yes,"Documentation, GitHub, spack help, Source Code",Monthly,Probably,"Yes, definitely!",Good,Good,OK,Excellent,I use spack to install dependency libraries for my HPC development projects.,spack install,spack package build errors are difficult to diagnose (poor compile logs / build error messages),"improve system integration, documentation, and package build reliability, consider rethinking python strategy to use python/poetry...",,,
1/4/2022 9:08:27,Scientist/Researcher,"DOE/NNSA Lab (e.g., LLNL/LANL/SNL)",United States,Yes,"C++, Python, sh/bash/other shell script","Traditional HPC / Simulation, AI/ML, Computer Science Research",Used at my site,4,"Packages, Core Features, Slack Discussions, Issues","0.16, 0.17, develop","macOS, RHEL 7, RHEL 8, Amazon Linux, TOSS","500-1,000",3.7,Do it!,"spack load, Spack environments, Lmod, spack build-env","Environments, Module generation, spack containerize, Build caches (binary packages), build-env (debug a build), spack external find, Externals in packages.yaml, Concretization preferences in packages.yaml, New concretizer (clingo), spack develop, spack install --reuse, spack test, spack load",Yes -- several,Yes,"AMD, Intel, IBM Power, ARM","NVIDIA Volta, NVIDIA Ampere, AMD MI100, AMD MI200, Intel Xe (Ponte Vecchio)","gcc, NVHPC (new NVIDIA PGI compilers), LLVM, AMD ROCmCC / hipcc, nvcc (CUDA), IBM XL, CCE (Cray Compilers), Fujitsu Compilers, armclang",Very Important,Very Important,Very Important,Slightly Important,Slightly Important,Somewhat important,Slightly Important,Somewhat important,Not Important,Very Important,Critical,Critical,Very Important,Slightly Important,Somewhat important,,"Yes, I'd attend",Yes,"Documentation, Slack, Mailing List, Coworkers, GitHub, spack help, Source Code, Email",Weekly,Probably,Probably,OK,Good,OK,OK,I develop and maintain multiple spack packages for an HPC/AI toolchain.,"When it works, it helps enable others to deploy research software.","For complex packages, simple commands like spack install <tool> rarely work without significant help.  Also finding external dependencies is tedious and spotty.  Weird errors can break the entire workflow and leave people uncertain of what went wrong.  Too often, the user solution is to delete spack and reinstall.  There needs to be a real spack clean command that gets back to ""stock"".","More robust handling of dependencies and compilers.  The ability to pass command line arguments to specific packages, but not all of the dependencies.",,,
1/4/2022 15:21:08,System Administrator,University HPC/Computing Center,United States,No,"Python, R, sh/bash/other shell script","Traditional HPC / Simulation, Statistics / Data Analysis, AI/ML, Bioinformatics, High Energy Physics",Search,5,"Packages, Core Features, Documentation, Slack Discussions, GitHub Discussions, Issues, Mailing List","develop, custom fork","CentOS 7, Gentoo","> 1,000","3.8, 3.9",Do it!,"Lmod, Environment Modules (TCL modules), Containers","Environments, Module generation, spack containerize, Stacks (matrices in environments), build-env (debug a build), Python extensions (link python packages into interpreter prefix), spack external find, Externals in packages.yaml, Concretization preferences in packages.yaml, New concretizer (clingo), spack develop, spack install --reuse",Yes -- several,Yes,Intel,"NVIDIA Volta, NVIDIA Ampere, NVIDIA Other","gcc, Intel OneAPI / dpc++, NVHPC (new NVIDIA PGI compilers), nvcc (CUDA)",Critical,Slightly Important,Very Important,Slightly Important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Not Important,Slightly Important,Slightly Important,Somewhat important,Very Important,Somewhat important,Somewhat important,,"Yes, I'd attend",Yes,"Documentation, Slack, GitHub, Source Code",Weekly,Probably not,Probably not,Good,Excellent,OK,Good,Deploy stacks of software compiled for different micro-architectures. Spack is wrapped in a deployment script.,Compiler flags for micro-architectures.,"Clingo does not honor specs in packages.yaml or command line. Rather than failing with an error when a spec can not be met it just changes the spec, even though it was explicitly requested.",Improve clingo policies and error messages.,,,
1/4/2022 16:04:58,Scientist/Researcher,Other Public Research Lab,Brazil,No,"Fortran, C++",Traditional HPC / Simulation,Tutorial,4,No,"0.17, develop","RHEL 7, Ubuntu 18",10 - 100,3.8,Do it!,"spack load, Environment Modules (TCL modules)",spack load,No,No,"AMD, Intel, IBM Power, ARM","NVIDIA Volta, NVIDIA Ampere, NVIDIA Other","gcc, Intel Compilers, Intel OneAPI / dpc++, PGI, NVHPC (new NVIDIA PGI compilers), nvcc (CUDA), IBM XL",Somewhat important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Critical,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,,Maybe,No,"Documentation, spack help",Weekly,Probably not,"Yes, definitely!",Good,Good,Good,Good,,,,,,,
1/5/2022 6:11:32,Research Software Engineer (RSE),"DOE/NNSA Lab (e.g., LLNL/LANL/SNL)",United States,No,"C, C++, Python, sh/bash/other shell script","Traditional HPC / Simulation, Statistics / Data Analysis",Used at my site,2,No,0.16,"macOS, CentOS 7, CentOS 8",1 - 10,3.7,Do it!,Lmod,"Environments, Module generation",No,No,"Intel, ARM",No GPUs,"gcc, Intel Compilers, LLVM",Critical,Somewhat important,Very Important,Not Important,Not Important,Somewhat important,Not Important,Slightly Important,Not Important,Not Important,Not Important,Very Important,Not Important,Not Important,Not Important,,Maybe,Yes,Documentation,Daily,Probably not,Probably not,Bad,Bad,OK,OK,,,,,,,
1/5/2022 8:28:07,Scientist/Researcher,"DOE/Office of Science Lab (e.g., ORNL/ANL/LBL)",United States,Yes,"Fortran, C, C++, Python, sh/bash/other shell script","Traditional HPC / Simulation, Statistics / Data Analysis, AI/ML, Computer Science Research",Presentation,2,Packages,"0.15, 0.16, 0.17, develop","SLES15, openSuSE",200 - 500,3.7,Do it!,Environment Modules (TCL modules),"Environments, Module generation, spack containerize, Externals in packages.yaml, New concretizer (clingo), spack install --reuse",Yes -- several,Yes,"AMD, Intel","NVIDIA Ampere, Intel Xe (Ponte Vecchio)","gcc, Intel OneAPI / dpc++",Critical,Very Important,Very Important,Somewhat important,Very Important,Somewhat important,Slightly Important,Very Important,Not Important,Critical,Very Important,Critical,Critical,Slightly Important,Slightly Important,,Maybe,No,"Documentation, Source Code",Monthly,Probably not,Probably not,OK,OK,Good,Good,Support dev environment without relying in system installed libraries,Create a support dev environment in unfamiliar or limited access systems,Bloating of package installs. Would be better to rebuild existing packages such that a minimum number of needed dependencies are kept. Upgrade Spack from one version to another without breaking local changes to repo.,"Better way to specify dependencies, explicitly.",,,
1/5/2022 9:18:05,Research Software Engineer (RSE),University research group,United States,Yes,"Fortran, C, C++, Python, sh/bash/other shell script","AI/ML, Computer Science Research",Used at my site,3,"Packages, Core Features, Slack Discussions, Issues","0.15, 0.16, 0.17","CentOS 6, CentOS 7, SLES15, Cray XC, Linaro 8.4.0 Raspberry Pi 3",100 - 200,"2.7, 3.6, 3.8, 3.9",Do it!,"All of above, I steal from mods/paths/builds/users/admins and Frankenstein together","Environments, Module generation, Chaining (upstreams), Build caches (binary packages), spack-python (Python scripting), Command Extensions, Python extensions (link python packages into interpreter prefix), spack external find, Externals in packages.yaml, spack ci (generate GitLab Pipelines), New concretizer (clingo), spack develop, spack load",Yes -- several,Yes,"AMD, Intel, IBM Power, ARM, Fujitsu ARM Fugaku","NVIDIA T4, NVIDIA Volta, NVIDIA Ampere, AMD MI100, AMD MI200, No GPUs","gcc, Intel Compilers, Intel OneAPI / dpc++, NVHPC (new NVIDIA PGI compilers), LLVM, AMD ROCmCC / hipcc, nvcc (CUDA), IBM XL, armclang",Critical,Not Important,Not Important,Slightly Important,Not Important,Not Important,Not Important,Slightly Important,Not Important,Not Important,Somewhat important,Not Important,Very Important,Slightly Important,Somewhat important,"Notebook support for in-memory cache of specs/packages/...; no cold-start overhead for each ""spack <command> <options>""","Yes, I'd present something!",Yes,"Documentation, Slack, Coworkers, Source Code",Monthly,No,"Yes, definitely!",Good,Excellent,Good,Good,I develop Spack features/commands for packages/compilers so I have multiple parallel Spack installations each with parallel builds and failures in-flight,Access to latest compilers from vendors and OSS without hassle for licensing/git/...,"""spack command1 opts1"" repeatedly rebuilds Python data upon even slightest error which takes forever for being a developer of core/packages/compiler_support so let me use ipython/notebook for presistent Spack state",Debugging of concretizer and why/when of its decisions,,,
1/5/2022 9:52:02,Computational Scientist,"DOE/NNSA Lab (e.g., LLNL/LANL/SNL)",United States,Yes,"Fortran, C, C++, Python, sh/bash/other shell script",Traditional HPC / Simulation,Used at my site,1,No,develop,"macOS, Arch",10 - 100,"3.8, 3.9, 3.10",Do it!,"spack load, Spack environments, Lmod","Environments, Module generation, Externals in packages.yaml, Concretization preferences in packages.yaml, spack load",Yes -- several,No,"AMD, Intel","NVIDIA Volta, NVIDIA Ampere","gcc, Intel Compilers, Intel OneAPI / dpc++, LLVM, nvcc (CUDA), NAG, CCE (Cray Compilers)",Slightly Important,Not Important,Not Important,Not Important,Very Important,Very Important,Not Important,Very Important,Not Important,Very Important,Very Important,Somewhat important,Somewhat important,Not Important,Not Important,,No,No,"Documentation, Coworkers, GitHub, spack help",Weekly,Probably not,No,Good,Good,OK,OK,I install dependencies on my Mac laptop and Linux workstation.,Spack environments and generating lmod modules really helps with managing multiple environments.,"Building can take a long time, since spack works best when it builds the entire chain of dependencies without much reliance on system packages. Using system packages in packages.yaml has been very hit or miss for me.

I generally run into more issues on my Mac, but I think that's more Mac weirdness than spack specifically. Probably more automated testing of specs on Mac would help this.",,,,
1/5/2022 9:58:21,Software Developer,"DOE/Office of Science Lab (e.g., ORNL/ANL/LBL)",United States,Yes,"C++, Python",Traditional HPC / Simulation,Used at my site,0,No,,RHEL 7,1 - 10,"3.6, 3.7, 3.8",Do it!,"spack load, spack build-env","Environments, Module generation, spack load",,,"AMD, Intel, ARM","NVIDIA Volta, NVIDIA Other, AMD MI100",gcc,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Slightly Important,Slightly Important,Somewhat important,Slightly Important,Somewhat important,Slightly Important,Somewhat important,Somewhat important,Somewhat important,Slightly Important,,"Yes, I'd attend",No,Coworkers,Monthly,Probably not,Probably,Good,Good,Good,Good,,,,,,,
1/5/2022 12:30:44,Scientist/Researcher,"DOE/NNSA Lab (e.g., LLNL/LANL/SNL)",United States,No,"C, C++",Traditional HPC / Simulation,Used at my site,4,Packages,develop,"macOS, RHEL 7",200 - 500,3.7,Do it!,"spack load, Spack environments","Environments, Externals in packages.yaml, New concretizer (clingo), spack load",No,No,"AMD, Intel",No GPUs,"gcc, CCE (Cray Compilers)",Very Important,Not Important,Not Important,Not Important,Not Important,Not Important,Not Important,Very Important,Very Important,Somewhat important,Not Important,Not Important,Somewhat important,Not Important,Not Important,,Maybe,Yes,"Documentation, GitHub",Monthly,Probably,"Yes, definitely!",Good,Excellent,Excellent,Excellent,,,,,,,
1/5/2022 18:20:42,Manager,Other Public Research Lab,United States,No,"Python, R, sh/bash/other shell script","Traditional HPC / Simulation, Statistics / Data Analysis",Tutorial,1,No,0.17,CentOS 7,1 - 10,"3.7, 3.9",Do it!,"spack load, Spack environments, Lmod","Environments, Module generation",Yes -- just one,No,"AMD, Intel","NVIDIA Volta, NVIDIA Ampere, NVIDIA Other","gcc, NVHPC (new NVIDIA PGI compilers), AMD ROCmCC / hipcc, nvcc (CUDA)",Critical,Slightly Important,Not Important,Not Important,Somewhat important,Not Important,Not Important,Not Important,Not Important,Not Important,Not Important,Not Important,Not Important,Not Important,Not Important,Better FAQ + common error details. ,"Yes, I'd attend",Yes,"Documentation, Coworkers, Source Code, giving up :(",Monthly,Probably not,Probably,Good,OK,Good,Good,The goal is to use Spack to build modules for HPC users and to teach users how to build their own Spack packages. ,Referring users to build their own systems. ,"Errors that I can't find any documentation on - for example, while filling out this survey I ran into ""Error: ConnectionResetError: [Errno 104] Connection reset by peer"". Not sure what this means... trying to figure out on my own?  I run into this sort of thing frequently - I assume it's mostly a user error so I don't want to bother by making a ticket or reaching out for support. ",FAQ with error messages.,Not sure,Very new user - thanks for gathering feedback on this. ,
1/5/2022 18:49:48,Software Engineer as well as Administrator,"DOE/Office of Science Lab (e.g., ORNL/ANL/LBL)",United States,Yes,"C++, Python, sh/bash/other shell script","Traditional HPC / Simulation, Statistics / Data Analysis, AI/ML, Computer Science Research, Compiler Testing, Visualization",Search,5,"Packages, Core Features, Slack Discussions, Issues, Tools/integrations",develop,"macOS, RHEL 7, RHEL 8, CentOS 7, CentOS 8, SLES15","> 1,000",3.7,Do it!,"spack load, Spack environments, Lmod, Environment Modules (TCL modules), spack build-env, spack view","Environments, Module generation, Chaining (upstreams), Stacks (matrices in environments), Build caches (binary packages), build-env (debug a build), spack-python (Python scripting), Command Extensions, spack external find, Externals in packages.yaml, Concretization preferences in packages.yaml, Distributed Builds (srun/mpirun spack install), New concretizer (clingo), spack develop, spack load",Yes -- just one,My site has a front-end or extension to Spack,"AMD, Intel, IBM Power, ARM","NVIDIA Volta, NVIDIA Ampere, AMD MI100, AMD MI200, Intel Xe (Ponte Vecchio)","gcc, Intel Compilers, Intel OneAPI / dpc++, NVHPC (new NVIDIA PGI compilers), LLVM, AMD ROCmCC / hipcc, nvcc (CUDA)",Somewhat important,Somewhat important,Somewhat important,Slightly Important,Slightly Important,Slightly Important,Slightly Important,Not Important,Slightly Important,Slightly Important,Not Important,Slightly Important,Very Important,Slightly Important,Very Important,,"Yes, I'd present something!",No,"Documentation, Slack, GitHub, Source Code",Weekly,Probably not,Probably not,Good,Good,Good,Good,"I use Spack for a development of a large software stack, as well as running nightly tests for our software using Spack, and I also administer large sets of software with modules on numerous machines.",Spack develop has been the feature I have been most focused on the past year.,"~/.spack was my biggest pain point, but that is mostly becoming solved it seems. Several Spack installations I had would clash through it.",I would like git hashes as installable versions for development and testing to get some more attention.,No,,
1/5/2022 22:24:14,Software Developer,"DOE/NNSA Lab (e.g., LLNL/LANL/SNL)",United States,Yes,"C++, Python",Traditional HPC / Simulation,Used at my site,5,"Packages, Issues","develop, Locked down SHA we move forward when vetted","macOS, RHEL 7, Ubuntu 20","> 1,000","3.7, 3.8",Do it!,use direct paths,"Environments, Python extensions (link python packages into interpreter prefix), Externals in packages.yaml, Concretization preferences in packages.yaml, New concretizer (clingo)",Yes -- several,Yes,"Intel, IBM Power",NVIDIA Volta,"gcc, Intel Compilers, Intel OneAPI / dpc++, LLVM, nvcc (CUDA), IBM XL, CCE (Cray Compilers)",Critical,Somewhat important,Very Important,Not Important,Somewhat important,Somewhat important,Not Important,Very Important,Slightly Important,Critical,Somewhat important,Very Important,Very Important,Not Important,Critical,,"Yes, I'd attend",Yes,"Documentation, Coworkers",Monthly,No,No,Bad,OK,Good,OK,locked down spack sha to install consistent set of third-party libraries for software project,multiple teams maintaining their packages so hopefully problems are solved before i get to them,using alternate git commit's that are not the normal release versions for a package causes me to copy whole package files locally and add the git version,"Improving error messages, ""Error: Debug"" is completely unhelpful (this particular turned out I set a variant of a package that didn't have that variant)",yes but I'm in the process of adding it now.,please improve documentation searching. often the answers that i am looking for are there but your search is basically useless due to your API docs being in the same place as your user documentation,
1/6/2022 2:16:03,Scientist/Researcher,Other Public Research Lab,Switzerland,No,"C++, Python",High Energy Physics,Used at my site,2,"Packages, Core Features, Documentation, Slack Discussions, GitHub Discussions, Issues",develop,"CentOS 7, Ubuntu 20, Arch","> 1,000","2.7, 3.10",I'd live (I can provide Python 3 somehow),Custom script or env vars,"Environments, Chaining (upstreams), Stacks (matrices in environments), Build caches (binary packages), build-env (debug a build), spack-python (Python scripting), spack external find, Externals in packages.yaml, spack ci (generate GitLab Pipelines), New concretizer (clingo), spack develop, spack install --reuse, spack test, spack load",Yes -- several,Yes,"AMD, Intel, ARM","NVIDIA T4, No GPUs","gcc, LLVM",Critical,Critical,Slightly Important,Slightly Important,Slightly Important,Very Important,Not Important,Slightly Important,Not Important,Very Important,Very Important,Critical,Somewhat important,Very Important,Very Important,,"Yes, I'd present something!",Yes,"Documentation, Slack, GitHub, Source Code",Weekly,Probably not,"Yes, definitely!",Good,Good,Good,Good,Deploying and developing High Energy Physics Software ,New Concretizer,"Unhelpful error messages of the new concretizer.
Installing package@master should record git commit hash
Installing package@git-commit-hash should let me specify a spec version the recipe uses to figure out dependencies etc.
Creation of setup scripts for packages.",Unhelpful error messages of the new concretizer.,,Thanks to all the spack developers - it's always been a great experience to work with spack!,
1/6/2022 4:45:31,User Support Staff,Cloud Provider,Germany,No,"Fortran, C, Python, sh/bash/other shell script",Traditional HPC / Simulation,Word of mouth,1,Issues,develop,Amazon Linux,100 - 200,2.7,Do it!,"spack load, Environment Modules (TCL modules)","Stacks (matrices in environments), Build caches (binary packages), spack external find, Externals in packages.yaml, Concretization preferences in packages.yaml, New concretizer (clingo), spack load",No,Yes,"AMD, Intel, ARM","NVIDIA T4, NVIDIA Ampere","gcc, Intel Compilers, Intel OneAPI / dpc++, NVHPC (new NVIDIA PGI compilers), LLVM, nvcc (CUDA)",Somewhat important,Very Important,Critical,Critical,Slightly Important,Somewhat important,Somewhat important,Somewhat important,Not Important,Slightly Important,Not Important,Very Important,Slightly Important,Not Important,Somewhat important,,"Yes, I'd attend",Yes,"Documentation, Coworkers, GitHub, Source Code",Weekly,Probably,Probably,Good,Good,Good,Good,"I want to find the best set of compilers/providers/dependencies for a range of applications on a range of different processors and store these as text based best practices.
","The matrix feature, s3 binary cache and wide range of available packages.","I use the matrix feature inside environments (which works great), but then the `spack unload` command leaves residual environment variables which in some cases breaks the subsequent `spack load`. (https://github.com/spack/spack/issues/27053)

I am trying to use `packages.yaml` to store the best practices. I am not yet sucessful as individual provider declarations per package inside `packages.yaml` are not always respected. (https://github.com/spack/spack/issues/27055)",,,Nice work!,
1/6/2022 7:12:24,Research Software Engineer (RSE),"DOE/NNSA Lab (e.g., LLNL/LANL/SNL)",United States,No,"C++, Python",Traditional HPC / Simulation,Used at my site,2,No,"0.16, 0.17","macOS, RHEL 7, CentOS 7, CentOS 8",200 - 500,"3.6, 3.7, 3.8",Do it!,Environment Modules (TCL modules),"Module generation, Build caches (binary packages), spack external find, Externals in packages.yaml, spack load",Yes -- just one,No,"AMD, Intel, IBM Power, ARM","NVIDIA Volta, NVIDIA Ampere, AMD MI200, AMD Other","gcc, Intel Compilers, LLVM, AMD ROCmCC / hipcc, nvcc (CUDA), CCE (Cray Compilers)",Very Important,Somewhat important,Somewhat important,Not Important,Not Important,Not Important,Not Important,Somewhat important,Not Important,Very Important,Somewhat important,Slightly Important,Somewhat important,Not Important,Not Important,,No,No,"Documentation, Slack, Coworkers",Yearly,No,No,OK,Good,Good,OK,"Install package dependencies for developer use and install software on HPC machines for customer use.  This involves packages.yaml and compilers.yaml for each machine, pulling in source from mirrors and building on each machine (~6 machines).  We use a python script tuned for each machine to do our deployments as some machines require different dependency versions or +cuda, etc.","Building large dependency trees on new systems.  I was able to build our codes on Sierra without having to know how to build HDF5 or boost static libraries!  I was also able to build MPI on my mac laptop.  So, thank you.","I have not made an issue for this. The situation is generally this:  A build fails due to an issue in a package or a system-provided dependency (e.g. boost fails to build).  Clearing the spack cache 'spack clean -a' and changing the dependency versions or changing the spack package.py or something similar results in the same build failure.  Cloning a clean spack repo and doing a spack install of the same package in the clean repo succeeds.  I haven't made an issue for this because I don't know how to come up with a MWE for this issue and I have a work-around, but that's why spack is only ""OK"" - it's great when it works but when it doesn't... delete everything and try again.  ","Fix the pain point.  Then spack goes from ""OK"" to ""good""",No,"While spack is sometimes painful it's still a great tool, so thank you for your hard work!",
1/6/2022 7:13:39,Computational Scientist,Company,United States,Yes,"Fortran, C++",Traditional HPC / Simulation,Used at my site,1,No,develop,"RHEL 8, CentOS 8, Cray EX, Cray XT",10 - 100,3.7,I'd live (I can provide Python 3 somehow),"spack load, Environment Modules (TCL modules), Custom script or env vars","Module generation, spack external find, Externals in packages.yaml, New concretizer (clingo), spack install --reuse, spack load",Yes -- just one,Yes,AMD,"AMD MI200, AMD Other","gcc, Intel Compilers, AMD ROCmCC / hipcc, CCE (Cray Compilers)",Very Important,Very Important,Slightly Important,Very Important,Somewhat important,Slightly Important,Not Important,Somewhat important,Not Important,Very Important,Critical,Very Important,Critical,Slightly Important,Not Important,,Maybe,Yes,Coworkers,Yearly,Probably not,Probably not,Excellent,Good,OK,Good,,Ensuring consistent reproducible installs of dependencies across platforms.,,,,,
1/6/2022 8:25:26,Software Developer,"DOE/NNSA Lab (e.g., LLNL/LANL/SNL)",United States,No,"Fortran, C, C++, Python",Traditional HPC / Simulation,Word of mouth,3,No,0.16,"macOS, RHEL 7, RHEL 8, Ubuntu 20","> 1,000",2.7,Do it!,Environment Modules (TCL modules),"Environments, Module generation",Yes -- several,Yes,"AMD, Intel, IBM Power",NVIDIA T4,"gcc, Intel Compilers, Intel OneAPI / dpc++, nvcc (CUDA)",Very Important,Very Important,Very Important,Critical,Somewhat important,Slightly Important,Not Important,Slightly Important,Critical,Critical,Critical,Critical,Somewhat important,Very Important,Slightly Important,Better use of existing system dependencies.  Adding the compiler into the spack environment/ module generation.,Maybe,Yes,"Slack, Coworkers",Monthly,Probably,Probably,Good,Good,OK,Good,Building a developer environment.,"Environment building is fast, but when failures occur, it's a nightmare.",Usage of preinstalled system dependencies.,Usage of preinstalled system dependencies.  Usage of binary packages.,,,
1/6/2022 9:53:08,Scientist/Researcher,"DOE/NNSA Lab (e.g., LLNL/LANL/SNL)",United States,Yes,"C, C++, Python","Traditional HPC / Simulation, Computer Science Research",Used at my site,5,Packages,develop,"macOS, RHEL 7, openSuSE, Windows Subsystem for Linux (WSL)",10 - 100,"3.6, 3.7, 3.9",Do it!,"spack load, Spack environments","Environments, spack external find, Externals in packages.yaml, New concretizer (clingo), spack install --reuse, spack load",No,No,"AMD, Intel, IBM Power","NVIDIA Volta, NVIDIA Ampere, AMD MI100, AMD MI200","gcc, LLVM, AMD ROCmCC / hipcc, nvcc (CUDA), IBM XL, CCE (Cray Compilers)",Very Important,Somewhat important,Somewhat important,Slightly Important,Slightly Important,Very Important,Slightly Important,Somewhat important,Not Important,Very Important,Very Important,Somewhat important,Very Important,Somewhat important,Somewhat important,,Maybe,Yes,"Documentation, Slack, GitHub",Monthly,Probably,Probably,Good,Good,OK,Good,"I use spack to install/manage dependencies for my software projects (using environments, ""spack external find"", etc.). I also use it as a macOS package manager for OSS tools, in lieu of homebrew and the like (using ""spack load""). I also create and maintain spack packages for my projects.","Learned about environments, they're neat. The tutorial on environments was very helpful in that regard.",(Lack of) speed; occasional weird Python hiccups (mostly not really Spack's fault). ,"Speed; useful error messages. Also, the PR approval process on github - it sometimes takes days or weeks to get a PR for a package update in.",,,
1/7/2022 2:32:14,User Support Staff,University HPC/Computing Center,Germany,No,"Fortran, C, C++, Python, sh/bash/other shell script","Traditional HPC / Simulation, Statistics / Data Analysis, AI/ML, Visualization",Tutorial,4,"Packages, Slack Discussions, Issues","0.16, 0.17, develop","SLES12, SLES15","500-1,000",3.9,Do it!,"Environment Modules (TCL modules), spack view","Environments, Module generation, Chaining (upstreams), Stacks (matrices in environments), Externals in packages.yaml, Concretization preferences in packages.yaml, New concretizer (clingo), spack develop",Yes -- several,Yes,"AMD, Intel, ARM","NVIDIA Ampere, NVIDIA Other, AMD MI200, AMD Other, Intel Xe (Ponte Vecchio)","gcc, Intel Compilers, Intel OneAPI / dpc++, PGI, NVHPC (new NVIDIA PGI compilers), LLVM, AMD ROCmCC / hipcc, nvcc (CUDA), NAG",Very Important,Very Important,Very Important,Not Important,Somewhat important,Very Important,Somewhat important,Very Important,Not Important,Not Important,Slightly Important,Very Important,Very Important,Somewhat important,Somewhat important,,"Yes, I'd attend",Yes,"Documentation, Slack, Coworkers, GitHub, Source Code",Monthly,Probably not,Probably,Good,Excellent,OK,Good,"We biannually release a software stack based on released spack versions for our 20PF machine and the smaller Linux cluster sections. The stack is build consistently with default compiler and MPI versions. Users access the stack with environment modules, which provide site and cluster local adaptions. A ""user spack"" can be loaded that chains default software stacks. It is used for user specific modifications that can be installed in the users HOME directories.  ",spack debug,"With each spack version we have to iterate through failing packages and apply fixes for our local setup (OS is SLES15) or for general bugs. We typically have 20-50 failing packages and bugs are from trivial to stuff really hidden deep down. Although it is great to have that many packages, I think it would be good to put more focus on the maintenance of packages and maybe also package bug-fixing within the spack releases.","Versioning and backwards compatibility for package files, eg. package is compatible with spack 0.17 and can be used unmodified by later versions of spack. But I guess, that will take more than one year.",,Great job in software development and community building!,
1/7/2022 8:04:02,Computational Scientist,"DOE/Office of Science Lab (e.g., ORNL/ANL/LBL)",United States,No,"C++, Python, sh/bash/other shell script","Traditional HPC / Simulation, Statistics / Data Analysis, AI/ML, High Energy Physics",Presentation,4,"Packages, Core Features, Documentation, Slack Discussions, GitHub Discussions, Issues, Mailing List","0.17, develop","RHEL 6, RHEL 7, RHEL 8, CentOS 7, CentOS 8, Ubuntu 20, Windows Subsystem for Linux (WSL), Cray XC",100 - 200,"2.7, 3.6, 3.9",Do it!,"spack load, Spack environments, Environment Modules (TCL modules), Containers","Environments, Module generation, spack containerize, spack external find, Externals in packages.yaml, Concretization preferences in packages.yaml, New concretizer (clingo)",Yes -- just one,No,"AMD, Intel",NVIDIA Ampere,"gcc, NVHPC (new NVIDIA PGI compilers), LLVM, nvcc (CUDA)",Critical,Critical,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Slightly Important,Slightly Important,Slightly Important,Slightly Important,Somewhat important,Slightly Important,Slightly Important,,Maybe,Yes,"Documentation, Slack, GitHub, Source Code",Monthly,Probably,"Yes, definitely!",Excellent,Good,Good,Excellent,,,,,,,
1/7/2022 8:12:02,Research Software Engineer (RSE),Company,United States,No,Python,"Traditional HPC / Simulation, Statistics / Data Analysis, Visualization",Word of mouth,0,"No, Slack Discussions",0.17,"Ubuntu 18, Ubuntu 20",1 - 10,"3.7, 3.8, 3.9",Do it!,"Spack environments, Containers","Environments, spack containerize, Build caches (binary packages), Python extensions (link python packages into interpreter prefix), Externals in packages.yaml, spack ci (generate GitLab Pipelines), New concretizer (clingo), spack load",Yes -- several,No,"AMD, Intel","NVIDIA Volta, NVIDIA Ampere","gcc, LLVM, AMD ROCmCC / hipcc, nvcc (CUDA)",Slightly Important,Somewhat important,Slightly Important,Very Important,Slightly Important,Slightly Important,Not Important,Slightly Important,Somewhat important,Slightly Important,Very Important,Very Important,Very Important,Not Important,Somewhat important,,"Yes, I'd attend",Yes,"Documentation, Slack",Daily,Probably,Probably,Excellent,OK,OK,Good,"Developer environments on linux and mac. Building HPC packages. Containerization of complex compiled dependencies for both CI testing and production (Docker, Singularity, and maybe Sarus etc.)","- Providing a simple uniform interface for compiling up to date software that is minimally dependent on the host system.
- Simple configuration (via the build flags) of complex builds.
- Parity between installations on HPC, developer PCs, and cloud. ",Containerization has been difficult. The containerize command does not generate immediately usable results. I would prefer to instead just have more extensive documentation on how to write Dockerfiles etc. rather than that knowledge only be encoded in the `containerize` function.,,,,
1/7/2022 8:14:36,Research Software Engineer (RSE),"DOE/NNSA Lab (e.g., LLNL/LANL/SNL)",United States,Yes,sh/bash/other shell script,Traditional HPC / Simulation,Word of mouth,5,"Slack Discussions, GitHub Discussions, Issues",0.17,RHEL 7,10 - 100,3.7,I'd live (I can provide Python 3 somehow),Containers,"Environments, Build caches (binary packages), spack develop, spack test",No,No,"AMD, Intel","NVIDIA Volta, NVIDIA Other","gcc, Intel Compilers, AMD ROCmCC / hipcc, nvcc (CUDA)",Very Important,Somewhat important,Somewhat important,Somewhat important,Very Important,Slightly Important,Not Important,Very Important,Very Important,Very Important,Slightly Important,Very Important,Very Important,Somewhat important,Critical,,Maybe,Yes,"Documentation, Slack, Coworkers",Monthly,Probably not,Probably not,Good,Excellent,OK,Good,Use Spack to provide installed versions of software for a group of people. Want to extend to supporting environment files people can start with to build their own. ,,"Developers don’t know how to build the software they are developing through Spack, but users want that. Currently use to build only dependencies of their software. Perception is that Spack does not support a development workflow. ","Improve support for concepts like the xSDK meta package. Decisions are made here,  but we really don’t want people to express dependencies on it, but rather the underlying packages. ",,,
1/7/2022 8:17:11,Data Scientist,University research group,United States,No,"Python, R","Traditional HPC / Simulation, Bioinformatics",Search,0,No,0.17,Ubuntu 20,10 - 100,3.1,I'd live (I can provide Python 3 somehow),Lmod,"Module generation, New concretizer (clingo)",Yes -- just one,No,Intel,AMD MI200,"gcc, Intel Compilers, Intel OneAPI / dpc++",Somewhat important,Somewhat important,Somewhat important,Very Important,Somewhat important,Slightly Important,Not Important,Slightly Important,Not Important,Very Important,Somewhat important,Slightly Important,Slightly Important,Not Important,Not Important,A really good tutorial that is easy to find that takes you through some advanced stuff and an obvious way to introduce your own packages. Currently mine sit in the main space package area,Maybe,Yes,"Documentation, Slack, spack help",Weekly,No,Probably,OK,Good,Good,Good,It’s used to keep multiple versions of software running in parallel for one user. ,I set up my own server with lmod real fast,When using build optimizations (like Python) it causes Python to get rebuilt when I install something that depends on Python since the spec has a difference in optimization ,,"I have one for Cell Ranger by 10x, I haven’t done a PR because I don’t know if it would fit. Let me know",,
1/7/2022 8:35:24,Software Developer,Company,United States,Yes,"C++, Python","Traditional HPC / Simulation, Visualization",Used at my site,4,"Packages, Core Features, Documentation, Slack Discussions, GitHub Discussions, Issues, Tools/integrations",develop,"RHEL 7, RHEL 8, CentOS 7, CentOS 8, Ubuntu 18, Ubuntu 20, SLES15, openSuSE, Fedora, Cray XC",10 - 100,"3.6, 3.7, 3.8, 3.9",Do it!,"spack load, Lmod, Environment Modules (TCL modules), Containers","Environments, Module generation, Chaining (upstreams), Stacks (matrices in environments), Build caches (binary packages), build-env (debug a build), Python extensions (link python packages into interpreter prefix), Externals in packages.yaml, Concretization preferences in packages.yaml, spack ci (generate GitLab Pipelines), New concretizer (clingo), spack develop, spack load",No,No,"AMD, Intel, IBM Power, ARM","NVIDIA T4, NVIDIA Volta, NVIDIA Ampere, NVIDIA Other, AMD MI100, AMD MI200, AMD Other, Intel Xe (Ponte Vecchio)","gcc, Intel Compilers, Intel OneAPI / dpc++, NVHPC (new NVIDIA PGI compilers), LLVM, AMD ROCmCC / hipcc, nvcc (CUDA), IBM XL, CCE (Cray Compilers), Fujitsu Compilers, armclang",Critical,Very Important,Critical,Slightly Important,Critical,Slightly Important,Not Important,Somewhat important,Slightly Important,Slightly Important,Slightly Important,Critical,Critical,Critical,Critical,A way to propagate common variant values through the entire dag,"Yes, I'd present something!",Yes,"Documentation, Slack, GitHub, Source Code",Weekly,No,Probably,Good,Good,Bad,Good,,,"Spack allows for so much flexibility that different packages often solve the same problem different ways based on developer or reviewer preference, mostly unnecessarily.  Established best practices and packaging guidelines would help create consistency with deviations needing to be justified.",Significantly simplify chaining to allow users to easily use their own spack trees to extend a system wide spack installation.,,,
1/7/2022 9:10:46,Computational Scientist,"DOE/NNSA Lab (e.g., LLNL/LANL/SNL)",United States,Yes,"Fortran, C, C++","Traditional HPC / Simulation, Computer Science Research",Presentation,5,Packages,develop,"macOS, RHEL 7, CentOS 8, Ubuntu 20",10 - 100,"2.7, 3.7, 3.8, 3.9",I'd live (I can provide Python 3 somehow),spack load,"Externals in packages.yaml, Concretization preferences in packages.yaml, spack load",Yes -- several,No,"AMD, Intel, IBM Power, ARM","NVIDIA Volta, NVIDIA Ampere, AMD MI100, AMD MI200, Intel Xe (Ponte Vecchio)","gcc, Intel Compilers, Intel OneAPI / dpc++, PGI, NVHPC (new NVIDIA PGI compilers)",Somewhat important,Somewhat important,Slightly Important,Slightly Important,Very Important,Very Important,Not Important,Somewhat important,Not Important,Very Important,Very Important,Somewhat important,Somewhat important,Not Important,Not Important,,Maybe,Yes,"Documentation, Slack",Weekly,Probably not,Probably not,Good,Excellent,Good,Good,,,Time it takes to do a spack build. It can take an hour and then fail. So then I have to try something else and it fails again. So more robust and faster package builds would be helpful.,,,,
1/7/2022 9:19:08,Scientist/Researcher,University research group,United States,Yes,"C, C++, Python, sh/bash/other shell script, Java",Computer Science Research,Used at my site,5,"Packages, Slack Discussions, GitHub Discussions, Issues",develop,"RHEL 7, RHEL 8, CentOS 7, CentOS 8, Ubuntu 20, openSuSE, Windows Subsystem for Linux (WSL), Cray XC, Cray EX, Cray XT","500-1,000","2.7, 3.7, 3.8",Do it!,"spack load, Spack environments, Lmod, Environment Modules (TCL modules), Containers","Environments, spack containerize, Stacks (matrices in environments), Build caches (binary packages), spack external find, Externals in packages.yaml, New concretizer (clingo), spack test, spack load",No,No,"AMD, Intel, IBM Power, ARM","NVIDIA T4, NVIDIA Volta, NVIDIA Ampere, NVIDIA Other, AMD MI100, AMD MI200, AMD Other, Intel Xe (Ponte Vecchio)","gcc, Intel Compilers, Intel OneAPI / dpc++, NVHPC (new NVIDIA PGI compilers), LLVM, AMD ROCmCC / hipcc, nvcc (CUDA), IBM XL, CCE (Cray Compilers)",Somewhat important,Very Important,Slightly Important,Somewhat important,Slightly Important,Somewhat important,Very Important,Somewhat important,Slightly Important,Very Important,Somewhat important,Somewhat important,Critical,Somewhat important,Slightly Important,,"Yes, I'd attend",Yes,"Documentation, Slack, GitHub, spack help, Source Code",Monthly,Probably not,Probably not,Good,Excellent,Good,Excellent,Testing lots of packages in a variety of environments.,I can get real work done while Spack handles builds in the background.,The use of .spack in the home directory breaks things for us often. Please turn this off by default or provide an easy and persistent wany for us to do so.,Better/automatic management of gpu compilers and facility provided externals,,,
1/7/2022 9:22:26,Software Developer,University research group,United States,Yes,"C, C++, sh/bash/other shell script",Traditional HPC / Simulation,Word of mouth,4,Packages,develop,"RHEL 7, RHEL 8, CentOS 7, CentOS 8, SLES15, Fedora",10 - 100,3.6,I'd live (I can provide Python 3 somehow),"spack load, Lmod, Environment Modules (TCL modules)","Module generation, build-env (debug a build), spack external find, Externals in packages.yaml, Concretization preferences in packages.yaml, New concretizer (clingo), spack load",No,No,"AMD, Intel, IBM Power, ARM","NVIDIA T4, NVIDIA Volta, AMD MI100, AMD MI200, Intel Xe (Ponte Vecchio)","gcc, Intel OneAPI / dpc++, LLVM, AMD ROCmCC / hipcc, nvcc (CUDA)",Very Important,Slightly Important,Very Important,Slightly Important,Somewhat important,Somewhat important,Slightly Important,Very Important,Not Important,Somewhat important,Somewhat important,Slightly Important,Very Important,Somewhat important,Somewhat important,better explanation when clingo fails to concretize,"Yes, I'd attend",Yes,"Documentation, Slack, GitHub, Source Code",Weekly,Probably,Probably not,Good,Excellent,Good,Good,use spack to build prereqs for my app,support on slack is excellent,"1. random strange failures from users when it works Ok for me
2. clingo fails to concretize with no explanation of why",improve explanation when clingo fails,,,
1/7/2022 10:17:15,User Support Staff,University HPC/Computing Center,United States,No,"Python, sh/bash/other shell script, Lua","Traditional HPC / Simulation, Statistics / Data Analysis, AI/ML, Bioinformatics, Visualization",Presentation,0,"Slack Discussions, GitHub Discussions, Issues","0.17, develop","CentOS 7, Ubuntu 20","500-1,000","3.8, 3.9",Do it!,"spack load, Spack environments, Lmod, Containers","Environments, Module generation, Stacks (matrices in environments), Concretization preferences in packages.yaml, New concretizer (clingo)",No,No,"AMD, Intel","NVIDIA Volta, NVIDIA Ampere","gcc, Intel Compilers, Intel OneAPI / dpc++",Very Important,Critical,Somewhat important,Somewhat important,Somewhat important,Somewhat important,Not Important,Very Important,Not Important,Somewhat important,Not Important,Critical,Somewhat important,Slightly Important,Slightly Important,,"Yes, I'd present something!",Yes,"Documentation, Slack, GitHub",Daily,Probably,Probably,Good,Good,Good,Excellent,"Currently, trying to build a great big, multi-platform, multi-compiler, multi-MPI SW stack. Basically a NetCDF stack for (AMD, Skylake, x86_64) x  (gcc, intel) x (mpich, openmppi).","General concept. There are still lots of bugs, but it is a promising platform to build a comprehensive SW stack.","Buggy compiling. Compilers are a problem; it would be nice if compilers were not so distinct from ""packages."" The (apparent?) distinction between the gcc package and gcc compilers makes it difficult to write a reproducible environment or push-button (to install) stack. Basically, I feel that if I do `spack install gcc@11.2.0` I should be able to immediately do `spack install [something] %gcc@11.2.0` I think ""config: install_missing_compilers: true"" is supposed to do this (???) but it does not always work. ",clean up the compilers-package bit.,,"Generally, I love what you're doing. As I come to better understand how all of this works, I hope to start making contributions. Thanks for your work!",
1/7/2022 10:31:20,Manager,University HPC/Computing Center,United States,No,"Fortran, C, C++, Python","Traditional HPC / Simulation, Computer Science Research, Bioinformatics, High Energy Physics, Compiler Testing",Word of mouth,2,"GitHub Discussions, Issues","0.16, 0.17",CentOS 8,10 - 100,"3.7, 3.8, 3.9",Do it!,"Lmod, Containers","Module generation, Chaining (upstreams), Externals in packages.yaml, Concretization preferences in packages.yaml, Distributed Builds (srun/mpirun spack install), New concretizer (clingo)",Yes -- several,No,"AMD, Intel","NVIDIA Volta, NVIDIA Ampere, AMD MI200","gcc, Intel Compilers, Intel OneAPI / dpc++, NVHPC (new NVIDIA PGI compilers), AMD ROCmCC / hipcc, nvcc (CUDA)",Somewhat important,Critical,Very Important,Not Important,Very Important,Somewhat important,Slightly Important,Somewhat important,Not Important,Slightly Important,Somewhat important,Somewhat important,Very Important,Somewhat important,Somewhat important,,"Yes, I'd attend",Yes,"Documentation, Mailing List, Coworkers, GitHub, Source Code",Monthly,Probably not,Probably,Good,OK,Bad,Good,Build packages for loading by LMod,Improvements in reliability of available packages ,Inability to migrate versions of Spack without totally rebuilding everything ,"Make migration of versions more seamless (e.g., create a “spack update” for both the infrastucture and built versions.)",,,
1/7/2022 11:37:49,Scientist/Researcher,University research group,United States,No,"Python, Julia, sh/bash/other shell script",Traditional HPC / Simulation,Word of mouth,0,No,0.16,"macOS, CentOS 7, openSuSE",10 - 100,3.6,Do it!,"spack load, Spack environments","Environments, Module generation, Chaining (upstreams), Stacks (matrices in environments), build-env (debug a build), spack load",Yes -- just one,No,"AMD, Intel","NVIDIA T4, NVIDIA Other","gcc, Intel Compilers, NVHPC (new NVIDIA PGI compilers)",Somewhat important,Somewhat important,Slightly Important,Slightly Important,Slightly Important,Slightly Important,Slightly Important,Somewhat important,Not Important,Somewhat important,Very Important,Slightly Important,Very Important,Slightly Important,Slightly Important,"Better support for multi-user installs (), Fix symlinked directories: (https://github.com/spack/spack/issues/19531#issuecomment-792290335)",Maybe,Yes,Documentation,Weekly,Probably not,Probably,OK,Good,Good,Excellent,"We use spack to allow allow users to manage their own software installs, as well as, provide a base set of software that the can use or build against","Ease of installing software, environments",File locks in a multi-user environment with a single spack binary,Support for multi-user setup: https://github.com/spack/spack/pull/11871,"Better support for Julia and Julia packages like CUDA, MPI, libblastrampoline that link against installed software","Spack is truly amazing, thank you for all the hard work!!",
1/7/2022 11:59:20,Software Developer,"DOE/NNSA Lab (e.g., LLNL/LANL/SNL)",United States,Yes,"C, C++, Python, Lua","Traditional HPC / Simulation, High Energy Physics",Used at my site,3,Packages,"0.17, develop","macOS, RHEL 7",10 - 100,"3.7, 3.8, 3.9",Do it!,Spack environments,"Environments, Build caches (binary packages), spack external find, Externals in packages.yaml, Concretization preferences in packages.yaml, Distributed Builds (srun/mpirun spack install), New concretizer (clingo), spack develop",Yes -- several,No,"AMD, Intel, IBM Power, ARM","NVIDIA Volta, AMD MI200","gcc, Intel Compilers, LLVM, AMD ROCmCC / hipcc, nvcc (CUDA), IBM XL, CCE (Cray Compilers)",Somewhat important,Not Important,Not Important,Not Important,Slightly Important,Slightly Important,Not Important,Very Important,Not Important,Somewhat important,Very Important,Somewhat important,Very Important,Not Important,Not Important,,Maybe,No,"Documentation, Coworkers",Monthly,Probably,Probably,Excellent,Excellent,Good,Excellent,,,,,,,
1/7/2022 12:17:11,"SE, managing RSEs",Private Research Lab,United States,No,"C++, Python, sh/bash/other shell script, Java","Traditional HPC / Simulation, AI/ML, Computer Science Research, Web applications, Compiler Testing, Visualization",Used at my site,1,"Slack Discussions, Issues, suggested bugfix","0.16, 0.17, develop, custom fork","macOS, Ubuntu 18, Ubuntu 20, Linux flavors of all kinds",10 - 100,"3.6, 3.7, 3.8, 3.9",Do it!,"spack load, Lmod","Module generation, Chaining (upstreams), Build caches (binary packages), Externals in packages.yaml, Concretization preferences in packages.yaml, New concretizer (clingo), spack install --reuse, spack load, spack spec",Yes -- several,No,"AMD, Intel, IBM Power","NVIDIA Volta, AMD MI100","gcc, AMD ROCmCC / hipcc",Very Important,Slightly Important,Slightly Important,Very Important,Somewhat important,Not Important,Not Important,Somewhat important,Not Important,Somewhat important,Somewhat important,Slightly Important,Slightly Important,Slightly Important,Slightly Important,package specs distributed and versioned separately from spack itself ,"Yes, I'd attend",Yes,"Documentation, Slack, Coworkers, Source Code",Monthly,Probably,Probably,OK,OK,OK,Good,"Trying to maintain the readiness of research software on various national lab machines, and our own hosts.  At the moment that's just one CFD app, but trying to get to M apps on N platforms.  Biggest impediment is non-technical - can't seem to drive Spack adoption by the CFD app owners.  And since Spack would potentially use different versions of libs, different compiler switches, etc. and since those differences might impact results, having an RSE use Spack after the fact is an untenable position for a support RSE to be in, and thus we had to walk away from Spack, for these non-technical reasons.  ","Being able to install the vast array of dependencies my app depends upon.  Prior to Spack there would be much downloading and cmaking before being able to say ""make my app"".  With spack bin reuse I hope that eventually gets even easier, but unfortunately our app also needs to mature to use more recent dependent libs in order to take advantage.  Being able to use Spack to try different compilers, different implementations of mpi, alternate versions of packages simply by specifying the proper ^ and @ syntax... awesome.  ","As Spack comes from the national labs, and since its widely quoted among the ECP software projects as one which might actually live on beyond the ECP itself, why is it not more central to the installations on for example Summit (I have to git clone Spack on Summit?), or Perlmutter (why was Spack not one of the first things installed and working... when I first tried Spack on Perlmutter the Spack software didn't recognize the Perlmutter architecture and resulted in immediate bugfix.)  When the labs aren't seen as getting behind the Spack software project, why then should others adopt?  Makes the internal discussion / argument even more challenging...","Make it an integral part of the national lab computing experience, widely communicated beyond DevOps heads like me direct to the scientists-cum-programmer.  ","Yeah, can you get the CGNS people to support a library from 10 years ago so my lazy programmers don't have to update?  8-)","Spack is great, but its value proposition isn't well understood by folks who aren't hands on with it.  How do I explain for example to the CTO who asks ""isn't this just another package manager?""  Is it ""not just for HPC anymore""?  What would integration with some of those other package managers look like?",
1/7/2022 12:55:45,DevOps/SRE,University HPC/Computing Center,United States,No,"C, Python, Perl","Traditional HPC / Simulation, Statistics / Data Analysis, AI/ML, Computer Science Research, Bioinformatics",Word of mouth,3,"Packages, Core Features, Issues","develop, custom fork","RHEL 7, RHEL 8, CentOS 7, CentOS 8",100 - 200,3.6,Do it!,"spack load, Spack environments","Environments, Module generation, build-env (debug a build), spack-python (Python scripting), Concretization preferences in packages.yaml, Distributed Builds (srun/mpirun spack install), New concretizer (clingo), spack install --reuse, spack test, spack load, spack diff (compare two specs)",Yes -- several,Yes,"AMD, Intel","NVIDIA Volta, NVIDIA Ampere","gcc, Intel Compilers, PGI, NVHPC (new NVIDIA PGI compilers), LLVM, nvcc (CUDA)",Somewhat important,Critical,Critical,Somewhat important,Very Important,Somewhat important,Somewhat important,Somewhat important,Slightly Important,Slightly Important,Very Important,Somewhat important,Somewhat important,Slightly Important,Slightly Important,,"Yes, I'd attend",No,"Documentation, Slack, Mailing List, Coworkers, GitHub, Source Code",Monthly,Probably not,"Yes, definitely!",Good,Excellent,Good,Good,typical installation and troubleshooting of whatever software packages our researchers tell us to.,"general dependency wrangling, most important is the ability to support multiple installs of different variants/versions of the same software.",,,,,
1/7/2022 13:52:11,Computational Scientist,University research group,United States,Yes,C++,math libraries,Tutorial,2,"Packages, GitHub Discussions",0.16,CentOS 7,1 - 10,"3.8, 3.9",Do it!,Environment Modules (TCL modules),Chaining (upstreams),Yes -- several,No,"AMD, Intel, IBM Power, ARM","NVIDIA Volta, NVIDIA Ampere, AMD MI100, AMD MI200, Intel Xe (Ponte Vecchio)","gcc, Intel Compilers, Intel OneAPI / dpc++, LLVM, AMD ROCmCC / hipcc, nvcc (CUDA), CCE (Cray Compilers), Fujitsu Compilers",Not Important,Not Important,Not Important,Not Important,Not Important,Somewhat important,Not Important,Not Important,Not Important,Not Important,Not Important,Not Important,Very Important,Not Important,Not Important,,No,Yes,"Documentation, Coworkers",Yearly,Probably not,No,Good,OK,Good,Good,Maintain several packages in Spack. Load modules from Spack (maintained by sys admin).,,,,,"In your ""features"" question, many features I'm unfamiliar with, but you required a response, so I filled it in as ""unimportant"" just to check it.",
1/7/2022 14:09:40,User Support Staff,"DOE/Office of Science Lab (e.g., ORNL/ANL/LBL)",United States,Yes,"C, C++, Python, sh/bash/other shell script, Lua","Traditional HPC / Simulation, Statistics / Data Analysis, AI/ML, High Energy Physics, Compiler Testing",Used at my site,5,"Packages, Core Features, Documentation, Slack Discussions, GitHub Discussions, Issues, Mailing List, Tools/integrations","0.12, 0.13, 0.14, 0.15, 0.16, 0.17, develop, custom fork","RHEL 6, RHEL 7, RHEL 8, CentOS 6, CentOS 7, CentOS 8, Arch, SLES12, SLES15, Cray XC","> 1,000","3.6, 3.7, 3.8, 3.9",I'd live (I can provide Python 3 somehow),"Spack environments, Lmod, Environment Modules (TCL modules), Custom script or env vars","Environments, Module generation, Chaining (upstreams), Stacks (matrices in environments), Build caches (binary packages), build-env (debug a build), spack-python (Python scripting), Command Extensions, Python extensions (link python packages into interpreter prefix), spack external find, Externals in packages.yaml, Concretization preferences in packages.yaml, New concretizer (clingo), spack develop, spack install --reuse, spack diff (compare two specs)",Yes -- several,Yes,"AMD, Intel, IBM Power","NVIDIA T4, NVIDIA Volta, AMD MI100, AMD MI200","gcc, Intel Compilers, Intel OneAPI / dpc++, PGI, NVHPC (new NVIDIA PGI compilers), LLVM, AMD ROCmCC / hipcc, nvcc (CUDA), IBM XL, CCE (Cray Compilers)",Very Important,Somewhat important,Critical,Not Important,Somewhat important,Somewhat important,Slightly Important,Somewhat important,Not Important,Slightly Important,Somewhat important,Very Important,Critical,Not Important,Slightly Important,Separate spack core from package repository; or at least package API versioning,"Yes, I'd attend",Yes,"Documentation, Slack, Mailing List, GitHub, spack help, Source Code",Weekly,Probably not,Probably,Excellent,Excellent,OK,Good,"Changes (too) often as spack features (eg. clingo concretizer, stacks, environments) change or are added.",That spack is open source and has a large community of package maintainers.,"Bugs/new behavior in the clingo concretizer requiring retooling our software deployment workflow.

Inability to handle build-only or common low-level yet still linkable dependencies with a generic (eg, OS-provided GCC) toolchain for builds with exotic toolchains (eg nvhpc).

Inability to pin concretization of a single common dependency (eg, openmpi) so that only one unique build of it exists per toolchain when deploying a massive spack environment.

Clingo concretizer silently ignoring global packages.yaml preferences. I'd rather options specified in packages.yaml (or a spack env packages section) to have highest priority and issue a warning or error if they cannot be satisfied.",Iron out all the bugs/unexpected new behavior of the clingo concretizer. Better support mixed toolchain builds (eg: pkg%nvhpc ^dependency%gcc).,,The core dev team is doing a great job.,
1/7/2022 15:45:14,Software Developer,"DOE/NNSA Lab (e.g., LLNL/LANL/SNL)",United States,No,"C++, Python",Traditional HPC / Simulation,Used at my site,4,No,"0.15, custom fork",RHEL 6,10 - 100,2.7,I'd live (I can provide Python 3 somehow),Spack environments,Environments,Yes -- just one,No,"AMD, Intel, IBM Power, ARM",NVIDIA Other,"gcc, LLVM, AMD ROCmCC / hipcc, nvcc (CUDA), IBM XL",Somewhat important,Slightly Important,Slightly Important,Not Important,Very Important,Not Important,Not Important,Not Important,Not Important,Somewhat important,Slightly Important,Not Important,Not Important,Not Important,Not Important,Ability to add my own environment as part of the CI used for public Spack.,Maybe,Yes,"Documentation, Slack, Coworkers, GitHub, Email",Yearly,No,No,Good,Excellent,Good,Excellent,We use spack to build a few dozen top-level packages on TOSS and Sequoia. We only update every few years.,Ability to build a consistent set of packages with flags in a reproducible way.,"Seems like we always have to do a clean build, can't update one thing in a package and re-run spack install. The node-distributed builds don't seem to work 100% of the time. The Qt package breaks every time and it's really slow to build (the latter not being Spack's problem, per se). We haven't had a chance to try out the new concretizer but previously that was a pain with all the builds of tar, etc.",It always seems to me that Spack is underfunded compared to its importance. We have how many build engineers in WSC alone who are basically Spack operators. Shouldn't there be a big team?,"No, coverage is outstanding.",,
1/7/2022 16:26:46,DevOps/SRE,"DOE/NNSA Lab (e.g., LLNL/LANL/SNL)",United States,Yes,"Python, sh/bash/other shell script",High Energy Physics,Used at my site,2,"Packages, Slack Discussions, Issues",develop,"RHEL 7, RHEL 8, CentOS 7, CentOS 8, SLES15, Cray XC, Cray EX","> 1,000",3.8,Do it!,"Spack environments, Environment Modules (TCL modules)","Environments, Module generation, Chaining (upstreams), Build caches (binary packages), build-env (debug a build), spack external find, Externals in packages.yaml, Concretization preferences in packages.yaml, New concretizer (clingo), spack load",Yes -- several,Yes,"AMD, Intel, IBM Power, ARM","NVIDIA Volta, AMD MI100, AMD MI200, AMD Other","gcc, Intel Compilers, Intel OneAPI / dpc++, NVHPC (new NVIDIA PGI compilers), AMD ROCmCC / hipcc, nvcc (CUDA), IBM XL, CCE (Cray Compilers)",Somewhat important,Somewhat important,Somewhat important,Somewhat important,Slightly Important,Somewhat important,Slightly Important,Very Important,Not Important,Not Important,Somewhat important,Very Important,Very Important,Very Important,Somewhat important,"Support for locally-maintained bootstrap buildcache for clingo, instead of assuming we can reach GitHub (see https://github.com/spack/spack/pull/26306)","Yes, I'd attend",Yes,"Documentation, Slack, Coworkers, spack help, Source Code",Weekly,Probably not,Probably,Good,Excellent,Good,Good,,,"Shared development of Spack instances is difficult due to permissions. Since we have a number of air-gapped deployments, we would also like the ability to use local bootstrap buildcaches for clingo (https://github.com/spack/spack/pull/26306) before you ditch the old concretizer.",,,,
1/7/2022 20:55:24,DevOps/SRE,Company,India,No,"Python, sh/bash/other shell script","Compiler Testing, Libraries",Used at my site,3,"Packages, Slack Discussions, GitHub Discussions, Issues","0.17, develop","RHEL 7, CentOS 7, CentOS 8, Ubuntu 20, SLES12, SLES15",100 - 200,"2.7, 3.8",I'd live (I can provide Python 3 somehow),"spack load, Spack environments, Environment Modules (TCL modules), spack build-env, Containers","Environments, Module generation, spack containerize, Build caches (binary packages), build-env (debug a build), New concretizer (clingo), spack load",Yes -- several,Yes,AMD,"AMD MI100, AMD MI200, AMD Other","gcc, LLVM, AMD ROCmCC / hipcc, aocc",Critical,Very Important,Very Important,Somewhat important,Very Important,Somewhat important,Somewhat important,Very Important,Critical,Critical,Critical,Very Important,Very Important,Very Important,Very Important,Spack bundle customization,"Yes, I'd attend",Yes,"Documentation, Slack, Coworkers, GitHub, spack help, Source Code",Monthly,Probably,"Yes, definitely!",Excellent,Good,Excellent,Excellent,Test and Support AMD compiler and libraries spack recipes ,Ease of package installation,Concretizer issues,Windows support,,slack should retain history,
1/8/2022 5:58:27,System Administrator,University HPC/Computing Center,United States,No,"Python, sh/bash/other shell script",Traditional HPC / Simulation,Word of mouth,3,"Slack Discussions, GitHub Discussions, Issues, Mailing List, Does asking questions on Slack count as a contribution?",0.16,"RHEL 8, CentOS 8, Rocky 8",100 - 200,"3.6, 3.7",I'd live (I can provide Python 3 somehow),Lmod,"Module generation, Command Extensions, spack external find, Externals in packages.yaml, Concretization preferences in packages.yaml, spack install --reuse, spack diff (compare two specs)",No,Yes,"AMD, Intel","NVIDIA T4, NVIDIA Ampere","gcc, Intel Compilers, Intel OneAPI / dpc++, NVHPC (new NVIDIA PGI compilers), AMD ROCmCC / hipcc",Very Important,Slightly Important,Somewhat important,Critical,Very Important,Not Important,Very Important,Somewhat important,Not Important,Critical,Somewhat important,Somewhat important,Very Important,Somewhat important,Slightly Important,,"Yes, I'd attend",Yes,"Documentation, Slack, Mailing List, GitHub, spack help",Weekly,Probably not,"Yes, definitely!",Excellent,Excellent,Excellent,Excellent,I'm a sysadmin using Spack+Lmod to build and provision software in a university HPC center.,Building lots and lots of packages that would be very very painful and frustrating otherwise. I've gotten to a point where building software outside of Spack ,"Multiple versions/variants of the same package that seem unnecessary; When there are multiple versions of an applications provisioned using Lmod, it would be be nice to tag them with a more descriptive name than the package hash. For example, tagging OpenFOAM built with different precision as '-dbl-prec' and -'mixed-prec' would be better than some random hash like '-xh' and '-ds'. These hash names are confusing our users.","For me, an alternative way of naming Lmod modules would be most helpful. Reusing packages more consistently would be nice too. I've almost 20 variant of HDF5, Cairo, ... some that look identical to me.","CMAQ and WRF -- There are nominal recipes for them, but they are deceptive. For CMAQ, it barely downloads the package, but does none of the painful compilation and build.","Both Spack and the team are absolutely wonderful and I appreciate everything they do. Todd has been one of my favorite people in the HPC community. Other members of the team have been very helpful in the past, especially Vanessa Sochat. So, thank you for all that you do.",
1/8/2022 12:16:59,Research Software Engineer (RSE),University research group,United States,Yes,"Python, Go, sh/bash/other shell script","Traditional HPC / Simulation, AI/ML, Computer Science Research, High Energy Physics",Used at my site,3,"Packages, Slack Discussions, GitHub Discussions, Issues","develop, custom fork","RHEL 7, RHEL 8, Ubuntu 18, Ubuntu 20, Amazon Linux","> 1,000","3.6, 3.7, 3.8, 3.9, 3.10",Do it!,"spack load, Spack environments, Lmod, Environment Modules (TCL modules), Containers","Environments, Module generation, Build caches (binary packages), Externals in packages.yaml, Concretization preferences in packages.yaml, spack ci (generate GitLab Pipelines)",No,Yes,"AMD, Intel, IBM Power, ARM","NVIDIA T4, NVIDIA Ampere, AMD MI100, AMD MI200, Intel Xe (Ponte Vecchio)","gcc, Intel Compilers, Intel OneAPI / dpc++, NVHPC (new NVIDIA PGI compilers), LLVM, AMD ROCmCC / hipcc, nvcc (CUDA)",Somewhat important,Very Important,Somewhat important,Very Important,Very Important,Somewhat important,Very Important,Somewhat important,Not Important,Somewhat important,Somewhat important,Very Important,Critical,Somewhat important,Very Important,,Maybe,Yes,"Documentation, Slack, Coworkers, GitHub, Source Code",Monthly,Probably,"Yes, definitely!",Good,Excellent,Good,Good,"Build caches, CI, speeding up deployments, creating custom containers",,,,,,